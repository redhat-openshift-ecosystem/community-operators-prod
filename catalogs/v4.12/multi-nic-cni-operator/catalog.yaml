---
defaultChannel: stable
icon:
  base64data: iVBORw0KGgoAAAANSUhEUgAAAF0AAABSCAYAAAA2J9gWAAAAAXNSR0IArs4c6QAAAIRlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAABIAAAAAQAAAEgAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAAF2gAwAEAAAAAQAAAFIAAAAAqqTRPgAAAAlwSFlzAAALEwAACxMBAJqcGAAAEi5JREFUeAHtnAu8VFW9x9fae+bMSyOF1JupgEgpmM+PYX3ygWaJ1f2kmZWPyE8kqfeWhSSYGR/fmZpJVzOVh1n4orqIryugQmTmI81UTLyKUASCGJzZM2dm9ur73zP7sGfOg9nD3gfyM+vDZq+99nr812//1/+11hyl2qmNQBuBNgJtBNoItBFoI9BGoI1AG4E2Am0EBgSBTDabnpbJpl/lKmRy6VfS2fRFjJwakNG3w0F0zDRlMtnMQq3VmMZxjDKPO52F4ygvNr4bwGedzqVPA4TxyqhhjPs3ZcydjlO8iXxpAOmIbijh8GwuY+DwN9Lp9Fh6TqdyqeP4EKuknAlPiW600D3pTCY9W+hovFiNC+gttpUYK6cD9nKt9XC3Yo4pFAoLfVhS2dQJtrbuM0at1MrM9svD3c2KfL74s3BtNtfmg4+3lJ7BituojZrkuuoRaD2UVXm90mo3OH5aPl/4weYW0eXiBr3ARFL5TicLyU6A7J3grvWB55aylbL7oWKxuCyVSn3QttWxfMSm56MtPVEpPco15muFfOFWnwBW5DGWrR8xxrzp5At7+uVR3hNRdtajL61WULYPIuWIYmfxIf99NttxpOSZ2BtGqZv98mbvltbfpO4utO+QNoB0q9L6Y3Bp6KSNfjjYSFYkK7QCs+xBueBTDr6PIh8r6HDebIC4xDbWjGw2dRbiYGkm03GE0rYoKlDXNxQc55qwE8nm0l+GS3fx22mlc153ytxFn2v98i3c/xPaPqB15WDqvenXTeaSH6Y/m+e3uCIH3B+npTtL+hMoxN+ICcj9SczA79HRDg2dpXi/qFFRec/ZtHB+sqF+U4+A/oL00dHRsb80yGYzz8pzMpsUAJtKmVxmkrSB9pWIlCOkkfTn90359KY6GqhKADzVA66H5k//BRqGNNDRwQQnU/85rrcEoEwm823qtLzKfGC2BnTGTyFGFvvzIN/Vnc+lX+b9zg3z2HaPmUxyjBAHkWXAv1iUGDL7U3D0y155Lv2ruKmLCHQhUxy3y2CEv9UAXweH/5TyWAEPzW1a22d6oGpzfaGzOM3LF9Uylug4ZRnhkM8jv5dwd713Ef1XUer1Yr74QETd+d04mIUX8iCXKOUu/0XwztyGKUudgQ7YB12yhpnd6zjO74J1wuRDg260Gi5GgltWDwYHQuu/Bgf+FaL244pcHopmQyztyWS7lV5w/AjyvQOeS5+OHX8L1oxnKXnjWOo8VvlNmJpn84wBFi6FBp3uV8sQVsI6CAf+/wLD7YS1spcYgnyUn8PmkXE6JuKXGGdQpVLxrJTAmLFmRTED+G0AnsCJugt079OuGoU38C1ompjJpJYRMvhxWCJCg64NZpnWp4LtRZh/f3Wcrt9kMur92krPhMNzELcw31k4Kywh/dVHX4zFjBvUX53Gd9C0e1knd20sD/OcUInvIVISMNONOErC1V5i3k9hVd6ttPUdCuIHHVv7fwHhDr7+qQw8F4VaZGCWHuQptd4tm27iPAq3zX+7Kp1ensQbjmJ4rcrdHqv0B6Pdg+J9R+x8HgdzrZPyZlOfnC5WiWWp443Wg7Rx/8JA8+hUAFZEB89Avj6jtDkX8IfhGTqy9EzFXIBb/lqzg8dVD1PyfdCVgq4CK+SllsfRZm+Y6T0VZXU7YrW+dqTvDHkRocHwRlND9Qa6zuRSV+PZnQfhlrCvOGhw9P+XdeVzpc7Sc5S4KLRrucuV5pKPEVqh0CbWBCe+RtynaYepkRhx+ADgElvrH6qs+pPKq79TRxy+G/mYHYjSR3nON7bb0nMP0HFkzgfo79BhBbk9iw5WoDg+zwfYN2kSD5ZUCetEvR3ouBDIv6uyWCc/gdm+wtxHZ1T6FZVTz8CMI8Dn/dVVVJnUyoQbQU/S4RSvI+N+Ie90za11ehlOw6Nwzhi+/n9BzPWtDBaijZhvoZdtiP6brfpPrQpHKpMWk/F4GhE3kqbmJcCfkHdKTzfbUbBeHejIwg/x8r1w+SvIcB9wqV9EeFzHgHdiKsnGxLRgJ1Hn4SJI0F9ChN0Zdd999YcOG2lZ1vsc7bxWEyNe1Xye3SRVGIc19AFj0iNc113T1dX1Yl/9NFNeBzoNcPxIxvPOvKz/Hzh0IMckHFuC42PjQuBOwVVYHebDjB076BLW0FbiZsbygmfsZxmV1fcB/tdVZ9UnEQwcR60EfK6tT3Wg8wVfTiQyq5n0UFz5czAPJQ4haSfLVlO9nDGTKP+Jl4/hP1FerOBLYui6R5c4PwcpZS/khVgi/4ChlnM/EKb6DDL8MUcVDuV5I1ekyWrojV0rI3EILBZrOlp6AQGhmYgTzC69L0S9igd2S0Obf9vHhLavhsEyyLI5WDlDcYA+pkxhJKvsRVb1SBjgv+OYXB2nywAoydtwb3fE17kcgsZWFQdkGPUH46pTqOKbSJbEoS3L7GeM9Tby9xHeNbuBIEMNZLLYhJ7JnERnbU7GHALgJcCeSKFnhSFGVqWy5nzMxPmsuHGUX7a5QTS5HqBLt3CzWCe34+4ebbSFc1TBOSr9wR9SlI6dsO7mGbkLT0AdppXDl7mQttf59babe1btCgOd3pMeCK+Kj3eC71zlrrYJK9KmcVMmWK3lfK+g13pbjwVzby89D5KNW8r3QNy8iUc0Hxk1DAI/CZXXssv+dqGzMLOXdtusCPkBgt7w64xbFu6tJp2YC8PsDnOdGLTWiLl8VSqwCp6v1Yz01h/ovQ6E8zQR+veAomdYlkdRyVM0onhFD7DRK8txFtd246ECbJUWo0qs2CehzUuZjHUNNF/LdQe66xrioy+wJ/Bp5ncqDFXRqhKLPxIadKKMOAhiOlaugPJuzS6WDg7UFI9zOD5Xm1dTN1ZJnrMxnyUmv7ipBhFVkrAsYO/H+F+jywuhnVQ1i4lPn+V0lp6KaKi6bkKD7lFV7aJq09d1R+jAk/GBgH/d+z4fOpj4YbyNBXSMALrvdWzDztEEDIJfEGU6iQDeLsTPX4UBZhK4e9VvIXuxdtI+k3cjWMBriY/cyy7WfP992Hto0AmrLUWGH8+SPJ/BHuDyuBpZfgYqdU+e12B+DePey0ehtCEhrn4IHrGYZv5QsjD9fG93VthjlMvVIyE2z+ab3QCNNb2gla30VzGn5xBtPY0GTc0z2HGjnR5812sek/JGXvwD1jmcgZ/DvLwK4O6CC2Z6DYw7jbuYlRJ5bOYKTbQ3Toj/hNNDVO+uSvj6cAGcApE5NyvjfpavNwV5vwkG+yKMNrm7cohMaE6n73UlVf5kwtj3AvxIZWlvYIgpc0Tt0kK++D8hxqeqS9PQ3z7UEN2crlUHomRss421NpMQTJZR7jX5zqIfUZzHWczn4fb5ltGyQq/k6nclNY7XCuhKYuoS4uV4HJsc9r5scmwwrn6AZfqGPwBycJSdtC6AnI9S5sJqiysVcwWyks3rYKqG7IMlUedZdiZb7XRnzN0FYfsvG/eOYBvk+f146Rvg/90oH8wlp8GaTi2BXuu9K5/v+i15ueqSnIOBC37NEkwHFvYI4jcnw2kn8HEe39wgfk5H2K0G9RtRlPUe6WYies1BvwTBhiTRVSWlng1U2hkRI5vkIho3Bcqbym4N6H0NsCPe3O2ATbjO3FEpuWK323bCnoY4OhFJ8kueR3DVzMr4OZ2xjJN3zuYeKqGrJrNCr8K3+hFe+Aus0uV0sAOm8a2IrCRy/iGeQ5nHQkDkoKN8PkO/QyRWg/N0OvmqvOtSp3Au5lmAHw3RP0IpyQTkNdtpLem5avMY/3c6nemIkdOgeX9W6YucBHsJUvdiyPeKMuWoti/nQ1EROehGm6EsS7A0i6AkqGDKeHyPwSGjucR7bSDUZQVvdymP+XsUVtp0KDuZaR0gFMJQT7Bf/I1SV+mFGsUE1Do+x17y0Zg5HZjVT2LliR5wau/rbpGDDmGyeSuYHlo3UvXhELlB9FzqrfDf4+USpCzWKSv/3XZwX489/mXoOJtj1EMTbmmtRCIDdO1MsO8+VsPh1TItttgEyqayEsbJHkWgrpeNHHSCXfMYcBNEHEs49QrHKYhMtxApl8LhY8ivR76O594dQiD/75A2YLX9qXE5InJmwUCHs6ZXEzq4Fksuj5k5kfmPJhI7j9ORo5hcV3CCkYNO528x+Dmw8wxc6wv4AN+FAE9oSxAJWf516gwI4KyoFKbr6OCEo8zrBL/W0OrTGAwb2dP9CMzkr97bEEmivz6IjiOC6cwJjhsH6Apun41puErZ5mIGGwPY4hMugbCLCaEuCRIQU97TJUx670TS/nNMYwS61Q8CrA+4lDvM+BewGtuO5kCeIwO9A+donKutfS1jNrhV5+h1GVEStvgCbnL5pklQqUqV2BJydHkikb6fkfeKbRA6BtgcH3YoucGN41DulbHq8c3qU0ucjkI5gDAAylAPR2kAK/aKZcqESS8naifcHUwDBnZg0AJ0nBB4jisrSnQlAI8lDnM6K/x2GUhOGPBFzvJwMZWHGwf3MGss3MLz4KRKPMRAw5Fly4xrcB6MHJUgHKG/721mbKGDd9Hr9cx5msyHEORslOrTfITFmI5LwEc2vH/FpskTjfMNzenskItntytieinOz1jyEklUfGnZyJ0Ny3+fx5lcmKvhE1yQDN8q/hboKBFVcthoLeJL9IS3gnGgriLS2kXgbxpAHyw+CtiUeDkdU9MLBjZSFxp0QJEAFl27V3PzAJdnWVp8ZcxCvSde3CYpezckOefO2fsZzPgTMh+LXwnbyfQr2GET/BhSbTP+JiyVQwC8g3KJ07zd1/xDg87gFekMJdJLW+/3l/Kl5WN4nNDXwP2VoyK6sC2X9ldngN4NImb3GHPem+n8kwk9xaz2gbEIaZuHs9nkx/P50h9rtGDAOEuaoasX4PpvhjZ+HDFyAj/4mkrNh7g2SguWGGfV1e58jFWInT0oahl06W97SIjSbwIwgKs/5xV/saN6zA6rLf1zys8wyma1l44KS2to0JFhP0OMnMOgB+FlchLK3M+gQ1Eox8ngxF4ulJvkBzpxYmtOMpfoNd7RCi0owmHSrqLcyYFzjYS0C+eCwRd5dQSXhOp7mIWU9ZlCg05P77Bxe6xt67vhbAJAWjxMESly2GhqwSnO6nO0mF7whVew+g5Eie0T5RCiFCXZxm3cpNgI08nH7eCSc5Cxg65quz8Ho9E/zrE6zjhaG4ixyAGkRuIoUkOoN6piVTaW8t6vODydIC+iSrjfp+DujzRJhF+EKWESF8FYJwH7BMTIU37XKMwvkB8Eo73JfZ1fvj3cd0D2zWQZVrBmqn/Ihl8mQ/DJYYkjjrFM+gBYb+en8RfTYftrtj5O4IHQX5KxEaX3YBaPl58GUVb0yjKplk4xtCJemqHZAqh5iJ6jEDldcMSTrFQ5T4jmV3cRez6ZGMw9zXQUYx3NCjxa2/pg5boF9m8XYH+/FBxPooqJTOIryHb5LelJiBu4nsXEPwyGn2Iq3hCsv03zws017l4Dd+5XI0bD+bU/L5VZSVnT3nDUnC62N5z7RI1GbxXCvS703QxdPZwzcYzk3Ly3coXTxc3fihQLp3N04VPCDsZ1r4B7XqzRJ6epfsDkZPtrOCLieUydxvB0r1Nhpewl3BVRSuChz6e/A7CxJAY+h02UQfTN72L1BPZFO7HQzguOhbPzBs+XBsu2Jh8L6EwkJxixPbemgTgMDS3Kdjh3+bl3U6nmWhf4gHWK2iRMku0BsSCaTqxCjs+pA/iQK/An5OeOniKEm2fg8Czi+Vyuy7nWcsWS4gHdqOeR3afgn54J1b/k8uz26s9NOIhv+ItBRh9Z1uWmbWrO2aymnzrQkzrxNHZ5a8BoLT/t6bY84ObFiLFH+cDHcJjosK05q7glglqkuP9u2ZS9BXnJ71H1WCayCMRn0WI3InGTuducBLuJPyO1tP9e+n7LCnqU7yg2eZNrpa4vfmQhp7aMXVdaffDLPCbp5f32XcRyPRLg1weVlZfPsrlQdSi2yQTkBwBCB4p0Fb7kf/hEVP9eZNoVc5CywX55HPdWOCUMHUNQTONRVPuzX7eJn5XcH+eybZIw2ST/PeLvMOqvR/HMlb9/wP1EVgDOp7kSR29Kk321q4VAYBfE3sLgKoTDyzDIdfThi5gQ3YWrGjenh6NmgGtjbx+GeD/E1bpAVGsRyvT1ASahPVwbgTYCbQTaCLQRaCPQRqCNQBuBNgJtBNoItBFoI/DuRuBfKeVnS7U5ZxAAAAAASUVORK5CYII=
  mediatype: image/png
name: multi-nic-cni-operator
schema: olm.package
---
entries:
- name: multi-nic-cni-operator.v1.0.2
- name: multi-nic-cni-operator.v1.2.1
  replaces: multi-nic-cni-operator.v1.0.2
- name: multi-nic-cni-operator.v1.2.2
  replaces: multi-nic-cni-operator.v1.2.1
- name: multi-nic-cni-operator.v1.2.8
  replaces: multi-nic-cni-operator.v1.2.2
- name: multi-nic-cni-operator.v1.2.9
  replaces: multi-nic-cni-operator.v1.2.8
- name: multi-nic-cni-operator.v1.3.0
  replaces: multi-nic-cni-operator.v1.2.9
name: alpha
package: multi-nic-cni-operator
schema: olm.channel
---
entries:
- name: multi-nic-cni-operator.v1.1.0
- name: multi-nic-cni-operator.v1.2.0
  replaces: multi-nic-cni-operator.v1.1.0
- name: multi-nic-cni-operator.v1.2.3
  replaces: multi-nic-cni-operator.v1.2.0
- name: multi-nic-cni-operator.v1.2.7
  replaces: multi-nic-cni-operator.v1.2.3
name: beta
package: multi-nic-cni-operator
schema: olm.channel
---
entries:
- name: multi-nic-cni-operator.v1.0.3
- name: multi-nic-cni-operator.v1.0.4
  replaces: multi-nic-cni-operator.v1.0.3
- name: multi-nic-cni-operator.v1.0.5
  replaces: multi-nic-cni-operator.v1.0.4
- name: multi-nic-cni-operator.v1.2.4
  replaces: multi-nic-cni-operator.v1.0.5
- name: multi-nic-cni-operator.v1.2.5
  replaces: multi-nic-cni-operator.v1.2.4
- name: multi-nic-cni-operator.v1.2.6
  replaces: multi-nic-cni-operator.v1.2.5
name: stable
package: multi-nic-cni-operator
schema: olm.channel
---
image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:771dcbe925553ac39084aaf03e2e744ec8e71a6caec8c28d00fea14bcaa70ab6
name: multi-nic-cni-operator.v1.0.2
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.0.2
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibGlzdEtpbmQiOiJNdWx0aU5pY05ldHdvcmtMaXN0IiwicGx1cmFsIjoibXVsdGluaWNuZXR3b3JrcyIsInNpbmd1bGFyIjoibXVsdGluaWNuZXR3b3JrIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIE11bHRpTmljTmV0d29yayBNYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbCBTdWJuZXQgaXMgZ2xvYmFsIHN1Ym5ldCwgZGVmYXVsdDogMTcyLjMwLjAuMC8xNiBJUEFNIGlzIGlwYW0gc3BlY2lmaWNhdGlvbiBNYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uIFBvbGljeSBpcyBnZW5lcmFsIHBvbGljeSBvZiB0aGUgcG9vbCIsInByb3BlcnRpZXMiOnsiYXR0YWNoUG9saWN5Ijp7ImRlc2NyaXB0aW9uIjoiQXNzaWdubWVudFBvbGljeSBkZWZpbmVzIHRoZSBwb2xpY3kgdG8gc2VsZWN0IHRoZSBOSUNzIGZyb20gdGhlIHBvb2wgU3RyYXRlZ3kgaXMgb25lIG9mIE5vbmUsIENvc3RPcHQsIFBlcmZPcHQsIFFvU0NsYXNzIFRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHMgcmVxdWlyZWQgZm9yIENvc3RPcHQgYW5kIFBlcmZPcHQiLCJwcm9wZXJ0aWVzIjp7InN0cmF0ZWd5Ijp7InR5cGUiOiJzdHJpbmcifSwidGFyZ2V0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0cmF0ZWd5Il0sInR5cGUiOiJvYmplY3QifSwiaXBhbSI6eyJ0eXBlIjoic3RyaW5nIn0sIm1hc3Rlck5ldHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwibXVsdGlOSUNJUEFNIjp7InR5cGUiOiJib29sZWFuIn0sIm5hbWVzcGFjZXMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwicGx1Z2luIjp7ImRlc2NyaXB0aW9uIjoicmVmZXJlbmNlOiBnaXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvY25pL3BrZy90eXBlcyIsInByb3BlcnRpZXMiOnsiYXJncyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJvYmplY3QifSwiY2FwYWJpbGl0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJib29sZWFuIn0sInR5cGUiOiJvYmplY3QifSwiY25pVmVyc2lvbiI6eyJ0eXBlIjoic3RyaW5nIn0sImRucyI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImRvbWFpbiI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWVzZXJ2ZXJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm9wdGlvbnMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwic2VhcmNoIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY25pVmVyc2lvbiIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaXBhbSIsInBsdWdpbiJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29ya1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBNdWx0aU5pY05ldHdvcmsiLCJwcm9wZXJ0aWVzIjp7ImNvbXB1dGVSZXN1bHRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sIm51bU9mSG9zdHMiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbIm5ldEFkZHJlc3MiLCJudW1PZkhvc3RzIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImxhc3RTeW5jVGltZSI6eyJmb3JtYXQiOiJkYXRlLXRpbWUiLCJ0eXBlIjoic3RyaW5nIn0sInJvdXRlU3RhdHVzIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImNvbXB1dGVSZXN1bHRzIiwibGFzdFN5bmNUaW1lIiwicm91dGVTdGF0dXMiXSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6W10sInN0b3JlZFZlcnNpb25zIjpbXX19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNpZHJzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkNJRFIiLCJsaXN0S2luZCI6IkNJRFJMaXN0IiwicGx1cmFsIjoiY2lkcnMiLCJzaW5ndWxhciI6ImNpZHIifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQ0lEUiIsInByb3BlcnRpZXMiOnsiY2lkciI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Imhvc3RzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaG9zdEluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdElQIiwiaG9zdEluZGV4IiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwicG9kQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbnRlcmZhY2VJbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuZXRBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbkNJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdHMiLCJpbnRlcmZhY2VJbmRleCIsIm5ldEFkZHJlc3MiLCJ2bGFuQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWciOnsiZGVzY3JpcHRpb24iOiJJTlNFUlQgQURESVRJT05BTCBTUEVDIEZJRUxEUyAtIGRlc2lyZWQgc3RhdGUgb2YgY2x1c3RlciBJbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImRldmljZWNsYXNzZXMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiRGV2aWNlQ2xhc3MiLCJsaXN0S2luZCI6IkRldmljZUNsYXNzTGlzdCIsInBsdXJhbCI6ImRldmljZWNsYXNzZXMiLCJzaW5ndWxhciI6ImRldmljZWNsYXNzIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiRGV2aWNlQ2xhc3MgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGRldmljZWNsYXNzZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1NwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInByb3BlcnRpZXMiOnsiaWRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsicHJvZHVjdHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInByb2R1Y3RzIiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpZHMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Imhvc3RpbnRlcmZhY2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJsaXN0S2luZCI6Ikhvc3RJbnRlcmZhY2VMaXN0IiwicGx1cmFsIjoiaG9zdGludGVyZmFjZXMiLCJzaW5ndWxhciI6Imhvc3RpbnRlcmZhY2UifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwY2lBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwicHJvZHVjdCI6eyJ0eXBlIjoic3RyaW5nIn0sInZlbmRvciI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0SVAiLCJpbnRlcmZhY2VOYW1lIiwibmV0QWRkcmVzcyIsInBjaUFkZHJlc3MiLCJwcm9kdWN0IiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJob3N0TmFtZSIsImludGVyZmFjZXMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIEhvc3RJbnRlcmZhY2UiLCJwcm9wZXJ0aWVzIjp7InN0YXQiOnsicHJvcGVydGllcyI6eyJjb3VudCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibGFzdFJ4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RSeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFRpbWVzdGFtcCI6eyJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VHhEcm9wIjp7InR5cGUiOiJpbnRlZ2VyIn0sInJ4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwicnhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn0sInR4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJjb3VudCIsImludGVyZmFjZU5hbWUiLCJsYXN0UngiLCJsYXN0UnhEcm9wIiwibGFzdFRpbWVzdGFtcCIsImxhc3RUeCIsImxhc3RUeERyb3AiLCJyeERyb3BSYXRlIiwicnhSYXRlIiwidHhEcm9wUmF0ZSIsInR4UmF0ZSJdLCJ0eXBlIjoib2JqZWN0In19LCJyZXF1aXJlZCI6WyJzdGF0Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImlwcG9vbHMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiSVBQb29sIiwibGlzdEtpbmQiOiJJUFBvb2xMaXN0IiwicGx1cmFsIjoiaXBwb29scyIsInNpbmd1bGFyIjoiaXBwb29sIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBpcHBvb2xzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIElQUG9vbCIsInByb3BlcnRpZXMiOnsiYWxsb2NhdGlvbnMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJhZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwiaW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwibmFtZXNwYWNlIjp7InR5cGUiOiJzdHJpbmcifSwicG9kIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFkZHJlc3MiLCJpbmRleCIsIm5hbWVzcGFjZSIsInBvZCJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJleGNsdWRlcyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJuZXRBdHRhY2hEZWYiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RDSURSIjp7ImRlc2NyaXB0aW9uIjoiRm9vIGlzIGFuIGV4YW1wbGUgZmllbGQgb2YgSVBQb29sLiBFZGl0IGlwcG9vbF90eXBlcy5nbyB0byByZW1vdmUvdXBkYXRlIiwidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJhbGxvY2F0aW9ucyIsImV4Y2x1ZGVzIiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwibmV0QXR0YWNoRGVmIiwicG9kQ0lEUiIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIElQUG9vbCIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9tZXRyaWNzIl0sInZlcmJzIjpbImdldCJdfV19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlIn0sInNwZWMiOnsicG9ydHMiOlt7Im5hbWUiOiJodHRwcyIsInBvcnQiOjg0NDMsInRhcmdldFBvcnQiOiJodHRwcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.0.2
  name: ""
- image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:771dcbe925553ac39084aaf03e2e744ec8e71a6caec8c28d00fea14bcaa70ab6
  name: ""
schema: olm.bundle
---
image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:7366b9ba3a3a910293fb26473562e7d402c1cb6fa4645c189224b15058cdb936
name: multi-nic-cni-operator.v1.0.3
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.0.3
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibGlzdEtpbmQiOiJNdWx0aU5pY05ldHdvcmtMaXN0IiwicGx1cmFsIjoibXVsdGluaWNuZXR3b3JrcyIsInNpbmd1bGFyIjoibXVsdGluaWNuZXR3b3JrIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIE11bHRpTmljTmV0d29yayBNYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbCBTdWJuZXQgaXMgZ2xvYmFsIHN1Ym5ldCwgZGVmYXVsdDogMTcyLjMwLjAuMC8xNiBJUEFNIGlzIGlwYW0gc3BlY2lmaWNhdGlvbiBNYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uIFBvbGljeSBpcyBnZW5lcmFsIHBvbGljeSBvZiB0aGUgcG9vbCIsInByb3BlcnRpZXMiOnsiYXR0YWNoUG9saWN5Ijp7ImRlc2NyaXB0aW9uIjoiQXNzaWdubWVudFBvbGljeSBkZWZpbmVzIHRoZSBwb2xpY3kgdG8gc2VsZWN0IHRoZSBOSUNzIGZyb20gdGhlIHBvb2wgU3RyYXRlZ3kgaXMgb25lIG9mIE5vbmUsIENvc3RPcHQsIFBlcmZPcHQsIFFvU0NsYXNzIFRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHMgcmVxdWlyZWQgZm9yIENvc3RPcHQgYW5kIFBlcmZPcHQiLCJwcm9wZXJ0aWVzIjp7InN0cmF0ZWd5Ijp7InR5cGUiOiJzdHJpbmcifSwidGFyZ2V0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0cmF0ZWd5Il0sInR5cGUiOiJvYmplY3QifSwiaXBhbSI6eyJ0eXBlIjoic3RyaW5nIn0sIm1hc3Rlck5ldHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwibXVsdGlOSUNJUEFNIjp7InR5cGUiOiJib29sZWFuIn0sIm5hbWVzcGFjZXMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwicGx1Z2luIjp7ImRlc2NyaXB0aW9uIjoicmVmZXJlbmNlOiBnaXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvY25pL3BrZy90eXBlcyIsInByb3BlcnRpZXMiOnsiYXJncyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJvYmplY3QifSwiY2FwYWJpbGl0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJib29sZWFuIn0sInR5cGUiOiJvYmplY3QifSwiY25pVmVyc2lvbiI6eyJ0eXBlIjoic3RyaW5nIn0sImRucyI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImRvbWFpbiI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWVzZXJ2ZXJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm9wdGlvbnMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwic2VhcmNoIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY25pVmVyc2lvbiIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaXBhbSIsInBsdWdpbiJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29ya1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBNdWx0aU5pY05ldHdvcmsiLCJwcm9wZXJ0aWVzIjp7ImNvbXB1dGVSZXN1bHRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sIm51bU9mSG9zdHMiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbIm5ldEFkZHJlc3MiLCJudW1PZkhvc3RzIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZ1N0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn0sImRpc2NvdmVyeSI6eyJwcm9wZXJ0aWVzIjp7ImNpZHJQcm9jZXNzZWQiOnsidHlwZSI6ImludGVnZXIifSwiZXhpc3REYWVtb24iOnsidHlwZSI6ImludGVnZXIifSwiaW5mb0F2YWlsYWJsZSI6eyJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsiY2lkclByb2Nlc3NlZCIsImV4aXN0RGFlbW9uIiwiaW5mb0F2YWlsYWJsZSJdLCJ0eXBlIjoib2JqZWN0In0sImxhc3RTeW5jVGltZSI6eyJmb3JtYXQiOiJkYXRlLXRpbWUiLCJ0eXBlIjoic3RyaW5nIn0sIm1lc3NhZ2UiOnsidHlwZSI6InN0cmluZyJ9LCJyb3V0ZVN0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJjb21wdXRlUmVzdWx0cyIsImNvbmZpZ1N0YXR1cyIsImRpc2NvdmVyeSIsImxhc3RTeW5jVGltZSIsIm1lc3NhZ2UiLCJyb3V0ZVN0YXR1cyJdLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNpZHJzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkNJRFIiLCJsaXN0S2luZCI6IkNJRFJMaXN0IiwicGx1cmFsIjoiY2lkcnMiLCJzaW5ndWxhciI6ImNpZHIifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQ0lEUiIsInByb3BlcnRpZXMiOnsiY2lkciI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Imhvc3RzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaG9zdEluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImlwcG9vbCI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdElQIiwiaG9zdEluZGV4IiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwicG9kQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbnRlcmZhY2VJbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuZXRBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbkNJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdHMiLCJpbnRlcmZhY2VJbmRleCIsIm5ldEFkZHJlc3MiLCJ2bGFuQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWciOnsiZGVzY3JpcHRpb24iOiJJTlNFUlQgQURESVRJT05BTCBTUEVDIEZJRUxEUyAtIGRlc2lyZWQgc3RhdGUgb2YgY2x1c3RlciBJbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNvbmZpZ3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiQ29uZmlnIiwibGlzdEtpbmQiOiJDb25maWdMaXN0IiwicGx1cmFsIjoiY29uZmlncyIsInNpbmd1bGFyIjoiY29uZmlnIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiQ29uZmlnIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjb25maWdzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiQ29uZmlnU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIENvbmZpZyIsInByb3BlcnRpZXMiOnsiYWRkUm91dGVQYXRoIjp7InR5cGUiOiJzdHJpbmcifSwiY25pVHlwZSI6eyJkZXNjcmlwdGlvbiI6IklOU0VSVCBBRERJVElPTkFMIFNQRUMgRklFTERTIC0gZGVzaXJlZCBzdGF0ZSBvZiBjbHVzdGVyIEltcG9ydGFudDogUnVuIFwibWFrZVwiIHRvIHJlZ2VuZXJhdGUgY29kZSBhZnRlciBtb2RpZnlpbmcgdGhpcyBmaWxlIiwidHlwZSI6InN0cmluZyJ9LCJkYWVtb24iOnsicHJvcGVydGllcyI6eyJlbnYiOnsiaXRlbXMiOnsiZGVzY3JpcHRpb24iOiJFbnZWYXIgcmVwcmVzZW50cyBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZSBwcmVzZW50IGluIGEgQ29udGFpbmVyLiIsInByb3BlcnRpZXMiOnsibmFtZSI6eyJkZXNjcmlwdGlvbiI6Ik5hbWUgb2YgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlLiBNdXN0IGJlIGEgQ19JREVOVElGSUVSLiIsInR5cGUiOiJzdHJpbmcifSwidmFsdWUiOnsiZGVzY3JpcHRpb24iOiJWYXJpYWJsZSByZWZlcmVuY2VzICQoVkFSX05BTUUpIGFyZSBleHBhbmRlZCB1c2luZyB0aGUgcHJldmlvdXNseSBkZWZpbmVkIGVudmlyb25tZW50IHZhcmlhYmxlcyBpbiB0aGUgY29udGFpbmVyIGFuZCBhbnkgc2VydmljZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuIElmIGEgdmFyaWFibGUgY2Fubm90IGJlIHJlc29sdmVkLCB0aGUgcmVmZXJlbmNlIGluIHRoZSBpbnB1dCBzdHJpbmcgd2lsbCBiZSB1bmNoYW5nZWQuIERvdWJsZSAkJCBhcmUgcmVkdWNlZCB0byBhIHNpbmdsZSAkLCB3aGljaCBhbGxvd3MgZm9yIGVzY2FwaW5nIHRoZSAkKFZBUl9OQU1FKSBzeW50YXg6IGkuZS4gXCIkJChWQVJfTkFNRSlcIiB3aWxsIHByb2R1Y2UgdGhlIHN0cmluZyBsaXRlcmFsIFwiJChWQVJfTkFNRSlcIi4gRXNjYXBlZCByZWZlcmVuY2VzIHdpbGwgbmV2ZXIgYmUgZXhwYW5kZWQsIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGUgdmFyaWFibGUgZXhpc3RzIG9yIG5vdC4gRGVmYXVsdHMgdG8gXCJcIi4iLCJ0eXBlIjoic3RyaW5nIn0sInZhbHVlRnJvbSI6eyJkZXNjcmlwdGlvbiI6IlNvdXJjZSBmb3IgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlJ3MgdmFsdWUuIENhbm5vdCBiZSB1c2VkIGlmIHZhbHVlIGlzIG5vdCBlbXB0eS4iLCJwcm9wZXJ0aWVzIjp7ImNvbmZpZ01hcEtleVJlZiI6eyJkZXNjcmlwdGlvbiI6IlNlbGVjdHMgYSBrZXkgb2YgYSBDb25maWdNYXAuIiwicHJvcGVydGllcyI6eyJrZXkiOnsiZGVzY3JpcHRpb24iOiJUaGUga2V5IHRvIHNlbGVjdC4iLCJ0eXBlIjoic3RyaW5nIn0sIm5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG9mIHRoZSByZWZlcmVudC4gTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9vdmVydmlldy93b3JraW5nLXdpdGgtb2JqZWN0cy9uYW1lcy8jbmFtZXMgVE9ETzogQWRkIG90aGVyIHVzZWZ1bCBmaWVsZHMuIGFwaVZlcnNpb24sIGtpbmQsIHVpZD8iLCJ0eXBlIjoic3RyaW5nIn0sIm9wdGlvbmFsIjp7ImRlc2NyaXB0aW9uIjoiU3BlY2lmeSB3aGV0aGVyIHRoZSBDb25maWdNYXAgb3IgaXRzIGtleSBtdXN0IGJlIGRlZmluZWQiLCJ0eXBlIjoiYm9vbGVhbiJ9fSwicmVxdWlyZWQiOlsia2V5Il0sInR5cGUiOiJvYmplY3QifSwiZmllbGRSZWYiOnsiZGVzY3JpcHRpb24iOiJTZWxlY3RzIGEgZmllbGQgb2YgdGhlIHBvZDogc3VwcG9ydHMgbWV0YWRhdGEubmFtZSwgbWV0YWRhdGEubmFtZXNwYWNlLCBgbWV0YWRhdGEubGFiZWxzWydcdTAwM2NLRVlcdTAwM2UnXWAsIGBtZXRhZGF0YS5hbm5vdGF0aW9uc1snXHUwMDNjS0VZXHUwMDNlJ11gLCBzcGVjLm5vZGVOYW1lLCBzcGVjLnNlcnZpY2VBY2NvdW50TmFtZSwgc3RhdHVzLmhvc3RJUCwgc3RhdHVzLnBvZElQLCBzdGF0dXMucG9kSVBzLiIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IlZlcnNpb24gb2YgdGhlIHNjaGVtYSB0aGUgRmllbGRQYXRoIGlzIHdyaXR0ZW4gaW4gdGVybXMgb2YsIGRlZmF1bHRzIHRvIFwidjFcIi4iLCJ0eXBlIjoic3RyaW5nIn0sImZpZWxkUGF0aCI6eyJkZXNjcmlwdGlvbiI6IlBhdGggb2YgdGhlIGZpZWxkIHRvIHNlbGVjdCBpbiB0aGUgc3BlY2lmaWVkIEFQSSB2ZXJzaW9uLiIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImZpZWxkUGF0aCJdLCJ0eXBlIjoib2JqZWN0In0sInJlc291cmNlRmllbGRSZWYiOnsiZGVzY3JpcHRpb24iOiJTZWxlY3RzIGEgcmVzb3VyY2Ugb2YgdGhlIGNvbnRhaW5lcjogb25seSByZXNvdXJjZXMgbGltaXRzIGFuZCByZXF1ZXN0cyAobGltaXRzLmNwdSwgbGltaXRzLm1lbW9yeSwgbGltaXRzLmVwaGVtZXJhbC1zdG9yYWdlLCByZXF1ZXN0cy5jcHUsIHJlcXVlc3RzLm1lbW9yeSBhbmQgcmVxdWVzdHMuZXBoZW1lcmFsLXN0b3JhZ2UpIGFyZSBjdXJyZW50bHkgc3VwcG9ydGVkLiIsInByb3BlcnRpZXMiOnsiY29udGFpbmVyTmFtZSI6eyJkZXNjcmlwdGlvbiI6IkNvbnRhaW5lciBuYW1lOiByZXF1aXJlZCBmb3Igdm9sdW1lcywgb3B0aW9uYWwgZm9yIGVudiB2YXJzIiwidHlwZSI6InN0cmluZyJ9LCJkaXZpc29yIjp7ImFueU9mIjpbeyJ0eXBlIjoiaW50ZWdlciJ9LHsidHlwZSI6InN0cmluZyJ9XSwiZGVzY3JpcHRpb24iOiJTcGVjaWZpZXMgdGhlIG91dHB1dCBmb3JtYXQgb2YgdGhlIGV4cG9zZWQgcmVzb3VyY2VzLCBkZWZhdWx0cyB0byBcIjFcIiIsInBhdHRlcm4iOiJeKFxcK3wtKT8oKFswLTldKyhcXC5bMC05XSopPyl8KFxcLlswLTldKykpKChbS01HVFBFXWkpfFtudW1rTUdUUEVdfChbZUVdKFxcK3wtKT8oKFswLTldKyhcXC5bMC05XSopPyl8KFxcLlswLTldKykpKSk/JCIsIngta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nIjp0cnVlfSwicmVzb3VyY2UiOnsiZGVzY3JpcHRpb24iOiJSZXF1aXJlZDogcmVzb3VyY2UgdG8gc2VsZWN0IiwidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsicmVzb3VyY2UiXSwidHlwZSI6Im9iamVjdCJ9LCJzZWNyZXRLZXlSZWYiOnsiZGVzY3JpcHRpb24iOiJTZWxlY3RzIGEga2V5IG9mIGEgc2VjcmV0IGluIHRoZSBwb2QncyBuYW1lc3BhY2UiLCJwcm9wZXJ0aWVzIjp7ImtleSI6eyJkZXNjcmlwdGlvbiI6IlRoZSBrZXkgb2YgdGhlIHNlY3JldCB0byBzZWxlY3QgZnJvbS4gIE11c3QgYmUgYSB2YWxpZCBzZWNyZXQga2V5LiIsInR5cGUiOiJzdHJpbmcifSwibmFtZSI6eyJkZXNjcmlwdGlvbiI6Ik5hbWUgb2YgdGhlIHJlZmVyZW50LiBNb3JlIGluZm86IGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL292ZXJ2aWV3L3dvcmtpbmctd2l0aC1vYmplY3RzL25hbWVzLyNuYW1lcyBUT0RPOiBBZGQgb3RoZXIgdXNlZnVsIGZpZWxkcy4gYXBpVmVyc2lvbiwga2luZCwgdWlkPyIsInR5cGUiOiJzdHJpbmcifSwib3B0aW9uYWwiOnsiZGVzY3JpcHRpb24iOiJTcGVjaWZ5IHdoZXRoZXIgdGhlIFNlY3JldCBvciBpdHMga2V5IG11c3QgYmUgZGVmaW5lZCIsInR5cGUiOiJib29sZWFuIn19LCJyZXF1aXJlZCI6WyJrZXkiXSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsibmFtZSJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJlbnZGcm9tIjp7Iml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiRW52RnJvbVNvdXJjZSByZXByZXNlbnRzIHRoZSBzb3VyY2Ugb2YgYSBzZXQgb2YgQ29uZmlnTWFwcyIsInByb3BlcnRpZXMiOnsiY29uZmlnTWFwUmVmIjp7ImRlc2NyaXB0aW9uIjoiVGhlIENvbmZpZ01hcCB0byBzZWxlY3QgZnJvbSIsInByb3BlcnRpZXMiOnsibmFtZSI6eyJkZXNjcmlwdGlvbiI6Ik5hbWUgb2YgdGhlIHJlZmVyZW50LiBNb3JlIGluZm86IGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL292ZXJ2aWV3L3dvcmtpbmctd2l0aC1vYmplY3RzL25hbWVzLyNuYW1lcyBUT0RPOiBBZGQgb3RoZXIgdXNlZnVsIGZpZWxkcy4gYXBpVmVyc2lvbiwga2luZCwgdWlkPyIsInR5cGUiOiJzdHJpbmcifSwib3B0aW9uYWwiOnsiZGVzY3JpcHRpb24iOiJTcGVjaWZ5IHdoZXRoZXIgdGhlIENvbmZpZ01hcCBtdXN0IGJlIGRlZmluZWQiLCJ0eXBlIjoiYm9vbGVhbiJ9fSwidHlwZSI6Im9iamVjdCJ9LCJwcmVmaXgiOnsiZGVzY3JpcHRpb24iOiJBbiBvcHRpb25hbCBpZGVudGlmaWVyIHRvIHByZXBlbmQgdG8gZWFjaCBrZXkgaW4gdGhlIENvbmZpZ01hcC4gTXVzdCBiZSBhIENfSURFTlRJRklFUi4iLCJ0eXBlIjoic3RyaW5nIn0sInNlY3JldFJlZiI6eyJkZXNjcmlwdGlvbiI6IlRoZSBTZWNyZXQgdG8gc2VsZWN0IGZyb20iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG9mIHRoZSByZWZlcmVudC4gTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9vdmVydmlldy93b3JraW5nLXdpdGgtb2JqZWN0cy9uYW1lcy8jbmFtZXMgVE9ETzogQWRkIG90aGVyIHVzZWZ1bCBmaWVsZHMuIGFwaVZlcnNpb24sIGtpbmQsIHVpZD8iLCJ0eXBlIjoic3RyaW5nIn0sIm9wdGlvbmFsIjp7ImRlc2NyaXB0aW9uIjoiU3BlY2lmeSB3aGV0aGVyIHRoZSBTZWNyZXQgbXVzdCBiZSBkZWZpbmVkIiwidHlwZSI6ImJvb2xlYW4ifX0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImltYWdlIjp7InR5cGUiOiJzdHJpbmcifSwiaW1hZ2VQdWxsUG9saWN5Ijp7InR5cGUiOiJzdHJpbmcifSwiaW1hZ2VQdWxsU2VjcmV0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm1vdW50cyI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Imhvc3RwYXRoIjp7InR5cGUiOiJzdHJpbmcifSwibmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZHBhdGgiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdHBhdGgiLCJuYW1lIiwicG9kcGF0aCJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJub2RlU2VsZWN0b3IiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoib2JqZWN0In0sInBvcnQiOnsidHlwZSI6ImludGVnZXIifSwicmVzb3VyY2VzIjp7ImRlc2NyaXB0aW9uIjoiUmVzb3VyY2VSZXF1aXJlbWVudHMgZGVzY3JpYmVzIHRoZSBjb21wdXRlIHJlc291cmNlIHJlcXVpcmVtZW50cy4iLCJwcm9wZXJ0aWVzIjp7ImxpbWl0cyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJhbnlPZiI6W3sidHlwZSI6ImludGVnZXIifSx7InR5cGUiOiJzdHJpbmcifV0sInBhdHRlcm4iOiJeKFxcK3wtKT8oKFswLTldKyhcXC5bMC05XSopPyl8KFxcLlswLTldKykpKChbS01HVFBFXWkpfFtudW1rTUdUUEVdfChbZUVdKFxcK3wtKT8oKFswLTldKyhcXC5bMC05XSopPyl8KFxcLlswLTldKykpKSk/JCIsIngta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nIjp0cnVlfSwiZGVzY3JpcHRpb24iOiJMaW1pdHMgZGVzY3JpYmVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiBjb21wdXRlIHJlc291cmNlcyBhbGxvd2VkLiBNb3JlIGluZm86IGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL2NvbmZpZ3VyYXRpb24vbWFuYWdlLXJlc291cmNlcy1jb250YWluZXJzLyIsInR5cGUiOiJvYmplY3QifSwicmVxdWVzdHMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsiYW55T2YiOlt7InR5cGUiOiJpbnRlZ2VyIn0seyJ0eXBlIjoic3RyaW5nIn1dLCJwYXR0ZXJuIjoiXihcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSgoW0tNR1RQRV1pKXxbbnVta01HVFBFXXwoW2VFXShcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSkpPyQiLCJ4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZyI6dHJ1ZX0sImRlc2NyaXB0aW9uIjoiUmVxdWVzdHMgZGVzY3JpYmVzIHRoZSBtaW5pbXVtIGFtb3VudCBvZiBjb21wdXRlIHJlc291cmNlcyByZXF1aXJlZC4gSWYgUmVxdWVzdHMgaXMgb21pdHRlZCBmb3IgYSBjb250YWluZXIsIGl0IGRlZmF1bHRzIHRvIExpbWl0cyBpZiB0aGF0IGlzIGV4cGxpY2l0bHkgc3BlY2lmaWVkLCBvdGhlcndpc2UgdG8gYW4gaW1wbGVtZW50YXRpb24tZGVmaW5lZCB2YWx1ZS4gTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9jb25maWd1cmF0aW9uL21hbmFnZS1yZXNvdXJjZXMtY29udGFpbmVycy8iLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In0sInNlY3VyaXR5Q29udGV4dCI6eyJkZXNjcmlwdGlvbiI6IlNlY3VyaXR5Q29udGV4dCBob2xkcyBzZWN1cml0eSBjb25maWd1cmF0aW9uIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIGEgY29udGFpbmVyLiBTb21lIGZpZWxkcyBhcmUgcHJlc2VudCBpbiBib3RoIFNlY3VyaXR5Q29udGV4dCBhbmQgUG9kU2VjdXJpdHlDb250ZXh0LiAgV2hlbiBib3RoIGFyZSBzZXQsIHRoZSB2YWx1ZXMgaW4gU2VjdXJpdHlDb250ZXh0IHRha2UgcHJlY2VkZW5jZS4iLCJwcm9wZXJ0aWVzIjp7ImFsbG93UHJpdmlsZWdlRXNjYWxhdGlvbiI6eyJkZXNjcmlwdGlvbiI6IkFsbG93UHJpdmlsZWdlRXNjYWxhdGlvbiBjb250cm9scyB3aGV0aGVyIGEgcHJvY2VzcyBjYW4gZ2FpbiBtb3JlIHByaXZpbGVnZXMgdGhhbiBpdHMgcGFyZW50IHByb2Nlc3MuIFRoaXMgYm9vbCBkaXJlY3RseSBjb250cm9scyBpZiB0aGUgbm9fbmV3X3ByaXZzIGZsYWcgd2lsbCBiZSBzZXQgb24gdGhlIGNvbnRhaW5lciBwcm9jZXNzLiBBbGxvd1ByaXZpbGVnZUVzY2FsYXRpb24gaXMgdHJ1ZSBhbHdheXMgd2hlbiB0aGUgY29udGFpbmVyIGlzOiAxKSBydW4gYXMgUHJpdmlsZWdlZCAyKSBoYXMgQ0FQX1NZU19BRE1JTiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwidHlwZSI6ImJvb2xlYW4ifSwiY2FwYWJpbGl0aWVzIjp7ImRlc2NyaXB0aW9uIjoiVGhlIGNhcGFiaWxpdGllcyB0byBhZGQvZHJvcCB3aGVuIHJ1bm5pbmcgY29udGFpbmVycy4gRGVmYXVsdHMgdG8gdGhlIGRlZmF1bHQgc2V0IG9mIGNhcGFiaWxpdGllcyBncmFudGVkIGJ5IHRoZSBjb250YWluZXIgcnVudGltZS4gTm90ZSB0aGF0IHRoaXMgZmllbGQgY2Fubm90IGJlIHNldCB3aGVuIHNwZWMub3MubmFtZSBpcyB3aW5kb3dzLiIsInByb3BlcnRpZXMiOnsiYWRkIjp7ImRlc2NyaXB0aW9uIjoiQWRkZWQgY2FwYWJpbGl0aWVzIiwiaXRlbXMiOnsiZGVzY3JpcHRpb24iOiJDYXBhYmlsaXR5IHJlcHJlc2VudCBQT1NJWCBjYXBhYmlsaXRpZXMgdHlwZSIsInR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImRyb3AiOnsiZGVzY3JpcHRpb24iOiJSZW1vdmVkIGNhcGFiaWxpdGllcyIsIml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiQ2FwYWJpbGl0eSByZXByZXNlbnQgUE9TSVggY2FwYWJpbGl0aWVzIHR5cGUiLCJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9fSwidHlwZSI6Im9iamVjdCJ9LCJwcml2aWxlZ2VkIjp7ImRlc2NyaXB0aW9uIjoiUnVuIGNvbnRhaW5lciBpbiBwcml2aWxlZ2VkIG1vZGUuIFByb2Nlc3NlcyBpbiBwcml2aWxlZ2VkIGNvbnRhaW5lcnMgYXJlIGVzc2VudGlhbGx5IGVxdWl2YWxlbnQgdG8gcm9vdCBvbiB0aGUgaG9zdC4gRGVmYXVsdHMgdG8gZmFsc2UuIE5vdGUgdGhhdCB0aGlzIGZpZWxkIGNhbm5vdCBiZSBzZXQgd2hlbiBzcGVjLm9zLm5hbWUgaXMgd2luZG93cy4iLCJ0eXBlIjoiYm9vbGVhbiJ9LCJwcm9jTW91bnQiOnsiZGVzY3JpcHRpb24iOiJwcm9jTW91bnQgZGVub3RlcyB0aGUgdHlwZSBvZiBwcm9jIG1vdW50IHRvIHVzZSBmb3IgdGhlIGNvbnRhaW5lcnMuIFRoZSBkZWZhdWx0IGlzIERlZmF1bHRQcm9jTW91bnQgd2hpY2ggdXNlcyB0aGUgY29udGFpbmVyIHJ1bnRpbWUgZGVmYXVsdHMgZm9yIHJlYWRvbmx5IHBhdGhzIGFuZCBtYXNrZWQgcGF0aHMuIFRoaXMgcmVxdWlyZXMgdGhlIFByb2NNb3VudFR5cGUgZmVhdHVyZSBmbGFnIHRvIGJlIGVuYWJsZWQuIE5vdGUgdGhhdCB0aGlzIGZpZWxkIGNhbm5vdCBiZSBzZXQgd2hlbiBzcGVjLm9zLm5hbWUgaXMgd2luZG93cy4iLCJ0eXBlIjoic3RyaW5nIn0sInJlYWRPbmx5Um9vdEZpbGVzeXN0ZW0iOnsiZGVzY3JpcHRpb24iOiJXaGV0aGVyIHRoaXMgY29udGFpbmVyIGhhcyBhIHJlYWQtb25seSByb290IGZpbGVzeXN0ZW0uIERlZmF1bHQgaXMgZmFsc2UuIE5vdGUgdGhhdCB0aGlzIGZpZWxkIGNhbm5vdCBiZSBzZXQgd2hlbiBzcGVjLm9zLm5hbWUgaXMgd2luZG93cy4iLCJ0eXBlIjoiYm9vbGVhbiJ9LCJydW5Bc0dyb3VwIjp7ImRlc2NyaXB0aW9uIjoiVGhlIEdJRCB0byBydW4gdGhlIGVudHJ5cG9pbnQgb2YgdGhlIGNvbnRhaW5lciBwcm9jZXNzLiBVc2VzIHJ1bnRpbWUgZGVmYXVsdCBpZiB1bnNldC4gTWF5IGFsc28gYmUgc2V0IGluIFBvZFNlY3VyaXR5Q29udGV4dC4gIElmIHNldCBpbiBib3RoIFNlY3VyaXR5Q29udGV4dCBhbmQgUG9kU2VjdXJpdHlDb250ZXh0LCB0aGUgdmFsdWUgc3BlY2lmaWVkIGluIFNlY3VyaXR5Q29udGV4dCB0YWtlcyBwcmVjZWRlbmNlLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwiZm9ybWF0IjoiaW50NjQiLCJ0eXBlIjoiaW50ZWdlciJ9LCJydW5Bc05vblJvb3QiOnsiZGVzY3JpcHRpb24iOiJJbmRpY2F0ZXMgdGhhdCB0aGUgY29udGFpbmVyIG11c3QgcnVuIGFzIGEgbm9uLXJvb3QgdXNlci4gSWYgdHJ1ZSwgdGhlIEt1YmVsZXQgd2lsbCB2YWxpZGF0ZSB0aGUgaW1hZ2UgYXQgcnVudGltZSB0byBlbnN1cmUgdGhhdCBpdCBkb2VzIG5vdCBydW4gYXMgVUlEIDAgKHJvb3QpIGFuZCBmYWlsIHRvIHN0YXJ0IHRoZSBjb250YWluZXIgaWYgaXQgZG9lcy4gSWYgdW5zZXQgb3IgZmFsc2UsIG5vIHN1Y2ggdmFsaWRhdGlvbiB3aWxsIGJlIHBlcmZvcm1lZC4gTWF5IGFsc28gYmUgc2V0IGluIFBvZFNlY3VyaXR5Q29udGV4dC4gIElmIHNldCBpbiBib3RoIFNlY3VyaXR5Q29udGV4dCBhbmQgUG9kU2VjdXJpdHlDb250ZXh0LCB0aGUgdmFsdWUgc3BlY2lmaWVkIGluIFNlY3VyaXR5Q29udGV4dCB0YWtlcyBwcmVjZWRlbmNlLiIsInR5cGUiOiJib29sZWFuIn0sInJ1bkFzVXNlciI6eyJkZXNjcmlwdGlvbiI6IlRoZSBVSUQgdG8gcnVuIHRoZSBlbnRyeXBvaW50IG9mIHRoZSBjb250YWluZXIgcHJvY2Vzcy4gRGVmYXVsdHMgdG8gdXNlciBzcGVjaWZpZWQgaW4gaW1hZ2UgbWV0YWRhdGEgaWYgdW5zcGVjaWZpZWQuIE1heSBhbHNvIGJlIHNldCBpbiBQb2RTZWN1cml0eUNvbnRleHQuICBJZiBzZXQgaW4gYm90aCBTZWN1cml0eUNvbnRleHQgYW5kIFBvZFNlY3VyaXR5Q29udGV4dCwgdGhlIHZhbHVlIHNwZWNpZmllZCBpbiBTZWN1cml0eUNvbnRleHQgdGFrZXMgcHJlY2VkZW5jZS4gTm90ZSB0aGF0IHRoaXMgZmllbGQgY2Fubm90IGJlIHNldCB3aGVuIHNwZWMub3MubmFtZSBpcyB3aW5kb3dzLiIsImZvcm1hdCI6ImludDY0IiwidHlwZSI6ImludGVnZXIifSwic2VMaW51eE9wdGlvbnMiOnsiZGVzY3JpcHRpb24iOiJUaGUgU0VMaW51eCBjb250ZXh0IHRvIGJlIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lci4gSWYgdW5zcGVjaWZpZWQsIHRoZSBjb250YWluZXIgcnVudGltZSB3aWxsIGFsbG9jYXRlIGEgcmFuZG9tIFNFTGludXggY29udGV4dCBmb3IgZWFjaCBjb250YWluZXIuICBNYXkgYWxzbyBiZSBzZXQgaW4gUG9kU2VjdXJpdHlDb250ZXh0LiAgSWYgc2V0IGluIGJvdGggU2VjdXJpdHlDb250ZXh0IGFuZCBQb2RTZWN1cml0eUNvbnRleHQsIHRoZSB2YWx1ZSBzcGVjaWZpZWQgaW4gU2VjdXJpdHlDb250ZXh0IHRha2VzIHByZWNlZGVuY2UuIE5vdGUgdGhhdCB0aGlzIGZpZWxkIGNhbm5vdCBiZSBzZXQgd2hlbiBzcGVjLm9zLm5hbWUgaXMgd2luZG93cy4iLCJwcm9wZXJ0aWVzIjp7ImxldmVsIjp7ImRlc2NyaXB0aW9uIjoiTGV2ZWwgaXMgU0VMaW51eCBsZXZlbCBsYWJlbCB0aGF0IGFwcGxpZXMgdG8gdGhlIGNvbnRhaW5lci4iLCJ0eXBlIjoic3RyaW5nIn0sInJvbGUiOnsiZGVzY3JpcHRpb24iOiJSb2xlIGlzIGEgU0VMaW51eCByb2xlIGxhYmVsIHRoYXQgYXBwbGllcyB0byB0aGUgY29udGFpbmVyLiIsInR5cGUiOiJzdHJpbmcifSwidHlwZSI6eyJkZXNjcmlwdGlvbiI6IlR5cGUgaXMgYSBTRUxpbnV4IHR5cGUgbGFiZWwgdGhhdCBhcHBsaWVzIHRvIHRoZSBjb250YWluZXIuIiwidHlwZSI6InN0cmluZyJ9LCJ1c2VyIjp7ImRlc2NyaXB0aW9uIjoiVXNlciBpcyBhIFNFTGludXggdXNlciBsYWJlbCB0aGF0IGFwcGxpZXMgdG8gdGhlIGNvbnRhaW5lci4iLCJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In0sInNlY2NvbXBQcm9maWxlIjp7ImRlc2NyaXB0aW9uIjoiVGhlIHNlY2NvbXAgb3B0aW9ucyB0byB1c2UgYnkgdGhpcyBjb250YWluZXIuIElmIHNlY2NvbXAgb3B0aW9ucyBhcmUgcHJvdmlkZWQgYXQgYm90aCB0aGUgcG9kIFx1MDAyNiBjb250YWluZXIgbGV2ZWwsIHRoZSBjb250YWluZXIgb3B0aW9ucyBvdmVycmlkZSB0aGUgcG9kIG9wdGlvbnMuIE5vdGUgdGhhdCB0aGlzIGZpZWxkIGNhbm5vdCBiZSBzZXQgd2hlbiBzcGVjLm9zLm5hbWUgaXMgd2luZG93cy4iLCJwcm9wZXJ0aWVzIjp7ImxvY2FsaG9zdFByb2ZpbGUiOnsiZGVzY3JpcHRpb24iOiJsb2NhbGhvc3RQcm9maWxlIGluZGljYXRlcyBhIHByb2ZpbGUgZGVmaW5lZCBpbiBhIGZpbGUgb24gdGhlIG5vZGUgc2hvdWxkIGJlIHVzZWQuIFRoZSBwcm9maWxlIG11c3QgYmUgcHJlY29uZmlndXJlZCBvbiB0aGUgbm9kZSB0byB3b3JrLiBNdXN0IGJlIGEgZGVzY2VuZGluZyBwYXRoLCByZWxhdGl2ZSB0byB0aGUga3ViZWxldCdzIGNvbmZpZ3VyZWQgc2VjY29tcCBwcm9maWxlIGxvY2F0aW9uLiBNdXN0IG9ubHkgYmUgc2V0IGlmIHR5cGUgaXMgXCJMb2NhbGhvc3RcIi4iLCJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOnsiZGVzY3JpcHRpb24iOiJ0eXBlIGluZGljYXRlcyB3aGljaCBraW5kIG9mIHNlY2NvbXAgcHJvZmlsZSB3aWxsIGJlIGFwcGxpZWQuIFZhbGlkIG9wdGlvbnMgYXJlOiBcbiBMb2NhbGhvc3QgLSBhIHByb2ZpbGUgZGVmaW5lZCBpbiBhIGZpbGUgb24gdGhlIG5vZGUgc2hvdWxkIGJlIHVzZWQuIFJ1bnRpbWVEZWZhdWx0IC0gdGhlIGNvbnRhaW5lciBydW50aW1lIGRlZmF1bHQgcHJvZmlsZSBzaG91bGQgYmUgdXNlZC4gVW5jb25maW5lZCAtIG5vIHByb2ZpbGUgc2hvdWxkIGJlIGFwcGxpZWQuIiwidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsidHlwZSJdLCJ0eXBlIjoib2JqZWN0In0sIndpbmRvd3NPcHRpb25zIjp7ImRlc2NyaXB0aW9uIjoiVGhlIFdpbmRvd3Mgc3BlY2lmaWMgc2V0dGluZ3MgYXBwbGllZCB0byBhbGwgY29udGFpbmVycy4gSWYgdW5zcGVjaWZpZWQsIHRoZSBvcHRpb25zIGZyb20gdGhlIFBvZFNlY3VyaXR5Q29udGV4dCB3aWxsIGJlIHVzZWQuIElmIHNldCBpbiBib3RoIFNlY3VyaXR5Q29udGV4dCBhbmQgUG9kU2VjdXJpdHlDb250ZXh0LCB0aGUgdmFsdWUgc3BlY2lmaWVkIGluIFNlY3VyaXR5Q29udGV4dCB0YWtlcyBwcmVjZWRlbmNlLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIGxpbnV4LiIsInByb3BlcnRpZXMiOnsiZ21zYUNyZWRlbnRpYWxTcGVjIjp7ImRlc2NyaXB0aW9uIjoiR01TQUNyZWRlbnRpYWxTcGVjIGlzIHdoZXJlIHRoZSBHTVNBIGFkbWlzc2lvbiB3ZWJob29rIChodHRwczovL2dpdGh1Yi5jb20va3ViZXJuZXRlcy1zaWdzL3dpbmRvd3MtZ21zYSkgaW5saW5lcyB0aGUgY29udGVudHMgb2YgdGhlIEdNU0EgY3JlZGVudGlhbCBzcGVjIG5hbWVkIGJ5IHRoZSBHTVNBQ3JlZGVudGlhbFNwZWNOYW1lIGZpZWxkLiIsInR5cGUiOiJzdHJpbmcifSwiZ21zYUNyZWRlbnRpYWxTcGVjTmFtZSI6eyJkZXNjcmlwdGlvbiI6IkdNU0FDcmVkZW50aWFsU3BlY05hbWUgaXMgdGhlIG5hbWUgb2YgdGhlIEdNU0EgY3JlZGVudGlhbCBzcGVjIHRvIHVzZS4iLCJ0eXBlIjoic3RyaW5nIn0sImhvc3RQcm9jZXNzIjp7ImRlc2NyaXB0aW9uIjoiSG9zdFByb2Nlc3MgZGV0ZXJtaW5lcyBpZiBhIGNvbnRhaW5lciBzaG91bGQgYmUgcnVuIGFzIGEgJ0hvc3QgUHJvY2VzcycgY29udGFpbmVyLiBUaGlzIGZpZWxkIGlzIGFscGhhLWxldmVsIGFuZCB3aWxsIG9ubHkgYmUgaG9ub3JlZCBieSBjb21wb25lbnRzIHRoYXQgZW5hYmxlIHRoZSBXaW5kb3dzSG9zdFByb2Nlc3NDb250YWluZXJzIGZlYXR1cmUgZmxhZy4gU2V0dGluZyB0aGlzIGZpZWxkIHdpdGhvdXQgdGhlIGZlYXR1cmUgZmxhZyB3aWxsIHJlc3VsdCBpbiBlcnJvcnMgd2hlbiB2YWxpZGF0aW5nIHRoZSBQb2QuIEFsbCBvZiBhIFBvZCdzIGNvbnRhaW5lcnMgbXVzdCBoYXZlIHRoZSBzYW1lIGVmZmVjdGl2ZSBIb3N0UHJvY2VzcyB2YWx1ZSAoaXQgaXMgbm90IGFsbG93ZWQgdG8gaGF2ZSBhIG1peCBvZiBIb3N0UHJvY2VzcyBjb250YWluZXJzIGFuZCBub24tSG9zdFByb2Nlc3MgY29udGFpbmVycykuICBJbiBhZGRpdGlvbiwgaWYgSG9zdFByb2Nlc3MgaXMgdHJ1ZSB0aGVuIEhvc3ROZXR3b3JrIG11c3QgYWxzbyBiZSBzZXQgdG8gdHJ1ZS4iLCJ0eXBlIjoiYm9vbGVhbiJ9LCJydW5Bc1VzZXJOYW1lIjp7ImRlc2NyaXB0aW9uIjoiVGhlIFVzZXJOYW1lIGluIFdpbmRvd3MgdG8gcnVuIHRoZSBlbnRyeXBvaW50IG9mIHRoZSBjb250YWluZXIgcHJvY2Vzcy4gRGVmYXVsdHMgdG8gdGhlIHVzZXIgc3BlY2lmaWVkIGluIGltYWdlIG1ldGFkYXRhIGlmIHVuc3BlY2lmaWVkLiBNYXkgYWxzbyBiZSBzZXQgaW4gUG9kU2VjdXJpdHlDb250ZXh0LiBJZiBzZXQgaW4gYm90aCBTZWN1cml0eUNvbnRleHQgYW5kIFBvZFNlY3VyaXR5Q29udGV4dCwgdGhlIHZhbHVlIHNwZWNpZmllZCBpbiBTZWN1cml0eUNvbnRleHQgdGFrZXMgcHJlY2VkZW5jZS4iLCJ0eXBlIjoic3RyaW5nIn19LCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In0sInRvbGVyYXRpb25zIjp7Iml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiVGhlIHBvZCB0aGlzIFRvbGVyYXRpb24gaXMgYXR0YWNoZWQgdG8gdG9sZXJhdGVzIGFueSB0YWludCB0aGF0IG1hdGNoZXMgdGhlIHRyaXBsZSBcdTAwM2NrZXksdmFsdWUsZWZmZWN0XHUwMDNlIHVzaW5nIHRoZSBtYXRjaGluZyBvcGVyYXRvciBcdTAwM2NvcGVyYXRvclx1MDAzZS4iLCJwcm9wZXJ0aWVzIjp7ImVmZmVjdCI6eyJkZXNjcmlwdGlvbiI6IkVmZmVjdCBpbmRpY2F0ZXMgdGhlIHRhaW50IGVmZmVjdCB0byBtYXRjaC4gRW1wdHkgbWVhbnMgbWF0Y2ggYWxsIHRhaW50IGVmZmVjdHMuIFdoZW4gc3BlY2lmaWVkLCBhbGxvd2VkIHZhbHVlcyBhcmUgTm9TY2hlZHVsZSwgUHJlZmVyTm9TY2hlZHVsZSBhbmQgTm9FeGVjdXRlLiIsInR5cGUiOiJzdHJpbmcifSwia2V5Ijp7ImRlc2NyaXB0aW9uIjoiS2V5IGlzIHRoZSB0YWludCBrZXkgdGhhdCB0aGUgdG9sZXJhdGlvbiBhcHBsaWVzIHRvLiBFbXB0eSBtZWFucyBtYXRjaCBhbGwgdGFpbnQga2V5cy4gSWYgdGhlIGtleSBpcyBlbXB0eSwgb3BlcmF0b3IgbXVzdCBiZSBFeGlzdHM7IHRoaXMgY29tYmluYXRpb24gbWVhbnMgdG8gbWF0Y2ggYWxsIHZhbHVlcyBhbmQgYWxsIGtleXMuIiwidHlwZSI6InN0cmluZyJ9LCJvcGVyYXRvciI6eyJkZXNjcmlwdGlvbiI6Ik9wZXJhdG9yIHJlcHJlc2VudHMgYSBrZXkncyByZWxhdGlvbnNoaXAgdG8gdGhlIHZhbHVlLiBWYWxpZCBvcGVyYXRvcnMgYXJlIEV4aXN0cyBhbmQgRXF1YWwuIERlZmF1bHRzIHRvIEVxdWFsLiBFeGlzdHMgaXMgZXF1aXZhbGVudCB0byB3aWxkY2FyZCBmb3IgdmFsdWUsIHNvIHRoYXQgYSBwb2QgY2FuIHRvbGVyYXRlIGFsbCB0YWludHMgb2YgYSBwYXJ0aWN1bGFyIGNhdGVnb3J5LiIsInR5cGUiOiJzdHJpbmcifSwidG9sZXJhdGlvblNlY29uZHMiOnsiZGVzY3JpcHRpb24iOiJUb2xlcmF0aW9uU2Vjb25kcyByZXByZXNlbnRzIHRoZSBwZXJpb2Qgb2YgdGltZSB0aGUgdG9sZXJhdGlvbiAod2hpY2ggbXVzdCBiZSBvZiBlZmZlY3QgTm9FeGVjdXRlLCBvdGhlcndpc2UgdGhpcyBmaWVsZCBpcyBpZ25vcmVkKSB0b2xlcmF0ZXMgdGhlIHRhaW50LiBCeSBkZWZhdWx0LCBpdCBpcyBub3Qgc2V0LCB3aGljaCBtZWFucyB0b2xlcmF0ZSB0aGUgdGFpbnQgZm9yZXZlciAoZG8gbm90IGV2aWN0KS4gWmVybyBhbmQgbmVnYXRpdmUgdmFsdWVzIHdpbGwgYmUgdHJlYXRlZCBhcyAwIChldmljdCBpbW1lZGlhdGVseSkgYnkgdGhlIHN5c3RlbS4iLCJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sInZhbHVlIjp7ImRlc2NyaXB0aW9uIjoiVmFsdWUgaXMgdGhlIHRhaW50IHZhbHVlIHRoZSB0b2xlcmF0aW9uIG1hdGNoZXMgdG8uIElmIHRoZSBvcGVyYXRvciBpcyBFeGlzdHMsIHRoZSB2YWx1ZSBzaG91bGQgYmUgZW1wdHksIG90aGVyd2lzZSBqdXN0IGEgcmVndWxhciBzdHJpbmcuIiwidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifX0sInJlcXVpcmVkIjpbImltYWdlIiwicG9ydCJdLCJ0eXBlIjoib2JqZWN0In0sImRlbGV0ZVJvdXRlUGF0aCI6eyJ0eXBlIjoic3RyaW5nIn0sImdldEludGVyZmFjZVBhdGgiOnsidHlwZSI6InN0cmluZyJ9LCJpcGFtVHlwZSI6eyJ0eXBlIjoic3RyaW5nIn0sImpvaW5QYXRoIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImNuaVR5cGUiLCJkYWVtb24iLCJnZXRJbnRlcmZhY2VQYXRoIiwiaXBhbVR5cGUiLCJqb2luUGF0aCJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNvbmZpZ1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBDb25maWciLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImRldmljZWNsYXNzZXMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiRGV2aWNlQ2xhc3MiLCJsaXN0S2luZCI6IkRldmljZUNsYXNzTGlzdCIsInBsdXJhbCI6ImRldmljZWNsYXNzZXMiLCJzaW5ndWxhciI6ImRldmljZWNsYXNzIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiRGV2aWNlQ2xhc3MgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGRldmljZWNsYXNzZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1NwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInByb3BlcnRpZXMiOnsiaWRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsicHJvZHVjdHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInByb2R1Y3RzIiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpZHMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Imhvc3RpbnRlcmZhY2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJsaXN0S2luZCI6Ikhvc3RJbnRlcmZhY2VMaXN0IiwicGx1cmFsIjoiaG9zdGludGVyZmFjZXMiLCJzaW5ndWxhciI6Imhvc3RpbnRlcmZhY2UifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwY2lBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwicHJvZHVjdCI6eyJ0eXBlIjoic3RyaW5nIn0sInZlbmRvciI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0SVAiLCJpbnRlcmZhY2VOYW1lIiwibmV0QWRkcmVzcyIsInBjaUFkZHJlc3MiLCJwcm9kdWN0IiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJob3N0TmFtZSIsImludGVyZmFjZXMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIEhvc3RJbnRlcmZhY2UiLCJwcm9wZXJ0aWVzIjp7InN0YXQiOnsicHJvcGVydGllcyI6eyJjb3VudCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibGFzdFJ4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RSeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFRpbWVzdGFtcCI6eyJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VHhEcm9wIjp7InR5cGUiOiJpbnRlZ2VyIn0sInJ4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwicnhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn0sInR4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJjb3VudCIsImludGVyZmFjZU5hbWUiLCJsYXN0UngiLCJsYXN0UnhEcm9wIiwibGFzdFRpbWVzdGFtcCIsImxhc3RUeCIsImxhc3RUeERyb3AiLCJyeERyb3BSYXRlIiwicnhSYXRlIiwidHhEcm9wUmF0ZSIsInR4UmF0ZSJdLCJ0eXBlIjoib2JqZWN0In19LCJyZXF1aXJlZCI6WyJzdGF0Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImlwcG9vbHMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiSVBQb29sIiwibGlzdEtpbmQiOiJJUFBvb2xMaXN0IiwicGx1cmFsIjoiaXBwb29scyIsInNpbmd1bGFyIjoiaXBwb29sIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBpcHBvb2xzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIElQUG9vbCIsInByb3BlcnRpZXMiOnsiYWxsb2NhdGlvbnMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJhZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwiaW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwibmFtZXNwYWNlIjp7InR5cGUiOiJzdHJpbmcifSwicG9kIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFkZHJlc3MiLCJpbmRleCIsIm5hbWVzcGFjZSIsInBvZCJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJleGNsdWRlcyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJuZXRBdHRhY2hEZWYiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RDSURSIjp7ImRlc2NyaXB0aW9uIjoiRm9vIGlzIGFuIGV4YW1wbGUgZmllbGQgb2YgSVBQb29sLiBFZGl0IGlwcG9vbF90eXBlcy5nbyB0byByZW1vdmUvdXBkYXRlIiwidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJhbGxvY2F0aW9ucyIsImV4Y2x1ZGVzIiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwibmV0QXR0YWNoRGVmIiwicG9kQ0lEUiIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIElQUG9vbCIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9tZXRyaWNzIl0sInZlcmJzIjpbImdldCJdfV19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlIn0sInNwZWMiOnsicG9ydHMiOlt7Im5hbWUiOiJodHRwcyIsInBvcnQiOjg0NDMsInRhcmdldFBvcnQiOiJodHRwcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.0.3
  name: ""
- image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:7366b9ba3a3a910293fb26473562e7d402c1cb6fa4645c189224b15058cdb936
  name: ""
schema: olm.bundle
---
image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:0af1535a1b973c703481c67f145786d4d56397c0a8953ae15687804339936447
name: multi-nic-cni-operator.v1.0.4
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.0.4
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibGlzdEtpbmQiOiJNdWx0aU5pY05ldHdvcmtMaXN0IiwicGx1cmFsIjoibXVsdGluaWNuZXR3b3JrcyIsInNpbmd1bGFyIjoibXVsdGluaWNuZXR3b3JrIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIE11bHRpTmljTmV0d29yayBNYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbCBTdWJuZXQgaXMgZ2xvYmFsIHN1Ym5ldCwgZGVmYXVsdDogMTcyLjMwLjAuMC8xNiBJUEFNIGlzIGlwYW0gc3BlY2lmaWNhdGlvbiBNYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uIFBvbGljeSBpcyBnZW5lcmFsIHBvbGljeSBvZiB0aGUgcG9vbCIsInByb3BlcnRpZXMiOnsiYXR0YWNoUG9saWN5Ijp7ImRlc2NyaXB0aW9uIjoiQXNzaWdubWVudFBvbGljeSBkZWZpbmVzIHRoZSBwb2xpY3kgdG8gc2VsZWN0IHRoZSBOSUNzIGZyb20gdGhlIHBvb2wgU3RyYXRlZ3kgaXMgb25lIG9mIE5vbmUsIENvc3RPcHQsIFBlcmZPcHQsIFFvU0NsYXNzIFRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHMgcmVxdWlyZWQgZm9yIENvc3RPcHQgYW5kIFBlcmZPcHQiLCJwcm9wZXJ0aWVzIjp7InN0cmF0ZWd5Ijp7InR5cGUiOiJzdHJpbmcifSwidGFyZ2V0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0cmF0ZWd5Il0sInR5cGUiOiJvYmplY3QifSwiaXBhbSI6eyJ0eXBlIjoic3RyaW5nIn0sIm1hc3Rlck5ldHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwibXVsdGlOSUNJUEFNIjp7InR5cGUiOiJib29sZWFuIn0sIm5hbWVzcGFjZXMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwicGx1Z2luIjp7ImRlc2NyaXB0aW9uIjoicmVmZXJlbmNlOiBnaXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvY25pL3BrZy90eXBlcyIsInByb3BlcnRpZXMiOnsiYXJncyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJvYmplY3QifSwiY2FwYWJpbGl0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJib29sZWFuIn0sInR5cGUiOiJvYmplY3QifSwiY25pVmVyc2lvbiI6eyJ0eXBlIjoic3RyaW5nIn0sImRucyI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImRvbWFpbiI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWVzZXJ2ZXJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm9wdGlvbnMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwic2VhcmNoIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY25pVmVyc2lvbiIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaXBhbSIsInBsdWdpbiJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29ya1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBNdWx0aU5pY05ldHdvcmsiLCJwcm9wZXJ0aWVzIjp7ImNvbXB1dGVSZXN1bHRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sIm51bU9mSG9zdHMiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbIm5ldEFkZHJlc3MiLCJudW1PZkhvc3RzIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZ1N0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn0sImRpc2NvdmVyeSI6eyJwcm9wZXJ0aWVzIjp7ImNpZHJQcm9jZXNzZWQiOnsidHlwZSI6ImludGVnZXIifSwiZXhpc3REYWVtb24iOnsidHlwZSI6ImludGVnZXIifSwiaW5mb0F2YWlsYWJsZSI6eyJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsiY2lkclByb2Nlc3NlZCIsImV4aXN0RGFlbW9uIiwiaW5mb0F2YWlsYWJsZSJdLCJ0eXBlIjoib2JqZWN0In0sImxhc3RTeW5jVGltZSI6eyJmb3JtYXQiOiJkYXRlLXRpbWUiLCJ0eXBlIjoic3RyaW5nIn0sIm1lc3NhZ2UiOnsidHlwZSI6InN0cmluZyJ9LCJyb3V0ZVN0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJjb21wdXRlUmVzdWx0cyIsImNvbmZpZ1N0YXR1cyIsImRpc2NvdmVyeSIsImxhc3RTeW5jVGltZSIsIm1lc3NhZ2UiLCJyb3V0ZVN0YXR1cyJdLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNpZHJzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkNJRFIiLCJsaXN0S2luZCI6IkNJRFJMaXN0IiwicGx1cmFsIjoiY2lkcnMiLCJzaW5ndWxhciI6ImNpZHIifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQ0lEUiIsInByb3BlcnRpZXMiOnsiY2lkciI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Imhvc3RzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaG9zdEluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImlwcG9vbCI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdElQIiwiaG9zdEluZGV4IiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwicG9kQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbnRlcmZhY2VJbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuZXRBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbkNJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdHMiLCJpbnRlcmZhY2VJbmRleCIsIm5ldEFkZHJlc3MiLCJ2bGFuQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWciOnsiZGVzY3JpcHRpb24iOiJJTlNFUlQgQURESVRJT05BTCBTUEVDIEZJRUxEUyAtIGRlc2lyZWQgc3RhdGUgb2YgY2x1c3RlciBJbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNvbmZpZ3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiQ29uZmlnIiwibGlzdEtpbmQiOiJDb25maWdMaXN0IiwicGx1cmFsIjoiY29uZmlncyIsInNpbmd1bGFyIjoiY29uZmlnIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiQ29uZmlnIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjb25maWdzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiQ29uZmlnU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIENvbmZpZyIsInByb3BlcnRpZXMiOnsiYWRkUm91dGVQYXRoIjp7InR5cGUiOiJzdHJpbmcifSwiY25pVHlwZSI6eyJkZXNjcmlwdGlvbiI6IklOU0VSVCBBRERJVElPTkFMIFNQRUMgRklFTERTIC0gZGVzaXJlZCBzdGF0ZSBvZiBjbHVzdGVyIEltcG9ydGFudDogUnVuIFwibWFrZVwiIHRvIHJlZ2VuZXJhdGUgY29kZSBhZnRlciBtb2RpZnlpbmcgdGhpcyBmaWxlIiwidHlwZSI6InN0cmluZyJ9LCJjb250ZXh0VGltZW91dE1pbnV0ZXMiOnsidHlwZSI6ImludGVnZXIifSwiZGFlbW9uIjp7InByb3BlcnRpZXMiOnsiZW52Ijp7Iml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiRW52VmFyIHJlcHJlc2VudHMgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUgcHJlc2VudCBpbiBhIENvbnRhaW5lci4iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG9mIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZS4gTXVzdCBiZSBhIENfSURFTlRJRklFUi4iLCJ0eXBlIjoic3RyaW5nIn0sInZhbHVlIjp7ImRlc2NyaXB0aW9uIjoiVmFyaWFibGUgcmVmZXJlbmNlcyAkKFZBUl9OQU1FKSBhcmUgZXhwYW5kZWQgdXNpbmcgdGhlIHByZXZpb3VzbHkgZGVmaW5lZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgaW4gdGhlIGNvbnRhaW5lciBhbmQgYW55IHNlcnZpY2UgZW52aXJvbm1lbnQgdmFyaWFibGVzLiBJZiBhIHZhcmlhYmxlIGNhbm5vdCBiZSByZXNvbHZlZCwgdGhlIHJlZmVyZW5jZSBpbiB0aGUgaW5wdXQgc3RyaW5nIHdpbGwgYmUgdW5jaGFuZ2VkLiBEb3VibGUgJCQgYXJlIHJlZHVjZWQgdG8gYSBzaW5nbGUgJCwgd2hpY2ggYWxsb3dzIGZvciBlc2NhcGluZyB0aGUgJChWQVJfTkFNRSkgc3ludGF4OiBpLmUuIFwiJCQoVkFSX05BTUUpXCIgd2lsbCBwcm9kdWNlIHRoZSBzdHJpbmcgbGl0ZXJhbCBcIiQoVkFSX05BTUUpXCIuIEVzY2FwZWQgcmVmZXJlbmNlcyB3aWxsIG5ldmVyIGJlIGV4cGFuZGVkLCByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIHZhcmlhYmxlIGV4aXN0cyBvciBub3QuIERlZmF1bHRzIHRvIFwiXCIuIiwidHlwZSI6InN0cmluZyJ9LCJ2YWx1ZUZyb20iOnsiZGVzY3JpcHRpb24iOiJTb3VyY2UgZm9yIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSdzIHZhbHVlLiBDYW5ub3QgYmUgdXNlZCBpZiB2YWx1ZSBpcyBub3QgZW1wdHkuIiwicHJvcGVydGllcyI6eyJjb25maWdNYXBLZXlSZWYiOnsiZGVzY3JpcHRpb24iOiJTZWxlY3RzIGEga2V5IG9mIGEgQ29uZmlnTWFwLiIsInByb3BlcnRpZXMiOnsia2V5Ijp7ImRlc2NyaXB0aW9uIjoiVGhlIGtleSB0byBzZWxlY3QuIiwidHlwZSI6InN0cmluZyJ9LCJuYW1lIjp7ImRlc2NyaXB0aW9uIjoiTmFtZSBvZiB0aGUgcmVmZXJlbnQuIE1vcmUgaW5mbzogaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvd29ya2luZy13aXRoLW9iamVjdHMvbmFtZXMvI25hbWVzIFRPRE86IEFkZCBvdGhlciB1c2VmdWwgZmllbGRzLiBhcGlWZXJzaW9uLCBraW5kLCB1aWQ/IiwidHlwZSI6InN0cmluZyJ9LCJvcHRpb25hbCI6eyJkZXNjcmlwdGlvbiI6IlNwZWNpZnkgd2hldGhlciB0aGUgQ29uZmlnTWFwIG9yIGl0cyBrZXkgbXVzdCBiZSBkZWZpbmVkIiwidHlwZSI6ImJvb2xlYW4ifX0sInJlcXVpcmVkIjpbImtleSJdLCJ0eXBlIjoib2JqZWN0In0sImZpZWxkUmVmIjp7ImRlc2NyaXB0aW9uIjoiU2VsZWN0cyBhIGZpZWxkIG9mIHRoZSBwb2Q6IHN1cHBvcnRzIG1ldGFkYXRhLm5hbWUsIG1ldGFkYXRhLm5hbWVzcGFjZSwgYG1ldGFkYXRhLmxhYmVsc1snXHUwMDNjS0VZXHUwMDNlJ11gLCBgbWV0YWRhdGEuYW5ub3RhdGlvbnNbJ1x1MDAzY0tFWVx1MDAzZSddYCwgc3BlYy5ub2RlTmFtZSwgc3BlYy5zZXJ2aWNlQWNjb3VudE5hbWUsIHN0YXR1cy5ob3N0SVAsIHN0YXR1cy5wb2RJUCwgc3RhdHVzLnBvZElQcy4iLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJWZXJzaW9uIG9mIHRoZSBzY2hlbWEgdGhlIEZpZWxkUGF0aCBpcyB3cml0dGVuIGluIHRlcm1zIG9mLCBkZWZhdWx0cyB0byBcInYxXCIuIiwidHlwZSI6InN0cmluZyJ9LCJmaWVsZFBhdGgiOnsiZGVzY3JpcHRpb24iOiJQYXRoIG9mIHRoZSBmaWVsZCB0byBzZWxlY3QgaW4gdGhlIHNwZWNpZmllZCBBUEkgdmVyc2lvbi4iLCJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJmaWVsZFBhdGgiXSwidHlwZSI6Im9iamVjdCJ9LCJyZXNvdXJjZUZpZWxkUmVmIjp7ImRlc2NyaXB0aW9uIjoiU2VsZWN0cyBhIHJlc291cmNlIG9mIHRoZSBjb250YWluZXI6IG9ubHkgcmVzb3VyY2VzIGxpbWl0cyBhbmQgcmVxdWVzdHMgKGxpbWl0cy5jcHUsIGxpbWl0cy5tZW1vcnksIGxpbWl0cy5lcGhlbWVyYWwtc3RvcmFnZSwgcmVxdWVzdHMuY3B1LCByZXF1ZXN0cy5tZW1vcnkgYW5kIHJlcXVlc3RzLmVwaGVtZXJhbC1zdG9yYWdlKSBhcmUgY3VycmVudGx5IHN1cHBvcnRlZC4iLCJwcm9wZXJ0aWVzIjp7ImNvbnRhaW5lck5hbWUiOnsiZGVzY3JpcHRpb24iOiJDb250YWluZXIgbmFtZTogcmVxdWlyZWQgZm9yIHZvbHVtZXMsIG9wdGlvbmFsIGZvciBlbnYgdmFycyIsInR5cGUiOiJzdHJpbmcifSwiZGl2aXNvciI6eyJhbnlPZiI6W3sidHlwZSI6ImludGVnZXIifSx7InR5cGUiOiJzdHJpbmcifV0sImRlc2NyaXB0aW9uIjoiU3BlY2lmaWVzIHRoZSBvdXRwdXQgZm9ybWF0IG9mIHRoZSBleHBvc2VkIHJlc291cmNlcywgZGVmYXVsdHMgdG8gXCIxXCIiLCJwYXR0ZXJuIjoiXihcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSgoW0tNR1RQRV1pKXxbbnVta01HVFBFXXwoW2VFXShcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSkpPyQiLCJ4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZyI6dHJ1ZX0sInJlc291cmNlIjp7ImRlc2NyaXB0aW9uIjoiUmVxdWlyZWQ6IHJlc291cmNlIHRvIHNlbGVjdCIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInJlc291cmNlIl0sInR5cGUiOiJvYmplY3QifSwic2VjcmV0S2V5UmVmIjp7ImRlc2NyaXB0aW9uIjoiU2VsZWN0cyBhIGtleSBvZiBhIHNlY3JldCBpbiB0aGUgcG9kJ3MgbmFtZXNwYWNlIiwicHJvcGVydGllcyI6eyJrZXkiOnsiZGVzY3JpcHRpb24iOiJUaGUga2V5IG9mIHRoZSBzZWNyZXQgdG8gc2VsZWN0IGZyb20uICBNdXN0IGJlIGEgdmFsaWQgc2VjcmV0IGtleS4iLCJ0eXBlIjoic3RyaW5nIn0sIm5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG9mIHRoZSByZWZlcmVudC4gTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9vdmVydmlldy93b3JraW5nLXdpdGgtb2JqZWN0cy9uYW1lcy8jbmFtZXMgVE9ETzogQWRkIG90aGVyIHVzZWZ1bCBmaWVsZHMuIGFwaVZlcnNpb24sIGtpbmQsIHVpZD8iLCJ0eXBlIjoic3RyaW5nIn0sIm9wdGlvbmFsIjp7ImRlc2NyaXB0aW9uIjoiU3BlY2lmeSB3aGV0aGVyIHRoZSBTZWNyZXQgb3IgaXRzIGtleSBtdXN0IGJlIGRlZmluZWQiLCJ0eXBlIjoiYm9vbGVhbiJ9fSwicmVxdWlyZWQiOlsia2V5Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInJlcXVpcmVkIjpbIm5hbWUiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifSwiZW52RnJvbSI6eyJpdGVtcyI6eyJkZXNjcmlwdGlvbiI6IkVudkZyb21Tb3VyY2UgcmVwcmVzZW50cyB0aGUgc291cmNlIG9mIGEgc2V0IG9mIENvbmZpZ01hcHMiLCJwcm9wZXJ0aWVzIjp7ImNvbmZpZ01hcFJlZiI6eyJkZXNjcmlwdGlvbiI6IlRoZSBDb25maWdNYXAgdG8gc2VsZWN0IGZyb20iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG9mIHRoZSByZWZlcmVudC4gTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9vdmVydmlldy93b3JraW5nLXdpdGgtb2JqZWN0cy9uYW1lcy8jbmFtZXMgVE9ETzogQWRkIG90aGVyIHVzZWZ1bCBmaWVsZHMuIGFwaVZlcnNpb24sIGtpbmQsIHVpZD8iLCJ0eXBlIjoic3RyaW5nIn0sIm9wdGlvbmFsIjp7ImRlc2NyaXB0aW9uIjoiU3BlY2lmeSB3aGV0aGVyIHRoZSBDb25maWdNYXAgbXVzdCBiZSBkZWZpbmVkIiwidHlwZSI6ImJvb2xlYW4ifX0sInR5cGUiOiJvYmplY3QifSwicHJlZml4Ijp7ImRlc2NyaXB0aW9uIjoiQW4gb3B0aW9uYWwgaWRlbnRpZmllciB0byBwcmVwZW5kIHRvIGVhY2gga2V5IGluIHRoZSBDb25maWdNYXAuIE11c3QgYmUgYSBDX0lERU5USUZJRVIuIiwidHlwZSI6InN0cmluZyJ9LCJzZWNyZXRSZWYiOnsiZGVzY3JpcHRpb24iOiJUaGUgU2VjcmV0IHRvIHNlbGVjdCBmcm9tIiwicHJvcGVydGllcyI6eyJuYW1lIjp7ImRlc2NyaXB0aW9uIjoiTmFtZSBvZiB0aGUgcmVmZXJlbnQuIE1vcmUgaW5mbzogaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvd29ya2luZy13aXRoLW9iamVjdHMvbmFtZXMvI25hbWVzIFRPRE86IEFkZCBvdGhlciB1c2VmdWwgZmllbGRzLiBhcGlWZXJzaW9uLCBraW5kLCB1aWQ/IiwidHlwZSI6InN0cmluZyJ9LCJvcHRpb25hbCI6eyJkZXNjcmlwdGlvbiI6IlNwZWNpZnkgd2hldGhlciB0aGUgU2VjcmV0IG11c3QgYmUgZGVmaW5lZCIsInR5cGUiOiJib29sZWFuIn19LCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbWFnZSI6eyJ0eXBlIjoic3RyaW5nIn0sImltYWdlUHVsbFBvbGljeSI6eyJ0eXBlIjoic3RyaW5nIn0sImltYWdlUHVsbFNlY3JldE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJtb3VudHMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJob3N0cGF0aCI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RwYXRoIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImhvc3RwYXRoIiwibmFtZSIsInBvZHBhdGgiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifSwibm9kZVNlbGVjdG9yIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6Im9iamVjdCJ9LCJwb3J0Ijp7InR5cGUiOiJpbnRlZ2VyIn0sInJlc291cmNlcyI6eyJkZXNjcmlwdGlvbiI6IlJlc291cmNlUmVxdWlyZW1lbnRzIGRlc2NyaWJlcyB0aGUgY29tcHV0ZSByZXNvdXJjZSByZXF1aXJlbWVudHMuIiwicHJvcGVydGllcyI6eyJsaW1pdHMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsiYW55T2YiOlt7InR5cGUiOiJpbnRlZ2VyIn0seyJ0eXBlIjoic3RyaW5nIn1dLCJwYXR0ZXJuIjoiXihcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSgoW0tNR1RQRV1pKXxbbnVta01HVFBFXXwoW2VFXShcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSkpPyQiLCJ4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZyI6dHJ1ZX0sImRlc2NyaXB0aW9uIjoiTGltaXRzIGRlc2NyaWJlcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgY29tcHV0ZSByZXNvdXJjZXMgYWxsb3dlZC4gTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9jb25maWd1cmF0aW9uL21hbmFnZS1yZXNvdXJjZXMtY29udGFpbmVycy8iLCJ0eXBlIjoib2JqZWN0In0sInJlcXVlc3RzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7ImFueU9mIjpbeyJ0eXBlIjoiaW50ZWdlciJ9LHsidHlwZSI6InN0cmluZyJ9XSwicGF0dGVybiI6Il4oXFwrfC0pPygoWzAtOV0rKFxcLlswLTldKik/KXwoXFwuWzAtOV0rKSkoKFtLTUdUUEVdaSl8W251bWtNR1RQRV18KFtlRV0oXFwrfC0pPygoWzAtOV0rKFxcLlswLTldKik/KXwoXFwuWzAtOV0rKSkpKT8kIiwieC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmciOnRydWV9LCJkZXNjcmlwdGlvbiI6IlJlcXVlc3RzIGRlc2NyaWJlcyB0aGUgbWluaW11bSBhbW91bnQgb2YgY29tcHV0ZSByZXNvdXJjZXMgcmVxdWlyZWQuIElmIFJlcXVlc3RzIGlzIG9taXR0ZWQgZm9yIGEgY29udGFpbmVyLCBpdCBkZWZhdWx0cyB0byBMaW1pdHMgaWYgdGhhdCBpcyBleHBsaWNpdGx5IHNwZWNpZmllZCwgb3RoZXJ3aXNlIHRvIGFuIGltcGxlbWVudGF0aW9uLWRlZmluZWQgdmFsdWUuIE1vcmUgaW5mbzogaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvY29uZmlndXJhdGlvbi9tYW5hZ2UtcmVzb3VyY2VzLWNvbnRhaW5lcnMvIiwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9LCJzZWN1cml0eUNvbnRleHQiOnsiZGVzY3JpcHRpb24iOiJTZWN1cml0eUNvbnRleHQgaG9sZHMgc2VjdXJpdHkgY29uZmlndXJhdGlvbiB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byBhIGNvbnRhaW5lci4gU29tZSBmaWVsZHMgYXJlIHByZXNlbnQgaW4gYm90aCBTZWN1cml0eUNvbnRleHQgYW5kIFBvZFNlY3VyaXR5Q29udGV4dC4gIFdoZW4gYm90aCBhcmUgc2V0LCB0aGUgdmFsdWVzIGluIFNlY3VyaXR5Q29udGV4dCB0YWtlIHByZWNlZGVuY2UuIiwicHJvcGVydGllcyI6eyJhbGxvd1ByaXZpbGVnZUVzY2FsYXRpb24iOnsiZGVzY3JpcHRpb24iOiJBbGxvd1ByaXZpbGVnZUVzY2FsYXRpb24gY29udHJvbHMgd2hldGhlciBhIHByb2Nlc3MgY2FuIGdhaW4gbW9yZSBwcml2aWxlZ2VzIHRoYW4gaXRzIHBhcmVudCBwcm9jZXNzLiBUaGlzIGJvb2wgZGlyZWN0bHkgY29udHJvbHMgaWYgdGhlIG5vX25ld19wcml2cyBmbGFnIHdpbGwgYmUgc2V0IG9uIHRoZSBjb250YWluZXIgcHJvY2Vzcy4gQWxsb3dQcml2aWxlZ2VFc2NhbGF0aW9uIGlzIHRydWUgYWx3YXlzIHdoZW4gdGhlIGNvbnRhaW5lciBpczogMSkgcnVuIGFzIFByaXZpbGVnZWQgMikgaGFzIENBUF9TWVNfQURNSU4gTm90ZSB0aGF0IHRoaXMgZmllbGQgY2Fubm90IGJlIHNldCB3aGVuIHNwZWMub3MubmFtZSBpcyB3aW5kb3dzLiIsInR5cGUiOiJib29sZWFuIn0sImNhcGFiaWxpdGllcyI6eyJkZXNjcmlwdGlvbiI6IlRoZSBjYXBhYmlsaXRpZXMgdG8gYWRkL2Ryb3Agd2hlbiBydW5uaW5nIGNvbnRhaW5lcnMuIERlZmF1bHRzIHRvIHRoZSBkZWZhdWx0IHNldCBvZiBjYXBhYmlsaXRpZXMgZ3JhbnRlZCBieSB0aGUgY29udGFpbmVyIHJ1bnRpbWUuIE5vdGUgdGhhdCB0aGlzIGZpZWxkIGNhbm5vdCBiZSBzZXQgd2hlbiBzcGVjLm9zLm5hbWUgaXMgd2luZG93cy4iLCJwcm9wZXJ0aWVzIjp7ImFkZCI6eyJkZXNjcmlwdGlvbiI6IkFkZGVkIGNhcGFiaWxpdGllcyIsIml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiQ2FwYWJpbGl0eSByZXByZXNlbnQgUE9TSVggY2FwYWJpbGl0aWVzIHR5cGUiLCJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJkcm9wIjp7ImRlc2NyaXB0aW9uIjoiUmVtb3ZlZCBjYXBhYmlsaXRpZXMiLCJpdGVtcyI6eyJkZXNjcmlwdGlvbiI6IkNhcGFiaWxpdHkgcmVwcmVzZW50IFBPU0lYIGNhcGFiaWxpdGllcyB0eXBlIiwidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifX0sInR5cGUiOiJvYmplY3QifSwicHJpdmlsZWdlZCI6eyJkZXNjcmlwdGlvbiI6IlJ1biBjb250YWluZXIgaW4gcHJpdmlsZWdlZCBtb2RlLiBQcm9jZXNzZXMgaW4gcHJpdmlsZWdlZCBjb250YWluZXJzIGFyZSBlc3NlbnRpYWxseSBlcXVpdmFsZW50IHRvIHJvb3Qgb24gdGhlIGhvc3QuIERlZmF1bHRzIHRvIGZhbHNlLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwidHlwZSI6ImJvb2xlYW4ifSwicHJvY01vdW50Ijp7ImRlc2NyaXB0aW9uIjoicHJvY01vdW50IGRlbm90ZXMgdGhlIHR5cGUgb2YgcHJvYyBtb3VudCB0byB1c2UgZm9yIHRoZSBjb250YWluZXJzLiBUaGUgZGVmYXVsdCBpcyBEZWZhdWx0UHJvY01vdW50IHdoaWNoIHVzZXMgdGhlIGNvbnRhaW5lciBydW50aW1lIGRlZmF1bHRzIGZvciByZWFkb25seSBwYXRocyBhbmQgbWFza2VkIHBhdGhzLiBUaGlzIHJlcXVpcmVzIHRoZSBQcm9jTW91bnRUeXBlIGZlYXR1cmUgZmxhZyB0byBiZSBlbmFibGVkLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwidHlwZSI6InN0cmluZyJ9LCJyZWFkT25seVJvb3RGaWxlc3lzdGVtIjp7ImRlc2NyaXB0aW9uIjoiV2hldGhlciB0aGlzIGNvbnRhaW5lciBoYXMgYSByZWFkLW9ubHkgcm9vdCBmaWxlc3lzdGVtLiBEZWZhdWx0IGlzIGZhbHNlLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwidHlwZSI6ImJvb2xlYW4ifSwicnVuQXNHcm91cCI6eyJkZXNjcmlwdGlvbiI6IlRoZSBHSUQgdG8gcnVuIHRoZSBlbnRyeXBvaW50IG9mIHRoZSBjb250YWluZXIgcHJvY2Vzcy4gVXNlcyBydW50aW1lIGRlZmF1bHQgaWYgdW5zZXQuIE1heSBhbHNvIGJlIHNldCBpbiBQb2RTZWN1cml0eUNvbnRleHQuICBJZiBzZXQgaW4gYm90aCBTZWN1cml0eUNvbnRleHQgYW5kIFBvZFNlY3VyaXR5Q29udGV4dCwgdGhlIHZhbHVlIHNwZWNpZmllZCBpbiBTZWN1cml0eUNvbnRleHQgdGFrZXMgcHJlY2VkZW5jZS4gTm90ZSB0aGF0IHRoaXMgZmllbGQgY2Fubm90IGJlIHNldCB3aGVuIHNwZWMub3MubmFtZSBpcyB3aW5kb3dzLiIsImZvcm1hdCI6ImludDY0IiwidHlwZSI6ImludGVnZXIifSwicnVuQXNOb25Sb290Ijp7ImRlc2NyaXB0aW9uIjoiSW5kaWNhdGVzIHRoYXQgdGhlIGNvbnRhaW5lciBtdXN0IHJ1biBhcyBhIG5vbi1yb290IHVzZXIuIElmIHRydWUsIHRoZSBLdWJlbGV0IHdpbGwgdmFsaWRhdGUgdGhlIGltYWdlIGF0IHJ1bnRpbWUgdG8gZW5zdXJlIHRoYXQgaXQgZG9lcyBub3QgcnVuIGFzIFVJRCAwIChyb290KSBhbmQgZmFpbCB0byBzdGFydCB0aGUgY29udGFpbmVyIGlmIGl0IGRvZXMuIElmIHVuc2V0IG9yIGZhbHNlLCBubyBzdWNoIHZhbGlkYXRpb24gd2lsbCBiZSBwZXJmb3JtZWQuIE1heSBhbHNvIGJlIHNldCBpbiBQb2RTZWN1cml0eUNvbnRleHQuICBJZiBzZXQgaW4gYm90aCBTZWN1cml0eUNvbnRleHQgYW5kIFBvZFNlY3VyaXR5Q29udGV4dCwgdGhlIHZhbHVlIHNwZWNpZmllZCBpbiBTZWN1cml0eUNvbnRleHQgdGFrZXMgcHJlY2VkZW5jZS4iLCJ0eXBlIjoiYm9vbGVhbiJ9LCJydW5Bc1VzZXIiOnsiZGVzY3JpcHRpb24iOiJUaGUgVUlEIHRvIHJ1biB0aGUgZW50cnlwb2ludCBvZiB0aGUgY29udGFpbmVyIHByb2Nlc3MuIERlZmF1bHRzIHRvIHVzZXIgc3BlY2lmaWVkIGluIGltYWdlIG1ldGFkYXRhIGlmIHVuc3BlY2lmaWVkLiBNYXkgYWxzbyBiZSBzZXQgaW4gUG9kU2VjdXJpdHlDb250ZXh0LiAgSWYgc2V0IGluIGJvdGggU2VjdXJpdHlDb250ZXh0IGFuZCBQb2RTZWN1cml0eUNvbnRleHQsIHRoZSB2YWx1ZSBzcGVjaWZpZWQgaW4gU2VjdXJpdHlDb250ZXh0IHRha2VzIHByZWNlZGVuY2UuIE5vdGUgdGhhdCB0aGlzIGZpZWxkIGNhbm5vdCBiZSBzZXQgd2hlbiBzcGVjLm9zLm5hbWUgaXMgd2luZG93cy4iLCJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sInNlTGludXhPcHRpb25zIjp7ImRlc2NyaXB0aW9uIjoiVGhlIFNFTGludXggY29udGV4dCB0byBiZSBhcHBsaWVkIHRvIHRoZSBjb250YWluZXIuIElmIHVuc3BlY2lmaWVkLCB0aGUgY29udGFpbmVyIHJ1bnRpbWUgd2lsbCBhbGxvY2F0ZSBhIHJhbmRvbSBTRUxpbnV4IGNvbnRleHQgZm9yIGVhY2ggY29udGFpbmVyLiAgTWF5IGFsc28gYmUgc2V0IGluIFBvZFNlY3VyaXR5Q29udGV4dC4gIElmIHNldCBpbiBib3RoIFNlY3VyaXR5Q29udGV4dCBhbmQgUG9kU2VjdXJpdHlDb250ZXh0LCB0aGUgdmFsdWUgc3BlY2lmaWVkIGluIFNlY3VyaXR5Q29udGV4dCB0YWtlcyBwcmVjZWRlbmNlLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwicHJvcGVydGllcyI6eyJsZXZlbCI6eyJkZXNjcmlwdGlvbiI6IkxldmVsIGlzIFNFTGludXggbGV2ZWwgbGFiZWwgdGhhdCBhcHBsaWVzIHRvIHRoZSBjb250YWluZXIuIiwidHlwZSI6InN0cmluZyJ9LCJyb2xlIjp7ImRlc2NyaXB0aW9uIjoiUm9sZSBpcyBhIFNFTGludXggcm9sZSBsYWJlbCB0aGF0IGFwcGxpZXMgdG8gdGhlIGNvbnRhaW5lci4iLCJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOnsiZGVzY3JpcHRpb24iOiJUeXBlIGlzIGEgU0VMaW51eCB0eXBlIGxhYmVsIHRoYXQgYXBwbGllcyB0byB0aGUgY29udGFpbmVyLiIsInR5cGUiOiJzdHJpbmcifSwidXNlciI6eyJkZXNjcmlwdGlvbiI6IlVzZXIgaXMgYSBTRUxpbnV4IHVzZXIgbGFiZWwgdGhhdCBhcHBsaWVzIHRvIHRoZSBjb250YWluZXIuIiwidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9LCJzZWNjb21wUHJvZmlsZSI6eyJkZXNjcmlwdGlvbiI6IlRoZSBzZWNjb21wIG9wdGlvbnMgdG8gdXNlIGJ5IHRoaXMgY29udGFpbmVyLiBJZiBzZWNjb21wIG9wdGlvbnMgYXJlIHByb3ZpZGVkIGF0IGJvdGggdGhlIHBvZCBcdTAwMjYgY29udGFpbmVyIGxldmVsLCB0aGUgY29udGFpbmVyIG9wdGlvbnMgb3ZlcnJpZGUgdGhlIHBvZCBvcHRpb25zLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwicHJvcGVydGllcyI6eyJsb2NhbGhvc3RQcm9maWxlIjp7ImRlc2NyaXB0aW9uIjoibG9jYWxob3N0UHJvZmlsZSBpbmRpY2F0ZXMgYSBwcm9maWxlIGRlZmluZWQgaW4gYSBmaWxlIG9uIHRoZSBub2RlIHNob3VsZCBiZSB1c2VkLiBUaGUgcHJvZmlsZSBtdXN0IGJlIHByZWNvbmZpZ3VyZWQgb24gdGhlIG5vZGUgdG8gd29yay4gTXVzdCBiZSBhIGRlc2NlbmRpbmcgcGF0aCwgcmVsYXRpdmUgdG8gdGhlIGt1YmVsZXQncyBjb25maWd1cmVkIHNlY2NvbXAgcHJvZmlsZSBsb2NhdGlvbi4gTXVzdCBvbmx5IGJlIHNldCBpZiB0eXBlIGlzIFwiTG9jYWxob3N0XCIuIiwidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7ImRlc2NyaXB0aW9uIjoidHlwZSBpbmRpY2F0ZXMgd2hpY2gga2luZCBvZiBzZWNjb21wIHByb2ZpbGUgd2lsbCBiZSBhcHBsaWVkLiBWYWxpZCBvcHRpb25zIGFyZTogXG4gTG9jYWxob3N0IC0gYSBwcm9maWxlIGRlZmluZWQgaW4gYSBmaWxlIG9uIHRoZSBub2RlIHNob3VsZCBiZSB1c2VkLiBSdW50aW1lRGVmYXVsdCAtIHRoZSBjb250YWluZXIgcnVudGltZSBkZWZhdWx0IHByb2ZpbGUgc2hvdWxkIGJlIHVzZWQuIFVuY29uZmluZWQgLSBubyBwcm9maWxlIHNob3VsZCBiZSBhcHBsaWVkLiIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJ3aW5kb3dzT3B0aW9ucyI6eyJkZXNjcmlwdGlvbiI6IlRoZSBXaW5kb3dzIHNwZWNpZmljIHNldHRpbmdzIGFwcGxpZWQgdG8gYWxsIGNvbnRhaW5lcnMuIElmIHVuc3BlY2lmaWVkLCB0aGUgb3B0aW9ucyBmcm9tIHRoZSBQb2RTZWN1cml0eUNvbnRleHQgd2lsbCBiZSB1c2VkLiBJZiBzZXQgaW4gYm90aCBTZWN1cml0eUNvbnRleHQgYW5kIFBvZFNlY3VyaXR5Q29udGV4dCwgdGhlIHZhbHVlIHNwZWNpZmllZCBpbiBTZWN1cml0eUNvbnRleHQgdGFrZXMgcHJlY2VkZW5jZS4gTm90ZSB0aGF0IHRoaXMgZmllbGQgY2Fubm90IGJlIHNldCB3aGVuIHNwZWMub3MubmFtZSBpcyBsaW51eC4iLCJwcm9wZXJ0aWVzIjp7Imdtc2FDcmVkZW50aWFsU3BlYyI6eyJkZXNjcmlwdGlvbiI6IkdNU0FDcmVkZW50aWFsU3BlYyBpcyB3aGVyZSB0aGUgR01TQSBhZG1pc3Npb24gd2ViaG9vayAoaHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMtc2lncy93aW5kb3dzLWdtc2EpIGlubGluZXMgdGhlIGNvbnRlbnRzIG9mIHRoZSBHTVNBIGNyZWRlbnRpYWwgc3BlYyBuYW1lZCBieSB0aGUgR01TQUNyZWRlbnRpYWxTcGVjTmFtZSBmaWVsZC4iLCJ0eXBlIjoic3RyaW5nIn0sImdtc2FDcmVkZW50aWFsU3BlY05hbWUiOnsiZGVzY3JpcHRpb24iOiJHTVNBQ3JlZGVudGlhbFNwZWNOYW1lIGlzIHRoZSBuYW1lIG9mIHRoZSBHTVNBIGNyZWRlbnRpYWwgc3BlYyB0byB1c2UuIiwidHlwZSI6InN0cmluZyJ9LCJob3N0UHJvY2VzcyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RQcm9jZXNzIGRldGVybWluZXMgaWYgYSBjb250YWluZXIgc2hvdWxkIGJlIHJ1biBhcyBhICdIb3N0IFByb2Nlc3MnIGNvbnRhaW5lci4gVGhpcyBmaWVsZCBpcyBhbHBoYS1sZXZlbCBhbmQgd2lsbCBvbmx5IGJlIGhvbm9yZWQgYnkgY29tcG9uZW50cyB0aGF0IGVuYWJsZSB0aGUgV2luZG93c0hvc3RQcm9jZXNzQ29udGFpbmVycyBmZWF0dXJlIGZsYWcuIFNldHRpbmcgdGhpcyBmaWVsZCB3aXRob3V0IHRoZSBmZWF0dXJlIGZsYWcgd2lsbCByZXN1bHQgaW4gZXJyb3JzIHdoZW4gdmFsaWRhdGluZyB0aGUgUG9kLiBBbGwgb2YgYSBQb2QncyBjb250YWluZXJzIG11c3QgaGF2ZSB0aGUgc2FtZSBlZmZlY3RpdmUgSG9zdFByb2Nlc3MgdmFsdWUgKGl0IGlzIG5vdCBhbGxvd2VkIHRvIGhhdmUgYSBtaXggb2YgSG9zdFByb2Nlc3MgY29udGFpbmVycyBhbmQgbm9uLUhvc3RQcm9jZXNzIGNvbnRhaW5lcnMpLiAgSW4gYWRkaXRpb24sIGlmIEhvc3RQcm9jZXNzIGlzIHRydWUgdGhlbiBIb3N0TmV0d29yayBtdXN0IGFsc28gYmUgc2V0IHRvIHRydWUuIiwidHlwZSI6ImJvb2xlYW4ifSwicnVuQXNVc2VyTmFtZSI6eyJkZXNjcmlwdGlvbiI6IlRoZSBVc2VyTmFtZSBpbiBXaW5kb3dzIHRvIHJ1biB0aGUgZW50cnlwb2ludCBvZiB0aGUgY29udGFpbmVyIHByb2Nlc3MuIERlZmF1bHRzIHRvIHRoZSB1c2VyIHNwZWNpZmllZCBpbiBpbWFnZSBtZXRhZGF0YSBpZiB1bnNwZWNpZmllZC4gTWF5IGFsc28gYmUgc2V0IGluIFBvZFNlY3VyaXR5Q29udGV4dC4gSWYgc2V0IGluIGJvdGggU2VjdXJpdHlDb250ZXh0IGFuZCBQb2RTZWN1cml0eUNvbnRleHQsIHRoZSB2YWx1ZSBzcGVjaWZpZWQgaW4gU2VjdXJpdHlDb250ZXh0IHRha2VzIHByZWNlZGVuY2UuIiwidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9LCJ0b2xlcmF0aW9ucyI6eyJpdGVtcyI6eyJkZXNjcmlwdGlvbiI6IlRoZSBwb2QgdGhpcyBUb2xlcmF0aW9uIGlzIGF0dGFjaGVkIHRvIHRvbGVyYXRlcyBhbnkgdGFpbnQgdGhhdCBtYXRjaGVzIHRoZSB0cmlwbGUgXHUwMDNja2V5LHZhbHVlLGVmZmVjdFx1MDAzZSB1c2luZyB0aGUgbWF0Y2hpbmcgb3BlcmF0b3IgXHUwMDNjb3BlcmF0b3JcdTAwM2UuIiwicHJvcGVydGllcyI6eyJlZmZlY3QiOnsiZGVzY3JpcHRpb24iOiJFZmZlY3QgaW5kaWNhdGVzIHRoZSB0YWludCBlZmZlY3QgdG8gbWF0Y2guIEVtcHR5IG1lYW5zIG1hdGNoIGFsbCB0YWludCBlZmZlY3RzLiBXaGVuIHNwZWNpZmllZCwgYWxsb3dlZCB2YWx1ZXMgYXJlIE5vU2NoZWR1bGUsIFByZWZlck5vU2NoZWR1bGUgYW5kIE5vRXhlY3V0ZS4iLCJ0eXBlIjoic3RyaW5nIn0sImtleSI6eyJkZXNjcmlwdGlvbiI6IktleSBpcyB0aGUgdGFpbnQga2V5IHRoYXQgdGhlIHRvbGVyYXRpb24gYXBwbGllcyB0by4gRW1wdHkgbWVhbnMgbWF0Y2ggYWxsIHRhaW50IGtleXMuIElmIHRoZSBrZXkgaXMgZW1wdHksIG9wZXJhdG9yIG11c3QgYmUgRXhpc3RzOyB0aGlzIGNvbWJpbmF0aW9uIG1lYW5zIHRvIG1hdGNoIGFsbCB2YWx1ZXMgYW5kIGFsbCBrZXlzLiIsInR5cGUiOiJzdHJpbmcifSwib3BlcmF0b3IiOnsiZGVzY3JpcHRpb24iOiJPcGVyYXRvciByZXByZXNlbnRzIGEga2V5J3MgcmVsYXRpb25zaGlwIHRvIHRoZSB2YWx1ZS4gVmFsaWQgb3BlcmF0b3JzIGFyZSBFeGlzdHMgYW5kIEVxdWFsLiBEZWZhdWx0cyB0byBFcXVhbC4gRXhpc3RzIGlzIGVxdWl2YWxlbnQgdG8gd2lsZGNhcmQgZm9yIHZhbHVlLCBzbyB0aGF0IGEgcG9kIGNhbiB0b2xlcmF0ZSBhbGwgdGFpbnRzIG9mIGEgcGFydGljdWxhciBjYXRlZ29yeS4iLCJ0eXBlIjoic3RyaW5nIn0sInRvbGVyYXRpb25TZWNvbmRzIjp7ImRlc2NyaXB0aW9uIjoiVG9sZXJhdGlvblNlY29uZHMgcmVwcmVzZW50cyB0aGUgcGVyaW9kIG9mIHRpbWUgdGhlIHRvbGVyYXRpb24gKHdoaWNoIG11c3QgYmUgb2YgZWZmZWN0IE5vRXhlY3V0ZSwgb3RoZXJ3aXNlIHRoaXMgZmllbGQgaXMgaWdub3JlZCkgdG9sZXJhdGVzIHRoZSB0YWludC4gQnkgZGVmYXVsdCwgaXQgaXMgbm90IHNldCwgd2hpY2ggbWVhbnMgdG9sZXJhdGUgdGhlIHRhaW50IGZvcmV2ZXIgKGRvIG5vdCBldmljdCkuIFplcm8gYW5kIG5lZ2F0aXZlIHZhbHVlcyB3aWxsIGJlIHRyZWF0ZWQgYXMgMCAoZXZpY3QgaW1tZWRpYXRlbHkpIGJ5IHRoZSBzeXN0ZW0uIiwiZm9ybWF0IjoiaW50NjQiLCJ0eXBlIjoiaW50ZWdlciJ9LCJ2YWx1ZSI6eyJkZXNjcmlwdGlvbiI6IlZhbHVlIGlzIHRoZSB0YWludCB2YWx1ZSB0aGUgdG9sZXJhdGlvbiBtYXRjaGVzIHRvLiBJZiB0aGUgb3BlcmF0b3IgaXMgRXhpc3RzLCB0aGUgdmFsdWUgc2hvdWxkIGJlIGVtcHR5LCBvdGhlcndpc2UganVzdCBhIHJlZ3VsYXIgc3RyaW5nLiIsInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpbWFnZSIsInBvcnQiXSwidHlwZSI6Im9iamVjdCJ9LCJkZWxldGVSb3V0ZVBhdGgiOnsidHlwZSI6InN0cmluZyJ9LCJnZXRJbnRlcmZhY2VQYXRoIjp7InR5cGUiOiJzdHJpbmcifSwiaXBhbVR5cGUiOnsidHlwZSI6InN0cmluZyJ9LCJqb2luUGF0aCI6eyJ0eXBlIjoic3RyaW5nIn0sImxvZ0xldmVsIjp7InR5cGUiOiJpbnRlZ2VyIn0sImxvbmdSZWNvbmNpbGVNaW51dGVzIjp7InR5cGUiOiJpbnRlZ2VyIn0sIm5vcm1hbFJlY29uY2lsZU1pbnV0ZXMiOnsidHlwZSI6ImludGVnZXIifSwidXJnZW50UmVjb25jaWxlU2Vjb25kcyI6eyJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsiY25pVHlwZSIsImRhZW1vbiIsImdldEludGVyZmFjZVBhdGgiLCJpcGFtVHlwZSIsImpvaW5QYXRoIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiQ29uZmlnU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIENvbmZpZyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImRldmljZWNsYXNzZXMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiRGV2aWNlQ2xhc3MiLCJsaXN0S2luZCI6IkRldmljZUNsYXNzTGlzdCIsInBsdXJhbCI6ImRldmljZWNsYXNzZXMiLCJzaW5ndWxhciI6ImRldmljZWNsYXNzIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiRGV2aWNlQ2xhc3MgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGRldmljZWNsYXNzZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1NwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInByb3BlcnRpZXMiOnsiaWRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsicHJvZHVjdHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInByb2R1Y3RzIiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpZHMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Imhvc3RpbnRlcmZhY2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJsaXN0S2luZCI6Ikhvc3RJbnRlcmZhY2VMaXN0IiwicGx1cmFsIjoiaG9zdGludGVyZmFjZXMiLCJzaW5ndWxhciI6Imhvc3RpbnRlcmZhY2UifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwY2lBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwicHJvZHVjdCI6eyJ0eXBlIjoic3RyaW5nIn0sInZlbmRvciI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0SVAiLCJpbnRlcmZhY2VOYW1lIiwibmV0QWRkcmVzcyIsInBjaUFkZHJlc3MiLCJwcm9kdWN0IiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJob3N0TmFtZSIsImludGVyZmFjZXMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIEhvc3RJbnRlcmZhY2UiLCJwcm9wZXJ0aWVzIjp7InN0YXQiOnsicHJvcGVydGllcyI6eyJjb3VudCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibGFzdFJ4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RSeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFRpbWVzdGFtcCI6eyJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VHhEcm9wIjp7InR5cGUiOiJpbnRlZ2VyIn0sInJ4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwicnhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn0sInR4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJjb3VudCIsImludGVyZmFjZU5hbWUiLCJsYXN0UngiLCJsYXN0UnhEcm9wIiwibGFzdFRpbWVzdGFtcCIsImxhc3RUeCIsImxhc3RUeERyb3AiLCJyeERyb3BSYXRlIiwicnhSYXRlIiwidHhEcm9wUmF0ZSIsInR4UmF0ZSJdLCJ0eXBlIjoib2JqZWN0In19LCJyZXF1aXJlZCI6WyJzdGF0Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImlwcG9vbHMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiSVBQb29sIiwibGlzdEtpbmQiOiJJUFBvb2xMaXN0IiwicGx1cmFsIjoiaXBwb29scyIsInNpbmd1bGFyIjoiaXBwb29sIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBpcHBvb2xzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIElQUG9vbCIsInByb3BlcnRpZXMiOnsiYWxsb2NhdGlvbnMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJhZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwiaW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwibmFtZXNwYWNlIjp7InR5cGUiOiJzdHJpbmcifSwicG9kIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFkZHJlc3MiLCJpbmRleCIsIm5hbWVzcGFjZSIsInBvZCJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJleGNsdWRlcyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJuZXRBdHRhY2hEZWYiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RDSURSIjp7ImRlc2NyaXB0aW9uIjoiRm9vIGlzIGFuIGV4YW1wbGUgZmllbGQgb2YgSVBQb29sLiBFZGl0IGlwcG9vbF90eXBlcy5nbyB0byByZW1vdmUvdXBkYXRlIiwidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJhbGxvY2F0aW9ucyIsImV4Y2x1ZGVzIiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwibmV0QXR0YWNoRGVmIiwicG9kQ0lEUiIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIElQUG9vbCIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9tZXRyaWNzIl0sInZlcmJzIjpbImdldCJdfV19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlIn0sInNwZWMiOnsicG9ydHMiOlt7Im5hbWUiOiJodHRwcyIsInBvcnQiOjg0NDMsInRhcmdldFBvcnQiOiJodHRwcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.0.4
  name: ""
- image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:0af1535a1b973c703481c67f145786d4d56397c0a8953ae15687804339936447
  name: ""
schema: olm.bundle
---
image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:d4df17d23659a3b1fcbd3abc5b3548d5b6eadd43e6e2fa8b3e77b71992de62dd
name: multi-nic-cni-operator.v1.0.5
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.0.5
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibGlzdEtpbmQiOiJNdWx0aU5pY05ldHdvcmtMaXN0IiwicGx1cmFsIjoibXVsdGluaWNuZXR3b3JrcyIsInNpbmd1bGFyIjoibXVsdGluaWNuZXR3b3JrIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIE11bHRpTmljTmV0d29yayBNYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbCBTdWJuZXQgaXMgZ2xvYmFsIHN1Ym5ldCwgZGVmYXVsdDogMTcyLjMwLjAuMC8xNiBJUEFNIGlzIGlwYW0gc3BlY2lmaWNhdGlvbiBNYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uIFBvbGljeSBpcyBnZW5lcmFsIHBvbGljeSBvZiB0aGUgcG9vbCIsInByb3BlcnRpZXMiOnsiYXR0YWNoUG9saWN5Ijp7ImRlc2NyaXB0aW9uIjoiQXNzaWdubWVudFBvbGljeSBkZWZpbmVzIHRoZSBwb2xpY3kgdG8gc2VsZWN0IHRoZSBOSUNzIGZyb20gdGhlIHBvb2wgU3RyYXRlZ3kgaXMgb25lIG9mIE5vbmUsIENvc3RPcHQsIFBlcmZPcHQsIFFvU0NsYXNzIFRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHMgcmVxdWlyZWQgZm9yIENvc3RPcHQgYW5kIFBlcmZPcHQiLCJwcm9wZXJ0aWVzIjp7InN0cmF0ZWd5Ijp7InR5cGUiOiJzdHJpbmcifSwidGFyZ2V0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0cmF0ZWd5Il0sInR5cGUiOiJvYmplY3QifSwiaXBhbSI6eyJ0eXBlIjoic3RyaW5nIn0sIm1hc3Rlck5ldHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwibXVsdGlOSUNJUEFNIjp7InR5cGUiOiJib29sZWFuIn0sIm5hbWVzcGFjZXMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwicGx1Z2luIjp7ImRlc2NyaXB0aW9uIjoicmVmZXJlbmNlOiBnaXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvY25pL3BrZy90eXBlcyIsInByb3BlcnRpZXMiOnsiYXJncyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJvYmplY3QifSwiY2FwYWJpbGl0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJib29sZWFuIn0sInR5cGUiOiJvYmplY3QifSwiY25pVmVyc2lvbiI6eyJ0eXBlIjoic3RyaW5nIn0sImRucyI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImRvbWFpbiI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWVzZXJ2ZXJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm9wdGlvbnMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwic2VhcmNoIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY25pVmVyc2lvbiIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaXBhbSIsInBsdWdpbiJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29ya1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBNdWx0aU5pY05ldHdvcmsiLCJwcm9wZXJ0aWVzIjp7ImNvbXB1dGVSZXN1bHRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sIm51bU9mSG9zdHMiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbIm5ldEFkZHJlc3MiLCJudW1PZkhvc3RzIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZ1N0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn0sImRpc2NvdmVyeSI6eyJwcm9wZXJ0aWVzIjp7ImNpZHJQcm9jZXNzZWQiOnsidHlwZSI6ImludGVnZXIifSwiZXhpc3REYWVtb24iOnsidHlwZSI6ImludGVnZXIifSwiaW5mb0F2YWlsYWJsZSI6eyJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsiY2lkclByb2Nlc3NlZCIsImV4aXN0RGFlbW9uIiwiaW5mb0F2YWlsYWJsZSJdLCJ0eXBlIjoib2JqZWN0In0sImxhc3RTeW5jVGltZSI6eyJmb3JtYXQiOiJkYXRlLXRpbWUiLCJ0eXBlIjoic3RyaW5nIn0sIm1lc3NhZ2UiOnsidHlwZSI6InN0cmluZyJ9LCJyb3V0ZVN0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJjb21wdXRlUmVzdWx0cyIsImNvbmZpZ1N0YXR1cyIsImRpc2NvdmVyeSIsImxhc3RTeW5jVGltZSIsIm1lc3NhZ2UiLCJyb3V0ZVN0YXR1cyJdLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNpZHJzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkNJRFIiLCJsaXN0S2luZCI6IkNJRFJMaXN0IiwicGx1cmFsIjoiY2lkcnMiLCJzaW5ndWxhciI6ImNpZHIifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQ0lEUiIsInByb3BlcnRpZXMiOnsiY2lkciI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Imhvc3RzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaG9zdEluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImlwcG9vbCI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdElQIiwiaG9zdEluZGV4IiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwicG9kQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbnRlcmZhY2VJbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuZXRBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbkNJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdHMiLCJpbnRlcmZhY2VJbmRleCIsIm5ldEFkZHJlc3MiLCJ2bGFuQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWciOnsiZGVzY3JpcHRpb24iOiJJTlNFUlQgQURESVRJT05BTCBTUEVDIEZJRUxEUyAtIGRlc2lyZWQgc3RhdGUgb2YgY2x1c3RlciBJbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNvbmZpZ3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiQ29uZmlnIiwibGlzdEtpbmQiOiJDb25maWdMaXN0IiwicGx1cmFsIjoiY29uZmlncyIsInNpbmd1bGFyIjoiY29uZmlnIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiQ29uZmlnIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjb25maWdzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiQ29uZmlnU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIENvbmZpZyIsInByb3BlcnRpZXMiOnsiYWRkUm91dGVQYXRoIjp7InR5cGUiOiJzdHJpbmcifSwiY25pVHlwZSI6eyJkZXNjcmlwdGlvbiI6IklOU0VSVCBBRERJVElPTkFMIFNQRUMgRklFTERTIC0gZGVzaXJlZCBzdGF0ZSBvZiBjbHVzdGVyIEltcG9ydGFudDogUnVuIFwibWFrZVwiIHRvIHJlZ2VuZXJhdGUgY29kZSBhZnRlciBtb2RpZnlpbmcgdGhpcyBmaWxlIiwidHlwZSI6InN0cmluZyJ9LCJjb250ZXh0VGltZW91dE1pbnV0ZXMiOnsidHlwZSI6ImludGVnZXIifSwiZGFlbW9uIjp7InByb3BlcnRpZXMiOnsiZW52Ijp7Iml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiRW52VmFyIHJlcHJlc2VudHMgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUgcHJlc2VudCBpbiBhIENvbnRhaW5lci4iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG9mIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZS4gTXVzdCBiZSBhIENfSURFTlRJRklFUi4iLCJ0eXBlIjoic3RyaW5nIn0sInZhbHVlIjp7ImRlc2NyaXB0aW9uIjoiVmFyaWFibGUgcmVmZXJlbmNlcyAkKFZBUl9OQU1FKSBhcmUgZXhwYW5kZWQgdXNpbmcgdGhlIHByZXZpb3VzbHkgZGVmaW5lZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgaW4gdGhlIGNvbnRhaW5lciBhbmQgYW55IHNlcnZpY2UgZW52aXJvbm1lbnQgdmFyaWFibGVzLiBJZiBhIHZhcmlhYmxlIGNhbm5vdCBiZSByZXNvbHZlZCwgdGhlIHJlZmVyZW5jZSBpbiB0aGUgaW5wdXQgc3RyaW5nIHdpbGwgYmUgdW5jaGFuZ2VkLiBEb3VibGUgJCQgYXJlIHJlZHVjZWQgdG8gYSBzaW5nbGUgJCwgd2hpY2ggYWxsb3dzIGZvciBlc2NhcGluZyB0aGUgJChWQVJfTkFNRSkgc3ludGF4OiBpLmUuIFwiJCQoVkFSX05BTUUpXCIgd2lsbCBwcm9kdWNlIHRoZSBzdHJpbmcgbGl0ZXJhbCBcIiQoVkFSX05BTUUpXCIuIEVzY2FwZWQgcmVmZXJlbmNlcyB3aWxsIG5ldmVyIGJlIGV4cGFuZGVkLCByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIHZhcmlhYmxlIGV4aXN0cyBvciBub3QuIERlZmF1bHRzIHRvIFwiXCIuIiwidHlwZSI6InN0cmluZyJ9LCJ2YWx1ZUZyb20iOnsiZGVzY3JpcHRpb24iOiJTb3VyY2UgZm9yIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSdzIHZhbHVlLiBDYW5ub3QgYmUgdXNlZCBpZiB2YWx1ZSBpcyBub3QgZW1wdHkuIiwicHJvcGVydGllcyI6eyJjb25maWdNYXBLZXlSZWYiOnsiZGVzY3JpcHRpb24iOiJTZWxlY3RzIGEga2V5IG9mIGEgQ29uZmlnTWFwLiIsInByb3BlcnRpZXMiOnsia2V5Ijp7ImRlc2NyaXB0aW9uIjoiVGhlIGtleSB0byBzZWxlY3QuIiwidHlwZSI6InN0cmluZyJ9LCJuYW1lIjp7ImRlc2NyaXB0aW9uIjoiTmFtZSBvZiB0aGUgcmVmZXJlbnQuIE1vcmUgaW5mbzogaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvd29ya2luZy13aXRoLW9iamVjdHMvbmFtZXMvI25hbWVzIFRPRE86IEFkZCBvdGhlciB1c2VmdWwgZmllbGRzLiBhcGlWZXJzaW9uLCBraW5kLCB1aWQ/IiwidHlwZSI6InN0cmluZyJ9LCJvcHRpb25hbCI6eyJkZXNjcmlwdGlvbiI6IlNwZWNpZnkgd2hldGhlciB0aGUgQ29uZmlnTWFwIG9yIGl0cyBrZXkgbXVzdCBiZSBkZWZpbmVkIiwidHlwZSI6ImJvb2xlYW4ifX0sInJlcXVpcmVkIjpbImtleSJdLCJ0eXBlIjoib2JqZWN0In0sImZpZWxkUmVmIjp7ImRlc2NyaXB0aW9uIjoiU2VsZWN0cyBhIGZpZWxkIG9mIHRoZSBwb2Q6IHN1cHBvcnRzIG1ldGFkYXRhLm5hbWUsIG1ldGFkYXRhLm5hbWVzcGFjZSwgYG1ldGFkYXRhLmxhYmVsc1snXHUwMDNjS0VZXHUwMDNlJ11gLCBgbWV0YWRhdGEuYW5ub3RhdGlvbnNbJ1x1MDAzY0tFWVx1MDAzZSddYCwgc3BlYy5ub2RlTmFtZSwgc3BlYy5zZXJ2aWNlQWNjb3VudE5hbWUsIHN0YXR1cy5ob3N0SVAsIHN0YXR1cy5wb2RJUCwgc3RhdHVzLnBvZElQcy4iLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJWZXJzaW9uIG9mIHRoZSBzY2hlbWEgdGhlIEZpZWxkUGF0aCBpcyB3cml0dGVuIGluIHRlcm1zIG9mLCBkZWZhdWx0cyB0byBcInYxXCIuIiwidHlwZSI6InN0cmluZyJ9LCJmaWVsZFBhdGgiOnsiZGVzY3JpcHRpb24iOiJQYXRoIG9mIHRoZSBmaWVsZCB0byBzZWxlY3QgaW4gdGhlIHNwZWNpZmllZCBBUEkgdmVyc2lvbi4iLCJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJmaWVsZFBhdGgiXSwidHlwZSI6Im9iamVjdCJ9LCJyZXNvdXJjZUZpZWxkUmVmIjp7ImRlc2NyaXB0aW9uIjoiU2VsZWN0cyBhIHJlc291cmNlIG9mIHRoZSBjb250YWluZXI6IG9ubHkgcmVzb3VyY2VzIGxpbWl0cyBhbmQgcmVxdWVzdHMgKGxpbWl0cy5jcHUsIGxpbWl0cy5tZW1vcnksIGxpbWl0cy5lcGhlbWVyYWwtc3RvcmFnZSwgcmVxdWVzdHMuY3B1LCByZXF1ZXN0cy5tZW1vcnkgYW5kIHJlcXVlc3RzLmVwaGVtZXJhbC1zdG9yYWdlKSBhcmUgY3VycmVudGx5IHN1cHBvcnRlZC4iLCJwcm9wZXJ0aWVzIjp7ImNvbnRhaW5lck5hbWUiOnsiZGVzY3JpcHRpb24iOiJDb250YWluZXIgbmFtZTogcmVxdWlyZWQgZm9yIHZvbHVtZXMsIG9wdGlvbmFsIGZvciBlbnYgdmFycyIsInR5cGUiOiJzdHJpbmcifSwiZGl2aXNvciI6eyJhbnlPZiI6W3sidHlwZSI6ImludGVnZXIifSx7InR5cGUiOiJzdHJpbmcifV0sImRlc2NyaXB0aW9uIjoiU3BlY2lmaWVzIHRoZSBvdXRwdXQgZm9ybWF0IG9mIHRoZSBleHBvc2VkIHJlc291cmNlcywgZGVmYXVsdHMgdG8gXCIxXCIiLCJwYXR0ZXJuIjoiXihcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSgoW0tNR1RQRV1pKXxbbnVta01HVFBFXXwoW2VFXShcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSkpPyQiLCJ4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZyI6dHJ1ZX0sInJlc291cmNlIjp7ImRlc2NyaXB0aW9uIjoiUmVxdWlyZWQ6IHJlc291cmNlIHRvIHNlbGVjdCIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInJlc291cmNlIl0sInR5cGUiOiJvYmplY3QifSwic2VjcmV0S2V5UmVmIjp7ImRlc2NyaXB0aW9uIjoiU2VsZWN0cyBhIGtleSBvZiBhIHNlY3JldCBpbiB0aGUgcG9kJ3MgbmFtZXNwYWNlIiwicHJvcGVydGllcyI6eyJrZXkiOnsiZGVzY3JpcHRpb24iOiJUaGUga2V5IG9mIHRoZSBzZWNyZXQgdG8gc2VsZWN0IGZyb20uICBNdXN0IGJlIGEgdmFsaWQgc2VjcmV0IGtleS4iLCJ0eXBlIjoic3RyaW5nIn0sIm5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG9mIHRoZSByZWZlcmVudC4gTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9vdmVydmlldy93b3JraW5nLXdpdGgtb2JqZWN0cy9uYW1lcy8jbmFtZXMgVE9ETzogQWRkIG90aGVyIHVzZWZ1bCBmaWVsZHMuIGFwaVZlcnNpb24sIGtpbmQsIHVpZD8iLCJ0eXBlIjoic3RyaW5nIn0sIm9wdGlvbmFsIjp7ImRlc2NyaXB0aW9uIjoiU3BlY2lmeSB3aGV0aGVyIHRoZSBTZWNyZXQgb3IgaXRzIGtleSBtdXN0IGJlIGRlZmluZWQiLCJ0eXBlIjoiYm9vbGVhbiJ9fSwicmVxdWlyZWQiOlsia2V5Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInJlcXVpcmVkIjpbIm5hbWUiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifSwiZW52RnJvbSI6eyJpdGVtcyI6eyJkZXNjcmlwdGlvbiI6IkVudkZyb21Tb3VyY2UgcmVwcmVzZW50cyB0aGUgc291cmNlIG9mIGEgc2V0IG9mIENvbmZpZ01hcHMiLCJwcm9wZXJ0aWVzIjp7ImNvbmZpZ01hcFJlZiI6eyJkZXNjcmlwdGlvbiI6IlRoZSBDb25maWdNYXAgdG8gc2VsZWN0IGZyb20iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG9mIHRoZSByZWZlcmVudC4gTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9vdmVydmlldy93b3JraW5nLXdpdGgtb2JqZWN0cy9uYW1lcy8jbmFtZXMgVE9ETzogQWRkIG90aGVyIHVzZWZ1bCBmaWVsZHMuIGFwaVZlcnNpb24sIGtpbmQsIHVpZD8iLCJ0eXBlIjoic3RyaW5nIn0sIm9wdGlvbmFsIjp7ImRlc2NyaXB0aW9uIjoiU3BlY2lmeSB3aGV0aGVyIHRoZSBDb25maWdNYXAgbXVzdCBiZSBkZWZpbmVkIiwidHlwZSI6ImJvb2xlYW4ifX0sInR5cGUiOiJvYmplY3QifSwicHJlZml4Ijp7ImRlc2NyaXB0aW9uIjoiQW4gb3B0aW9uYWwgaWRlbnRpZmllciB0byBwcmVwZW5kIHRvIGVhY2gga2V5IGluIHRoZSBDb25maWdNYXAuIE11c3QgYmUgYSBDX0lERU5USUZJRVIuIiwidHlwZSI6InN0cmluZyJ9LCJzZWNyZXRSZWYiOnsiZGVzY3JpcHRpb24iOiJUaGUgU2VjcmV0IHRvIHNlbGVjdCBmcm9tIiwicHJvcGVydGllcyI6eyJuYW1lIjp7ImRlc2NyaXB0aW9uIjoiTmFtZSBvZiB0aGUgcmVmZXJlbnQuIE1vcmUgaW5mbzogaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvd29ya2luZy13aXRoLW9iamVjdHMvbmFtZXMvI25hbWVzIFRPRE86IEFkZCBvdGhlciB1c2VmdWwgZmllbGRzLiBhcGlWZXJzaW9uLCBraW5kLCB1aWQ/IiwidHlwZSI6InN0cmluZyJ9LCJvcHRpb25hbCI6eyJkZXNjcmlwdGlvbiI6IlNwZWNpZnkgd2hldGhlciB0aGUgU2VjcmV0IG11c3QgYmUgZGVmaW5lZCIsInR5cGUiOiJib29sZWFuIn19LCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbWFnZSI6eyJ0eXBlIjoic3RyaW5nIn0sImltYWdlUHVsbFBvbGljeSI6eyJ0eXBlIjoic3RyaW5nIn0sImltYWdlUHVsbFNlY3JldE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJtb3VudHMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJob3N0cGF0aCI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RwYXRoIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImhvc3RwYXRoIiwibmFtZSIsInBvZHBhdGgiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifSwibm9kZVNlbGVjdG9yIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6Im9iamVjdCJ9LCJwb3J0Ijp7InR5cGUiOiJpbnRlZ2VyIn0sInJlc291cmNlcyI6eyJkZXNjcmlwdGlvbiI6IlJlc291cmNlUmVxdWlyZW1lbnRzIGRlc2NyaWJlcyB0aGUgY29tcHV0ZSByZXNvdXJjZSByZXF1aXJlbWVudHMuIiwicHJvcGVydGllcyI6eyJsaW1pdHMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsiYW55T2YiOlt7InR5cGUiOiJpbnRlZ2VyIn0seyJ0eXBlIjoic3RyaW5nIn1dLCJwYXR0ZXJuIjoiXihcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSgoW0tNR1RQRV1pKXxbbnVta01HVFBFXXwoW2VFXShcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSkpPyQiLCJ4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZyI6dHJ1ZX0sImRlc2NyaXB0aW9uIjoiTGltaXRzIGRlc2NyaWJlcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgY29tcHV0ZSByZXNvdXJjZXMgYWxsb3dlZC4gTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9jb25maWd1cmF0aW9uL21hbmFnZS1yZXNvdXJjZXMtY29udGFpbmVycy8iLCJ0eXBlIjoib2JqZWN0In0sInJlcXVlc3RzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7ImFueU9mIjpbeyJ0eXBlIjoiaW50ZWdlciJ9LHsidHlwZSI6InN0cmluZyJ9XSwicGF0dGVybiI6Il4oXFwrfC0pPygoWzAtOV0rKFxcLlswLTldKik/KXwoXFwuWzAtOV0rKSkoKFtLTUdUUEVdaSl8W251bWtNR1RQRV18KFtlRV0oXFwrfC0pPygoWzAtOV0rKFxcLlswLTldKik/KXwoXFwuWzAtOV0rKSkpKT8kIiwieC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmciOnRydWV9LCJkZXNjcmlwdGlvbiI6IlJlcXVlc3RzIGRlc2NyaWJlcyB0aGUgbWluaW11bSBhbW91bnQgb2YgY29tcHV0ZSByZXNvdXJjZXMgcmVxdWlyZWQuIElmIFJlcXVlc3RzIGlzIG9taXR0ZWQgZm9yIGEgY29udGFpbmVyLCBpdCBkZWZhdWx0cyB0byBMaW1pdHMgaWYgdGhhdCBpcyBleHBsaWNpdGx5IHNwZWNpZmllZCwgb3RoZXJ3aXNlIHRvIGFuIGltcGxlbWVudGF0aW9uLWRlZmluZWQgdmFsdWUuIE1vcmUgaW5mbzogaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvY29uZmlndXJhdGlvbi9tYW5hZ2UtcmVzb3VyY2VzLWNvbnRhaW5lcnMvIiwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9LCJzZWN1cml0eUNvbnRleHQiOnsiZGVzY3JpcHRpb24iOiJTZWN1cml0eUNvbnRleHQgaG9sZHMgc2VjdXJpdHkgY29uZmlndXJhdGlvbiB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byBhIGNvbnRhaW5lci4gU29tZSBmaWVsZHMgYXJlIHByZXNlbnQgaW4gYm90aCBTZWN1cml0eUNvbnRleHQgYW5kIFBvZFNlY3VyaXR5Q29udGV4dC4gIFdoZW4gYm90aCBhcmUgc2V0LCB0aGUgdmFsdWVzIGluIFNlY3VyaXR5Q29udGV4dCB0YWtlIHByZWNlZGVuY2UuIiwicHJvcGVydGllcyI6eyJhbGxvd1ByaXZpbGVnZUVzY2FsYXRpb24iOnsiZGVzY3JpcHRpb24iOiJBbGxvd1ByaXZpbGVnZUVzY2FsYXRpb24gY29udHJvbHMgd2hldGhlciBhIHByb2Nlc3MgY2FuIGdhaW4gbW9yZSBwcml2aWxlZ2VzIHRoYW4gaXRzIHBhcmVudCBwcm9jZXNzLiBUaGlzIGJvb2wgZGlyZWN0bHkgY29udHJvbHMgaWYgdGhlIG5vX25ld19wcml2cyBmbGFnIHdpbGwgYmUgc2V0IG9uIHRoZSBjb250YWluZXIgcHJvY2Vzcy4gQWxsb3dQcml2aWxlZ2VFc2NhbGF0aW9uIGlzIHRydWUgYWx3YXlzIHdoZW4gdGhlIGNvbnRhaW5lciBpczogMSkgcnVuIGFzIFByaXZpbGVnZWQgMikgaGFzIENBUF9TWVNfQURNSU4gTm90ZSB0aGF0IHRoaXMgZmllbGQgY2Fubm90IGJlIHNldCB3aGVuIHNwZWMub3MubmFtZSBpcyB3aW5kb3dzLiIsInR5cGUiOiJib29sZWFuIn0sImNhcGFiaWxpdGllcyI6eyJkZXNjcmlwdGlvbiI6IlRoZSBjYXBhYmlsaXRpZXMgdG8gYWRkL2Ryb3Agd2hlbiBydW5uaW5nIGNvbnRhaW5lcnMuIERlZmF1bHRzIHRvIHRoZSBkZWZhdWx0IHNldCBvZiBjYXBhYmlsaXRpZXMgZ3JhbnRlZCBieSB0aGUgY29udGFpbmVyIHJ1bnRpbWUuIE5vdGUgdGhhdCB0aGlzIGZpZWxkIGNhbm5vdCBiZSBzZXQgd2hlbiBzcGVjLm9zLm5hbWUgaXMgd2luZG93cy4iLCJwcm9wZXJ0aWVzIjp7ImFkZCI6eyJkZXNjcmlwdGlvbiI6IkFkZGVkIGNhcGFiaWxpdGllcyIsIml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiQ2FwYWJpbGl0eSByZXByZXNlbnQgUE9TSVggY2FwYWJpbGl0aWVzIHR5cGUiLCJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJkcm9wIjp7ImRlc2NyaXB0aW9uIjoiUmVtb3ZlZCBjYXBhYmlsaXRpZXMiLCJpdGVtcyI6eyJkZXNjcmlwdGlvbiI6IkNhcGFiaWxpdHkgcmVwcmVzZW50IFBPU0lYIGNhcGFiaWxpdGllcyB0eXBlIiwidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifX0sInR5cGUiOiJvYmplY3QifSwicHJpdmlsZWdlZCI6eyJkZXNjcmlwdGlvbiI6IlJ1biBjb250YWluZXIgaW4gcHJpdmlsZWdlZCBtb2RlLiBQcm9jZXNzZXMgaW4gcHJpdmlsZWdlZCBjb250YWluZXJzIGFyZSBlc3NlbnRpYWxseSBlcXVpdmFsZW50IHRvIHJvb3Qgb24gdGhlIGhvc3QuIERlZmF1bHRzIHRvIGZhbHNlLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwidHlwZSI6ImJvb2xlYW4ifSwicHJvY01vdW50Ijp7ImRlc2NyaXB0aW9uIjoicHJvY01vdW50IGRlbm90ZXMgdGhlIHR5cGUgb2YgcHJvYyBtb3VudCB0byB1c2UgZm9yIHRoZSBjb250YWluZXJzLiBUaGUgZGVmYXVsdCBpcyBEZWZhdWx0UHJvY01vdW50IHdoaWNoIHVzZXMgdGhlIGNvbnRhaW5lciBydW50aW1lIGRlZmF1bHRzIGZvciByZWFkb25seSBwYXRocyBhbmQgbWFza2VkIHBhdGhzLiBUaGlzIHJlcXVpcmVzIHRoZSBQcm9jTW91bnRUeXBlIGZlYXR1cmUgZmxhZyB0byBiZSBlbmFibGVkLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwidHlwZSI6InN0cmluZyJ9LCJyZWFkT25seVJvb3RGaWxlc3lzdGVtIjp7ImRlc2NyaXB0aW9uIjoiV2hldGhlciB0aGlzIGNvbnRhaW5lciBoYXMgYSByZWFkLW9ubHkgcm9vdCBmaWxlc3lzdGVtLiBEZWZhdWx0IGlzIGZhbHNlLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwidHlwZSI6ImJvb2xlYW4ifSwicnVuQXNHcm91cCI6eyJkZXNjcmlwdGlvbiI6IlRoZSBHSUQgdG8gcnVuIHRoZSBlbnRyeXBvaW50IG9mIHRoZSBjb250YWluZXIgcHJvY2Vzcy4gVXNlcyBydW50aW1lIGRlZmF1bHQgaWYgdW5zZXQuIE1heSBhbHNvIGJlIHNldCBpbiBQb2RTZWN1cml0eUNvbnRleHQuICBJZiBzZXQgaW4gYm90aCBTZWN1cml0eUNvbnRleHQgYW5kIFBvZFNlY3VyaXR5Q29udGV4dCwgdGhlIHZhbHVlIHNwZWNpZmllZCBpbiBTZWN1cml0eUNvbnRleHQgdGFrZXMgcHJlY2VkZW5jZS4gTm90ZSB0aGF0IHRoaXMgZmllbGQgY2Fubm90IGJlIHNldCB3aGVuIHNwZWMub3MubmFtZSBpcyB3aW5kb3dzLiIsImZvcm1hdCI6ImludDY0IiwidHlwZSI6ImludGVnZXIifSwicnVuQXNOb25Sb290Ijp7ImRlc2NyaXB0aW9uIjoiSW5kaWNhdGVzIHRoYXQgdGhlIGNvbnRhaW5lciBtdXN0IHJ1biBhcyBhIG5vbi1yb290IHVzZXIuIElmIHRydWUsIHRoZSBLdWJlbGV0IHdpbGwgdmFsaWRhdGUgdGhlIGltYWdlIGF0IHJ1bnRpbWUgdG8gZW5zdXJlIHRoYXQgaXQgZG9lcyBub3QgcnVuIGFzIFVJRCAwIChyb290KSBhbmQgZmFpbCB0byBzdGFydCB0aGUgY29udGFpbmVyIGlmIGl0IGRvZXMuIElmIHVuc2V0IG9yIGZhbHNlLCBubyBzdWNoIHZhbGlkYXRpb24gd2lsbCBiZSBwZXJmb3JtZWQuIE1heSBhbHNvIGJlIHNldCBpbiBQb2RTZWN1cml0eUNvbnRleHQuICBJZiBzZXQgaW4gYm90aCBTZWN1cml0eUNvbnRleHQgYW5kIFBvZFNlY3VyaXR5Q29udGV4dCwgdGhlIHZhbHVlIHNwZWNpZmllZCBpbiBTZWN1cml0eUNvbnRleHQgdGFrZXMgcHJlY2VkZW5jZS4iLCJ0eXBlIjoiYm9vbGVhbiJ9LCJydW5Bc1VzZXIiOnsiZGVzY3JpcHRpb24iOiJUaGUgVUlEIHRvIHJ1biB0aGUgZW50cnlwb2ludCBvZiB0aGUgY29udGFpbmVyIHByb2Nlc3MuIERlZmF1bHRzIHRvIHVzZXIgc3BlY2lmaWVkIGluIGltYWdlIG1ldGFkYXRhIGlmIHVuc3BlY2lmaWVkLiBNYXkgYWxzbyBiZSBzZXQgaW4gUG9kU2VjdXJpdHlDb250ZXh0LiAgSWYgc2V0IGluIGJvdGggU2VjdXJpdHlDb250ZXh0IGFuZCBQb2RTZWN1cml0eUNvbnRleHQsIHRoZSB2YWx1ZSBzcGVjaWZpZWQgaW4gU2VjdXJpdHlDb250ZXh0IHRha2VzIHByZWNlZGVuY2UuIE5vdGUgdGhhdCB0aGlzIGZpZWxkIGNhbm5vdCBiZSBzZXQgd2hlbiBzcGVjLm9zLm5hbWUgaXMgd2luZG93cy4iLCJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sInNlTGludXhPcHRpb25zIjp7ImRlc2NyaXB0aW9uIjoiVGhlIFNFTGludXggY29udGV4dCB0byBiZSBhcHBsaWVkIHRvIHRoZSBjb250YWluZXIuIElmIHVuc3BlY2lmaWVkLCB0aGUgY29udGFpbmVyIHJ1bnRpbWUgd2lsbCBhbGxvY2F0ZSBhIHJhbmRvbSBTRUxpbnV4IGNvbnRleHQgZm9yIGVhY2ggY29udGFpbmVyLiAgTWF5IGFsc28gYmUgc2V0IGluIFBvZFNlY3VyaXR5Q29udGV4dC4gIElmIHNldCBpbiBib3RoIFNlY3VyaXR5Q29udGV4dCBhbmQgUG9kU2VjdXJpdHlDb250ZXh0LCB0aGUgdmFsdWUgc3BlY2lmaWVkIGluIFNlY3VyaXR5Q29udGV4dCB0YWtlcyBwcmVjZWRlbmNlLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwicHJvcGVydGllcyI6eyJsZXZlbCI6eyJkZXNjcmlwdGlvbiI6IkxldmVsIGlzIFNFTGludXggbGV2ZWwgbGFiZWwgdGhhdCBhcHBsaWVzIHRvIHRoZSBjb250YWluZXIuIiwidHlwZSI6InN0cmluZyJ9LCJyb2xlIjp7ImRlc2NyaXB0aW9uIjoiUm9sZSBpcyBhIFNFTGludXggcm9sZSBsYWJlbCB0aGF0IGFwcGxpZXMgdG8gdGhlIGNvbnRhaW5lci4iLCJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOnsiZGVzY3JpcHRpb24iOiJUeXBlIGlzIGEgU0VMaW51eCB0eXBlIGxhYmVsIHRoYXQgYXBwbGllcyB0byB0aGUgY29udGFpbmVyLiIsInR5cGUiOiJzdHJpbmcifSwidXNlciI6eyJkZXNjcmlwdGlvbiI6IlVzZXIgaXMgYSBTRUxpbnV4IHVzZXIgbGFiZWwgdGhhdCBhcHBsaWVzIHRvIHRoZSBjb250YWluZXIuIiwidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9LCJzZWNjb21wUHJvZmlsZSI6eyJkZXNjcmlwdGlvbiI6IlRoZSBzZWNjb21wIG9wdGlvbnMgdG8gdXNlIGJ5IHRoaXMgY29udGFpbmVyLiBJZiBzZWNjb21wIG9wdGlvbnMgYXJlIHByb3ZpZGVkIGF0IGJvdGggdGhlIHBvZCBcdTAwMjYgY29udGFpbmVyIGxldmVsLCB0aGUgY29udGFpbmVyIG9wdGlvbnMgb3ZlcnJpZGUgdGhlIHBvZCBvcHRpb25zLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwicHJvcGVydGllcyI6eyJsb2NhbGhvc3RQcm9maWxlIjp7ImRlc2NyaXB0aW9uIjoibG9jYWxob3N0UHJvZmlsZSBpbmRpY2F0ZXMgYSBwcm9maWxlIGRlZmluZWQgaW4gYSBmaWxlIG9uIHRoZSBub2RlIHNob3VsZCBiZSB1c2VkLiBUaGUgcHJvZmlsZSBtdXN0IGJlIHByZWNvbmZpZ3VyZWQgb24gdGhlIG5vZGUgdG8gd29yay4gTXVzdCBiZSBhIGRlc2NlbmRpbmcgcGF0aCwgcmVsYXRpdmUgdG8gdGhlIGt1YmVsZXQncyBjb25maWd1cmVkIHNlY2NvbXAgcHJvZmlsZSBsb2NhdGlvbi4gTXVzdCBvbmx5IGJlIHNldCBpZiB0eXBlIGlzIFwiTG9jYWxob3N0XCIuIiwidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7ImRlc2NyaXB0aW9uIjoidHlwZSBpbmRpY2F0ZXMgd2hpY2gga2luZCBvZiBzZWNjb21wIHByb2ZpbGUgd2lsbCBiZSBhcHBsaWVkLiBWYWxpZCBvcHRpb25zIGFyZTogXG4gTG9jYWxob3N0IC0gYSBwcm9maWxlIGRlZmluZWQgaW4gYSBmaWxlIG9uIHRoZSBub2RlIHNob3VsZCBiZSB1c2VkLiBSdW50aW1lRGVmYXVsdCAtIHRoZSBjb250YWluZXIgcnVudGltZSBkZWZhdWx0IHByb2ZpbGUgc2hvdWxkIGJlIHVzZWQuIFVuY29uZmluZWQgLSBubyBwcm9maWxlIHNob3VsZCBiZSBhcHBsaWVkLiIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJ3aW5kb3dzT3B0aW9ucyI6eyJkZXNjcmlwdGlvbiI6IlRoZSBXaW5kb3dzIHNwZWNpZmljIHNldHRpbmdzIGFwcGxpZWQgdG8gYWxsIGNvbnRhaW5lcnMuIElmIHVuc3BlY2lmaWVkLCB0aGUgb3B0aW9ucyBmcm9tIHRoZSBQb2RTZWN1cml0eUNvbnRleHQgd2lsbCBiZSB1c2VkLiBJZiBzZXQgaW4gYm90aCBTZWN1cml0eUNvbnRleHQgYW5kIFBvZFNlY3VyaXR5Q29udGV4dCwgdGhlIHZhbHVlIHNwZWNpZmllZCBpbiBTZWN1cml0eUNvbnRleHQgdGFrZXMgcHJlY2VkZW5jZS4gTm90ZSB0aGF0IHRoaXMgZmllbGQgY2Fubm90IGJlIHNldCB3aGVuIHNwZWMub3MubmFtZSBpcyBsaW51eC4iLCJwcm9wZXJ0aWVzIjp7Imdtc2FDcmVkZW50aWFsU3BlYyI6eyJkZXNjcmlwdGlvbiI6IkdNU0FDcmVkZW50aWFsU3BlYyBpcyB3aGVyZSB0aGUgR01TQSBhZG1pc3Npb24gd2ViaG9vayAoaHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMtc2lncy93aW5kb3dzLWdtc2EpIGlubGluZXMgdGhlIGNvbnRlbnRzIG9mIHRoZSBHTVNBIGNyZWRlbnRpYWwgc3BlYyBuYW1lZCBieSB0aGUgR01TQUNyZWRlbnRpYWxTcGVjTmFtZSBmaWVsZC4iLCJ0eXBlIjoic3RyaW5nIn0sImdtc2FDcmVkZW50aWFsU3BlY05hbWUiOnsiZGVzY3JpcHRpb24iOiJHTVNBQ3JlZGVudGlhbFNwZWNOYW1lIGlzIHRoZSBuYW1lIG9mIHRoZSBHTVNBIGNyZWRlbnRpYWwgc3BlYyB0byB1c2UuIiwidHlwZSI6InN0cmluZyJ9LCJob3N0UHJvY2VzcyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RQcm9jZXNzIGRldGVybWluZXMgaWYgYSBjb250YWluZXIgc2hvdWxkIGJlIHJ1biBhcyBhICdIb3N0IFByb2Nlc3MnIGNvbnRhaW5lci4gVGhpcyBmaWVsZCBpcyBhbHBoYS1sZXZlbCBhbmQgd2lsbCBvbmx5IGJlIGhvbm9yZWQgYnkgY29tcG9uZW50cyB0aGF0IGVuYWJsZSB0aGUgV2luZG93c0hvc3RQcm9jZXNzQ29udGFpbmVycyBmZWF0dXJlIGZsYWcuIFNldHRpbmcgdGhpcyBmaWVsZCB3aXRob3V0IHRoZSBmZWF0dXJlIGZsYWcgd2lsbCByZXN1bHQgaW4gZXJyb3JzIHdoZW4gdmFsaWRhdGluZyB0aGUgUG9kLiBBbGwgb2YgYSBQb2QncyBjb250YWluZXJzIG11c3QgaGF2ZSB0aGUgc2FtZSBlZmZlY3RpdmUgSG9zdFByb2Nlc3MgdmFsdWUgKGl0IGlzIG5vdCBhbGxvd2VkIHRvIGhhdmUgYSBtaXggb2YgSG9zdFByb2Nlc3MgY29udGFpbmVycyBhbmQgbm9uLUhvc3RQcm9jZXNzIGNvbnRhaW5lcnMpLiAgSW4gYWRkaXRpb24sIGlmIEhvc3RQcm9jZXNzIGlzIHRydWUgdGhlbiBIb3N0TmV0d29yayBtdXN0IGFsc28gYmUgc2V0IHRvIHRydWUuIiwidHlwZSI6ImJvb2xlYW4ifSwicnVuQXNVc2VyTmFtZSI6eyJkZXNjcmlwdGlvbiI6IlRoZSBVc2VyTmFtZSBpbiBXaW5kb3dzIHRvIHJ1biB0aGUgZW50cnlwb2ludCBvZiB0aGUgY29udGFpbmVyIHByb2Nlc3MuIERlZmF1bHRzIHRvIHRoZSB1c2VyIHNwZWNpZmllZCBpbiBpbWFnZSBtZXRhZGF0YSBpZiB1bnNwZWNpZmllZC4gTWF5IGFsc28gYmUgc2V0IGluIFBvZFNlY3VyaXR5Q29udGV4dC4gSWYgc2V0IGluIGJvdGggU2VjdXJpdHlDb250ZXh0IGFuZCBQb2RTZWN1cml0eUNvbnRleHQsIHRoZSB2YWx1ZSBzcGVjaWZpZWQgaW4gU2VjdXJpdHlDb250ZXh0IHRha2VzIHByZWNlZGVuY2UuIiwidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9LCJ0b2xlcmF0aW9ucyI6eyJpdGVtcyI6eyJkZXNjcmlwdGlvbiI6IlRoZSBwb2QgdGhpcyBUb2xlcmF0aW9uIGlzIGF0dGFjaGVkIHRvIHRvbGVyYXRlcyBhbnkgdGFpbnQgdGhhdCBtYXRjaGVzIHRoZSB0cmlwbGUgXHUwMDNja2V5LHZhbHVlLGVmZmVjdFx1MDAzZSB1c2luZyB0aGUgbWF0Y2hpbmcgb3BlcmF0b3IgXHUwMDNjb3BlcmF0b3JcdTAwM2UuIiwicHJvcGVydGllcyI6eyJlZmZlY3QiOnsiZGVzY3JpcHRpb24iOiJFZmZlY3QgaW5kaWNhdGVzIHRoZSB0YWludCBlZmZlY3QgdG8gbWF0Y2guIEVtcHR5IG1lYW5zIG1hdGNoIGFsbCB0YWludCBlZmZlY3RzLiBXaGVuIHNwZWNpZmllZCwgYWxsb3dlZCB2YWx1ZXMgYXJlIE5vU2NoZWR1bGUsIFByZWZlck5vU2NoZWR1bGUgYW5kIE5vRXhlY3V0ZS4iLCJ0eXBlIjoic3RyaW5nIn0sImtleSI6eyJkZXNjcmlwdGlvbiI6IktleSBpcyB0aGUgdGFpbnQga2V5IHRoYXQgdGhlIHRvbGVyYXRpb24gYXBwbGllcyB0by4gRW1wdHkgbWVhbnMgbWF0Y2ggYWxsIHRhaW50IGtleXMuIElmIHRoZSBrZXkgaXMgZW1wdHksIG9wZXJhdG9yIG11c3QgYmUgRXhpc3RzOyB0aGlzIGNvbWJpbmF0aW9uIG1lYW5zIHRvIG1hdGNoIGFsbCB2YWx1ZXMgYW5kIGFsbCBrZXlzLiIsInR5cGUiOiJzdHJpbmcifSwib3BlcmF0b3IiOnsiZGVzY3JpcHRpb24iOiJPcGVyYXRvciByZXByZXNlbnRzIGEga2V5J3MgcmVsYXRpb25zaGlwIHRvIHRoZSB2YWx1ZS4gVmFsaWQgb3BlcmF0b3JzIGFyZSBFeGlzdHMgYW5kIEVxdWFsLiBEZWZhdWx0cyB0byBFcXVhbC4gRXhpc3RzIGlzIGVxdWl2YWxlbnQgdG8gd2lsZGNhcmQgZm9yIHZhbHVlLCBzbyB0aGF0IGEgcG9kIGNhbiB0b2xlcmF0ZSBhbGwgdGFpbnRzIG9mIGEgcGFydGljdWxhciBjYXRlZ29yeS4iLCJ0eXBlIjoic3RyaW5nIn0sInRvbGVyYXRpb25TZWNvbmRzIjp7ImRlc2NyaXB0aW9uIjoiVG9sZXJhdGlvblNlY29uZHMgcmVwcmVzZW50cyB0aGUgcGVyaW9kIG9mIHRpbWUgdGhlIHRvbGVyYXRpb24gKHdoaWNoIG11c3QgYmUgb2YgZWZmZWN0IE5vRXhlY3V0ZSwgb3RoZXJ3aXNlIHRoaXMgZmllbGQgaXMgaWdub3JlZCkgdG9sZXJhdGVzIHRoZSB0YWludC4gQnkgZGVmYXVsdCwgaXQgaXMgbm90IHNldCwgd2hpY2ggbWVhbnMgdG9sZXJhdGUgdGhlIHRhaW50IGZvcmV2ZXIgKGRvIG5vdCBldmljdCkuIFplcm8gYW5kIG5lZ2F0aXZlIHZhbHVlcyB3aWxsIGJlIHRyZWF0ZWQgYXMgMCAoZXZpY3QgaW1tZWRpYXRlbHkpIGJ5IHRoZSBzeXN0ZW0uIiwiZm9ybWF0IjoiaW50NjQiLCJ0eXBlIjoiaW50ZWdlciJ9LCJ2YWx1ZSI6eyJkZXNjcmlwdGlvbiI6IlZhbHVlIGlzIHRoZSB0YWludCB2YWx1ZSB0aGUgdG9sZXJhdGlvbiBtYXRjaGVzIHRvLiBJZiB0aGUgb3BlcmF0b3IgaXMgRXhpc3RzLCB0aGUgdmFsdWUgc2hvdWxkIGJlIGVtcHR5LCBvdGhlcndpc2UganVzdCBhIHJlZ3VsYXIgc3RyaW5nLiIsInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpbWFnZSIsInBvcnQiXSwidHlwZSI6Im9iamVjdCJ9LCJkZWxldGVSb3V0ZVBhdGgiOnsidHlwZSI6InN0cmluZyJ9LCJnZXRJbnRlcmZhY2VQYXRoIjp7InR5cGUiOiJzdHJpbmcifSwiaXBhbVR5cGUiOnsidHlwZSI6InN0cmluZyJ9LCJqb2luUGF0aCI6eyJ0eXBlIjoic3RyaW5nIn0sImxvZ0xldmVsIjp7InR5cGUiOiJpbnRlZ2VyIn0sImxvbmdSZWNvbmNpbGVNaW51dGVzIjp7InR5cGUiOiJpbnRlZ2VyIn0sIm5vcm1hbFJlY29uY2lsZU1pbnV0ZXMiOnsidHlwZSI6ImludGVnZXIifSwidXJnZW50UmVjb25jaWxlU2Vjb25kcyI6eyJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsiY25pVHlwZSIsImRhZW1vbiIsImdldEludGVyZmFjZVBhdGgiLCJpcGFtVHlwZSIsImpvaW5QYXRoIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiQ29uZmlnU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIENvbmZpZyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImRldmljZWNsYXNzZXMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiRGV2aWNlQ2xhc3MiLCJsaXN0S2luZCI6IkRldmljZUNsYXNzTGlzdCIsInBsdXJhbCI6ImRldmljZWNsYXNzZXMiLCJzaW5ndWxhciI6ImRldmljZWNsYXNzIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiRGV2aWNlQ2xhc3MgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGRldmljZWNsYXNzZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1NwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInByb3BlcnRpZXMiOnsiaWRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsicHJvZHVjdHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInByb2R1Y3RzIiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpZHMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Imhvc3RpbnRlcmZhY2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJsaXN0S2luZCI6Ikhvc3RJbnRlcmZhY2VMaXN0IiwicGx1cmFsIjoiaG9zdGludGVyZmFjZXMiLCJzaW5ndWxhciI6Imhvc3RpbnRlcmZhY2UifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwY2lBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwicHJvZHVjdCI6eyJ0eXBlIjoic3RyaW5nIn0sInZlbmRvciI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0SVAiLCJpbnRlcmZhY2VOYW1lIiwibmV0QWRkcmVzcyIsInBjaUFkZHJlc3MiLCJwcm9kdWN0IiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJob3N0TmFtZSIsImludGVyZmFjZXMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIEhvc3RJbnRlcmZhY2UiLCJwcm9wZXJ0aWVzIjp7InN0YXQiOnsicHJvcGVydGllcyI6eyJjb3VudCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibGFzdFJ4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RSeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFRpbWVzdGFtcCI6eyJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VHhEcm9wIjp7InR5cGUiOiJpbnRlZ2VyIn0sInJ4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwicnhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn0sInR4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJjb3VudCIsImludGVyZmFjZU5hbWUiLCJsYXN0UngiLCJsYXN0UnhEcm9wIiwibGFzdFRpbWVzdGFtcCIsImxhc3RUeCIsImxhc3RUeERyb3AiLCJyeERyb3BSYXRlIiwicnhSYXRlIiwidHhEcm9wUmF0ZSIsInR4UmF0ZSJdLCJ0eXBlIjoib2JqZWN0In19LCJyZXF1aXJlZCI6WyJzdGF0Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImlwcG9vbHMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiSVBQb29sIiwibGlzdEtpbmQiOiJJUFBvb2xMaXN0IiwicGx1cmFsIjoiaXBwb29scyIsInNpbmd1bGFyIjoiaXBwb29sIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBpcHBvb2xzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIElQUG9vbCIsInByb3BlcnRpZXMiOnsiYWxsb2NhdGlvbnMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJhZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwiaW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwibmFtZXNwYWNlIjp7InR5cGUiOiJzdHJpbmcifSwicG9kIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFkZHJlc3MiLCJpbmRleCIsIm5hbWVzcGFjZSIsInBvZCJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJleGNsdWRlcyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJuZXRBdHRhY2hEZWYiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RDSURSIjp7ImRlc2NyaXB0aW9uIjoiRm9vIGlzIGFuIGV4YW1wbGUgZmllbGQgb2YgSVBQb29sLiBFZGl0IGlwcG9vbF90eXBlcy5nbyB0byByZW1vdmUvdXBkYXRlIiwidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJhbGxvY2F0aW9ucyIsImV4Y2x1ZGVzIiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwibmV0QXR0YWNoRGVmIiwicG9kQ0lEUiIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIElQUG9vbCIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9tZXRyaWNzIl0sInZlcmJzIjpbImdldCJdfV19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlIn0sInNwZWMiOnsicG9ydHMiOlt7Im5hbWUiOiJodHRwcyIsInBvcnQiOjg0NDMsInRhcmdldFBvcnQiOiJodHRwcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.0.5
  name: ""
- image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:d4df17d23659a3b1fcbd3abc5b3548d5b6eadd43e6e2fa8b3e77b71992de62dd
  name: ""
schema: olm.bundle
---
image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:68a58d75492d5781947572c7903746315fe4b4aa0fb8eafc3970e390a6543729
name: multi-nic-cni-operator.v1.1.0
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.1.0
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibGlzdEtpbmQiOiJNdWx0aU5pY05ldHdvcmtMaXN0IiwicGx1cmFsIjoibXVsdGluaWNuZXR3b3JrcyIsInNpbmd1bGFyIjoibXVsdGluaWNuZXR3b3JrIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIE11bHRpTmljTmV0d29yayBNYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbCBTdWJuZXQgaXMgZ2xvYmFsIHN1Ym5ldCwgZGVmYXVsdDogMTcyLjMwLjAuMC8xNiBJUEFNIGlzIGlwYW0gc3BlY2lmaWNhdGlvbiBNYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uIFBvbGljeSBpcyBnZW5lcmFsIHBvbGljeSBvZiB0aGUgcG9vbCIsInByb3BlcnRpZXMiOnsiYXR0YWNoUG9saWN5Ijp7ImRlc2NyaXB0aW9uIjoiQXNzaWdubWVudFBvbGljeSBkZWZpbmVzIHRoZSBwb2xpY3kgdG8gc2VsZWN0IHRoZSBOSUNzIGZyb20gdGhlIHBvb2wgU3RyYXRlZ3kgaXMgb25lIG9mIE5vbmUsIENvc3RPcHQsIFBlcmZPcHQsIFFvU0NsYXNzIFRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHMgcmVxdWlyZWQgZm9yIENvc3RPcHQgYW5kIFBlcmZPcHQiLCJwcm9wZXJ0aWVzIjp7InN0cmF0ZWd5Ijp7InR5cGUiOiJzdHJpbmcifSwidGFyZ2V0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0cmF0ZWd5Il0sInR5cGUiOiJvYmplY3QifSwiaXBhbSI6eyJ0eXBlIjoic3RyaW5nIn0sIm1hc3Rlck5ldHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwibXVsdGlOSUNJUEFNIjp7InR5cGUiOiJib29sZWFuIn0sIm5hbWVzcGFjZXMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwicGx1Z2luIjp7ImRlc2NyaXB0aW9uIjoicmVmZXJlbmNlOiBnaXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvY25pL3BrZy90eXBlcyIsInByb3BlcnRpZXMiOnsiYXJncyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJvYmplY3QifSwiY2FwYWJpbGl0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJib29sZWFuIn0sInR5cGUiOiJvYmplY3QifSwiY25pVmVyc2lvbiI6eyJ0eXBlIjoic3RyaW5nIn0sImRucyI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImRvbWFpbiI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWVzZXJ2ZXJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm9wdGlvbnMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwic2VhcmNoIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY25pVmVyc2lvbiIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaXBhbSIsInBsdWdpbiJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29ya1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBNdWx0aU5pY05ldHdvcmsiLCJwcm9wZXJ0aWVzIjp7ImNvbXB1dGVSZXN1bHRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sIm51bU9mSG9zdHMiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbIm5ldEFkZHJlc3MiLCJudW1PZkhvc3RzIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZ1N0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn0sImRpc2NvdmVyeSI6eyJwcm9wZXJ0aWVzIjp7ImNpZHJQcm9jZXNzZWQiOnsidHlwZSI6ImludGVnZXIifSwiZXhpc3REYWVtb24iOnsidHlwZSI6ImludGVnZXIifSwiaW5mb0F2YWlsYWJsZSI6eyJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsiY2lkclByb2Nlc3NlZCIsImV4aXN0RGFlbW9uIiwiaW5mb0F2YWlsYWJsZSJdLCJ0eXBlIjoib2JqZWN0In0sImxhc3RTeW5jVGltZSI6eyJmb3JtYXQiOiJkYXRlLXRpbWUiLCJ0eXBlIjoic3RyaW5nIn0sIm1lc3NhZ2UiOnsidHlwZSI6InN0cmluZyJ9LCJyb3V0ZVN0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJjb21wdXRlUmVzdWx0cyIsImNvbmZpZ1N0YXR1cyIsImRpc2NvdmVyeSIsImxhc3RTeW5jVGltZSIsIm1lc3NhZ2UiLCJyb3V0ZVN0YXR1cyJdLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNpZHJzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkNJRFIiLCJsaXN0S2luZCI6IkNJRFJMaXN0IiwicGx1cmFsIjoiY2lkcnMiLCJzaW5ndWxhciI6ImNpZHIifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQ0lEUiIsInByb3BlcnRpZXMiOnsiY2lkciI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Imhvc3RzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaG9zdEluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImlwcG9vbCI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdElQIiwiaG9zdEluZGV4IiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwicG9kQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbnRlcmZhY2VJbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuZXRBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbkNJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdHMiLCJpbnRlcmZhY2VJbmRleCIsIm5ldEFkZHJlc3MiLCJ2bGFuQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWciOnsiZGVzY3JpcHRpb24iOiJJTlNFUlQgQURESVRJT05BTCBTUEVDIEZJRUxEUyAtIGRlc2lyZWQgc3RhdGUgb2YgY2x1c3RlciBJbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImRldmljZWNsYXNzZXMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiRGV2aWNlQ2xhc3MiLCJsaXN0S2luZCI6IkRldmljZUNsYXNzTGlzdCIsInBsdXJhbCI6ImRldmljZWNsYXNzZXMiLCJzaW5ndWxhciI6ImRldmljZWNsYXNzIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiRGV2aWNlQ2xhc3MgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGRldmljZWNsYXNzZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1NwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInByb3BlcnRpZXMiOnsiaWRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsicHJvZHVjdHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInByb2R1Y3RzIiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpZHMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Imhvc3RpbnRlcmZhY2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJsaXN0S2luZCI6Ikhvc3RJbnRlcmZhY2VMaXN0IiwicGx1cmFsIjoiaG9zdGludGVyZmFjZXMiLCJzaW5ndWxhciI6Imhvc3RpbnRlcmZhY2UifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwY2lBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwicHJvZHVjdCI6eyJ0eXBlIjoic3RyaW5nIn0sInZlbmRvciI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0SVAiLCJpbnRlcmZhY2VOYW1lIiwibmV0QWRkcmVzcyIsInBjaUFkZHJlc3MiLCJwcm9kdWN0IiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJob3N0TmFtZSIsImludGVyZmFjZXMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIEhvc3RJbnRlcmZhY2UiLCJwcm9wZXJ0aWVzIjp7InN0YXQiOnsicHJvcGVydGllcyI6eyJjb3VudCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibGFzdFJ4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RSeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFRpbWVzdGFtcCI6eyJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VHhEcm9wIjp7InR5cGUiOiJpbnRlZ2VyIn0sInJ4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwicnhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn0sInR4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJjb3VudCIsImludGVyZmFjZU5hbWUiLCJsYXN0UngiLCJsYXN0UnhEcm9wIiwibGFzdFRpbWVzdGFtcCIsImxhc3RUeCIsImxhc3RUeERyb3AiLCJyeERyb3BSYXRlIiwicnhSYXRlIiwidHhEcm9wUmF0ZSIsInR4UmF0ZSJdLCJ0eXBlIjoib2JqZWN0In19LCJyZXF1aXJlZCI6WyJzdGF0Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImlwcG9vbHMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiSVBQb29sIiwibGlzdEtpbmQiOiJJUFBvb2xMaXN0IiwicGx1cmFsIjoiaXBwb29scyIsInNpbmd1bGFyIjoiaXBwb29sIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBpcHBvb2xzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIElQUG9vbCIsInByb3BlcnRpZXMiOnsiYWxsb2NhdGlvbnMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJhZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwiaW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwibmFtZXNwYWNlIjp7InR5cGUiOiJzdHJpbmcifSwicG9kIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFkZHJlc3MiLCJpbmRleCIsIm5hbWVzcGFjZSIsInBvZCJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJleGNsdWRlcyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJuZXRBdHRhY2hEZWYiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RDSURSIjp7ImRlc2NyaXB0aW9uIjoiRm9vIGlzIGFuIGV4YW1wbGUgZmllbGQgb2YgSVBQb29sLiBFZGl0IGlwcG9vbF90eXBlcy5nbyB0byByZW1vdmUvdXBkYXRlIiwidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJhbGxvY2F0aW9ucyIsImV4Y2x1ZGVzIiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwibmV0QXR0YWNoRGVmIiwicG9kQ0lEUiIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIElQUG9vbCIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoib3BlcmF0b3JzLmNvcmVvcy5jb20vdjFhbHBoYTEiLCJraW5kIjoiQ2x1c3RlclNlcnZpY2VWZXJzaW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiYWxtLWV4YW1wbGVzIjoiW1xuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiQ0lEUlwiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgIFwibm90ZVwiOiBcIlRoaXMgcmVzb3VyY2Ugd2lsbCBiZSBhdXRvLWdlbmVyYXRlZCBhbmQgY29udHJvbGxlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5EbyBub3QgY3JlYXRlL21vZGlmeS5cXG5cIlxuICAgICAgfSxcbiAgICAgIFwibmFtZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDNcIixcbiAgICAgIFwibmFtZXNwYWNlXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1zeXN0ZW1cIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiY2lkclwiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4yNDQuMC4xNjhcIixcbiAgICAgICAgICAgICAgXCJob3N0SW5kZXhcIjogMCxcbiAgICAgICAgICAgICAgXCJob3N0TmFtZVwiOiBcIm5vZGUtMVwiLFxuICAgICAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgxXCIsXG4gICAgICAgICAgICAgIFwiaXBwb29sXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sMy0xOTIuMTY4LjAuMC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjAuMC8yNlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjI0NC4wLjE2N1wiLFxuICAgICAgICAgICAgICBcImhvc3RJbmRleFwiOiAxLFxuICAgICAgICAgICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0yXCIsXG4gICAgICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDFcIixcbiAgICAgICAgICAgICAgXCJpcHBvb2xcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzLTE5Mi4xNjguMC42NC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjAuNjQvMjZcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJpbnRlcmZhY2VJbmRleFwiOiAwLFxuICAgICAgICAgIFwibmV0QWRkcmVzc1wiOiBcIjEwLjI0NC4wLjAvMTZcIixcbiAgICAgICAgICBcInZsYW5DSURSXCI6IFwiMTkyLjE2OC4wLjAvMThcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJob3N0c1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiaG9zdElQXCI6IFwiMTAuMC4wLjE2OFwiLFxuICAgICAgICAgICAgICBcImhvc3RJbmRleFwiOiAwLFxuICAgICAgICAgICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDJcIixcbiAgICAgICAgICAgICAgXCJpcHBvb2xcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzLTE5Mi4xNjguNjQuMC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjY0LjAvMjZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4wLjAuMTY3XCIsXG4gICAgICAgICAgICAgIFwiaG9zdEluZGV4XCI6IDEsXG4gICAgICAgICAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTJcIixcbiAgICAgICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMlwiLFxuICAgICAgICAgICAgICBcImlwcG9vbFwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDMtMTkyLjE2OC42NC42NC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjY0LjY0LzI2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiaW50ZXJmYWNlSW5kZXhcIjogMSxcbiAgICAgICAgICBcIm5ldEFkZHJlc3NcIjogXCIxMC4wLjAuMC8xNlwiLFxuICAgICAgICAgIFwidmxhbkNJRFJcIjogXCIxOTIuMTY4LjY0LjAvMThcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJjb25maWdcIjoge1xuICAgICAgICBcImhvc3RCbG9ja1wiOiA4LFxuICAgICAgICBcImludGVyZmFjZUJsb2NrXCI6IDIsXG4gICAgICAgIFwibWFzdGVyTmV0c1wiOiBbXSxcbiAgICAgICAgXCJuYW1lXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sM1wiLFxuICAgICAgICBcInN1Ym5ldFwiOiBcIjE5Mi4xNjguMC4wLzE2XCIsXG4gICAgICAgIFwidHlwZVwiOiBcImlwdmxhblwiLFxuICAgICAgICBcInZsYW5Nb2RlXCI6IFwibDNcIlxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIkNJRFJcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICBcIm5vdGVcIjogXCJUaGlzIHJlc291cmNlIHdpbGwgYmUgYXV0by1nZW5lcmF0ZWQgYW5kIGNvbnRyb2xsZWQgYnkgbXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIuXFxuRG8gbm90IGNyZWF0ZS9tb2RpZnkuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJpcHZsYW5sM1wiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJjaWRyXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiaG9zdHNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjI0NC4wLjE2OFwiLFxuICAgICAgICAgICAgICBcImhvc3RJbmRleFwiOiAwLFxuICAgICAgICAgICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDFcIixcbiAgICAgICAgICAgICAgXCJpcHBvb2xcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzLTE5Mi4xNjguMC4wLTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguMC4wLzI2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiaG9zdElQXCI6IFwiMTAuMjQ0LjAuMTY3XCIsXG4gICAgICAgICAgICAgIFwiaG9zdEluZGV4XCI6IDEsXG4gICAgICAgICAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTJcIixcbiAgICAgICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMVwiLFxuICAgICAgICAgICAgICBcImlwcG9vbFwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDMtMTkyLjE2OC4wLjY0LTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguMC42NC8yNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImludGVyZmFjZUluZGV4XCI6IDAsXG4gICAgICAgICAgXCJuZXRBZGRyZXNzXCI6IFwiMTAuMjQ0LjAuMC8xNlwiLFxuICAgICAgICAgIFwidmxhbkNJRFJcIjogXCIxOTIuMTY4LjAuMC8xOFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4wLjAuMTY4XCIsXG4gICAgICAgICAgICAgIFwiaG9zdEluZGV4XCI6IDAsXG4gICAgICAgICAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTFcIixcbiAgICAgICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMlwiLFxuICAgICAgICAgICAgICBcImlwcG9vbFwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDMtMTkyLjE2OC42NC4wLTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguNjQuMC8yNlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjAuMC4xNjdcIixcbiAgICAgICAgICAgICAgXCJob3N0SW5kZXhcIjogMSxcbiAgICAgICAgICAgICAgXCJob3N0TmFtZVwiOiBcIm5vZGUtMlwiLFxuICAgICAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgyXCIsXG4gICAgICAgICAgICAgIFwiaXBwb29sXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sMy0xOTIuMTY4LjY0LjY0LTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguNjQuNjQvMjZcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJpbnRlcmZhY2VJbmRleFwiOiAxLFxuICAgICAgICAgIFwibmV0QWRkcmVzc1wiOiBcIjEwLjAuMC4wLzE2XCIsXG4gICAgICAgICAgXCJ2bGFuQ0lEUlwiOiBcIjE5Mi4xNjguNjQuMC8xOFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImNvbmZpZ1wiOiB7XG4gICAgICAgIFwiaG9zdEJsb2NrXCI6IDgsXG4gICAgICAgIFwiaW50ZXJmYWNlQmxvY2tcIjogMixcbiAgICAgICAgXCJtYXN0ZXJOZXRzXCI6IFtdLFxuICAgICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzXCIsXG4gICAgICAgIFwic3VibmV0XCI6IFwiMTkyLjE2OC4wLjAvMTZcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiaXB2bGFuXCIsXG4gICAgICAgIFwidmxhbk1vZGVcIjogXCJsM1wiXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiQ29uZmlnXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgXCJub3RlXCI6IFwiVGhlIHJlc291cmNlIHdpdGggZGVmYXVsdCBzZXR0aW5ncyB3aWxsIGJlIGF1dG8tY3JlYXRlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5QbGVhc2UgbW9kaWZ5IGlmIG5lZWQuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW11bHRpLW5pY2RcIixcbiAgICAgIFwibmFtZXNwYWNlXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1zeXN0ZW1cIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiYWRkUm91dGVQYXRoXCI6IFwiL2FkZGwzXCIsXG4gICAgICBcImNuaVR5cGVcIjogXCJtdWx0aS1uaWNcIixcbiAgICAgIFwiY29udGV4dFRpbWVvdXRNaW51dGVzXCI6IDIsXG4gICAgICBcImRhZW1vblwiOiB7XG4gICAgICAgIFwiZW52XCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJEQUVNT05fUE9SVFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjExMDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlJUX1RBQkxFX1BBVEhcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIvb3B0L3J0X3RhYmxlc1wiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImltYWdlXCI6IFwiZ2hjci5pby9mb3VuZGF0aW9uLW1vZGVsLXN0YWNrL211bHRpLW5pYy1jbmktZGFlbW9uOnYxLjEuMFwiLFxuICAgICAgICBcIm1vdW50c1wiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJob3N0cGF0aFwiOiBcIi92YXIvbGliL2NuaS9iaW5cIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNuaWJpblwiLFxuICAgICAgICAgICAgXCJwb2RwYXRoXCI6IFwiL2hvc3Qvb3B0L2NuaS9iaW5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJob3N0cGF0aFwiOiBcIi92YXIvbGliL2t1YmVsZXQvZGV2aWNlLXBsdWdpbnNcIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImRldmljZS1wbHVnaW5cIixcbiAgICAgICAgICAgIFwicG9kcGF0aFwiOiBcIi92YXIvbGliL2t1YmVsZXQvZGV2aWNlLXBsdWdpbnNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJob3N0cGF0aFwiOiBcIi9ldGMvaXByb3V0ZTIvcnRfdGFibGVzXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJydC10YWJsZXNcIixcbiAgICAgICAgICAgIFwicG9kcGF0aFwiOiBcIi9vcHQvcnRfdGFibGVzXCJcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwicG9ydFwiOiAxMTAwMCxcbiAgICAgICAgXCJyZXNvdXJjZXNcIjoge1xuICAgICAgICAgIFwicmVxdWVzdHNcIjoge1xuICAgICAgICAgICAgXCJjcHVcIjogXCIxMDBtXCIsXG4gICAgICAgICAgICBcIm1lbW9yeVwiOiBcIjUwTWlcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzZWN1cml0eUNvbnRleHRcIjoge1xuICAgICAgICAgIFwicHJpdmlsZWdlZFwiOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImRlbGV0ZVJvdXRlUGF0aFwiOiBcIi9kZWxldGVsM1wiLFxuICAgICAgXCJnZXRJbnRlcmZhY2VQYXRoXCI6IFwiL2ludGVyZmFjZVwiLFxuICAgICAgXCJpcGFtVHlwZVwiOiBcIm11bHRpLW5pYy1pcGFtXCIsXG4gICAgICBcImpvaW5QYXRoXCI6IFwiL2pvaW5cIixcbiAgICAgIFwibG9nTGV2ZWxcIjogNCxcbiAgICAgIFwibG9uZ1JlY29uY2lsZU1pbnV0ZXNcIjogMTAsXG4gICAgICBcIm5vcm1hbFJlY29uY2lsZU1pbnV0ZXNcIjogMSxcbiAgICAgIFwidXJnZW50UmVjb25jaWxlU2Vjb25kc1wiOiA1XG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiQ29uZmlnXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgXCJub3RlXCI6IFwiVGhlIHJlc291cmNlIHdpdGggZGVmYXVsdCBzZXR0aW5ncyB3aWxsIGJlIGF1dG8tY3JlYXRlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5QbGVhc2UgbW9kaWZ5IGlmIG5lZWQuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWNkXCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImFkZFJvdXRlUGF0aFwiOiBcIi9hZGRsM1wiLFxuICAgICAgXCJjbmlUeXBlXCI6IFwibXVsdGktbmljXCIsXG4gICAgICBcImNvbnRleHRUaW1lb3V0TWludXRlc1wiOiAyLFxuICAgICAgXCJkYWVtb25cIjoge1xuICAgICAgICBcImVudlwiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiREFFTU9OX1BPUlRcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIxMTAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJSVF9UQUJMRV9QQVRIXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiL29wdC9ydF90YWJsZXNcIlxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJpbWFnZVwiOiBcImdoY3IuaW8vZm91bmRhdGlvbi1tb2RlbC1zdGFjay9tdWx0aS1uaWMtY25pLWRhZW1vbjp2MS4xLjBcIixcbiAgICAgICAgXCJtb3VudHNcIjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaG9zdHBhdGhcIjogXCIvdmFyL2xpYi9jbmkvYmluXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjbmliaW5cIixcbiAgICAgICAgICAgIFwicG9kcGF0aFwiOiBcIi9ob3N0L29wdC9jbmkvYmluXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaG9zdHBhdGhcIjogXCIvdmFyL2xpYi9rdWJlbGV0L2RldmljZS1wbHVnaW5zXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJkZXZpY2UtcGx1Z2luXCIsXG4gICAgICAgICAgICBcInBvZHBhdGhcIjogXCIvdmFyL2xpYi9rdWJlbGV0L2RldmljZS1wbHVnaW5zXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaG9zdHBhdGhcIjogXCIvZXRjL2lwcm91dGUyL3J0X3RhYmxlc1wiLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicnQtdGFibGVzXCIsXG4gICAgICAgICAgICBcInBvZHBhdGhcIjogXCIvb3B0L3J0X3RhYmxlc1wiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInBvcnRcIjogMTEwMDAsXG4gICAgICAgIFwicmVzb3VyY2VzXCI6IHtcbiAgICAgICAgICBcInJlcXVlc3RzXCI6IHtcbiAgICAgICAgICAgIFwiY3B1XCI6IFwiMTAwbVwiLFxuICAgICAgICAgICAgXCJtZW1vcnlcIjogXCI1ME1pXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic2VjdXJpdHlDb250ZXh0XCI6IHtcbiAgICAgICAgICBcInByaXZpbGVnZWRcIjogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJkZWxldGVSb3V0ZVBhdGhcIjogXCIvZGVsZXRlbDNcIixcbiAgICAgIFwiZ2V0SW50ZXJmYWNlUGF0aFwiOiBcIi9pbnRlcmZhY2VcIixcbiAgICAgIFwiaXBhbVR5cGVcIjogXCJtdWx0aS1uaWMtaXBhbVwiLFxuICAgICAgXCJqb2luUGF0aFwiOiBcIi9qb2luXCIsXG4gICAgICBcImxvZ0xldmVsXCI6IDQsXG4gICAgICBcImxvbmdSZWNvbmNpbGVNaW51dGVzXCI6IDEwLFxuICAgICAgXCJub3JtYWxSZWNvbmNpbGVNaW51dGVzXCI6IDEsXG4gICAgICBcInVyZ2VudFJlY29uY2lsZVNlY29uZHNcIjogNVxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIkRldmljZUNsYXNzXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWhpZ2hzcGVlZFwiLFxuICAgICAgXCJuYW1lc3BhY2VcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLXN5c3RlbVwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJpZHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcIjEwMTlcIixcbiAgICAgICAgICAgIFwiMTAxZFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjE1YjNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcImVmYTBcIixcbiAgICAgICAgICAgIFwiZWZhMVwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjFkMGZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiRGV2aWNlQ2xhc3NcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwibmFtZVwiOiBcImhpZ2hzcGVlZFwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJpZHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcIjEwMTlcIixcbiAgICAgICAgICAgIFwiMTAxZFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjE1YjNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcImVmYTBcIixcbiAgICAgICAgICAgIFwiZWZhMVwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjFkMGZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiSG9zdEludGVyZmFjZVwiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgIFwibm90ZVwiOiBcIlRoaXMgcmVzb3VyY2Ugd2lsbCBiZSBhdXRvLWdlbmVyYXRlZCBhbmQgY29udHJvbGxlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5EbyBub3QgY3JlYXRlL21vZGlmeS5cXG5cIlxuICAgICAgfSxcbiAgICAgIFwibmFtZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3Itbm9kZS0xXCIsXG4gICAgICBcIm5hbWVzcGFjZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3Itc3lzdGVtXCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICBcImludGVyZmFjZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4wLjAuMTY4XCIsXG4gICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMVwiLFxuICAgICAgICAgIFwibmV0QWRkcmVzc1wiOiBcIjEwLjAuMC4wLzE2XCIsXG4gICAgICAgICAgXCJwY2lBZGRyZXNzXCI6IFwiMDAwMDowMDowNC4wXCIsXG4gICAgICAgICAgXCJwcm9kdWN0XCI6IFwiMTAwMFwiLFxuICAgICAgICAgIFwidmVuZG9yXCI6IFwiMWFmNFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjEuMC4xNjhcIixcbiAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgyXCIsXG4gICAgICAgICAgXCJuZXRBZGRyZXNzXCI6IFwiMTAuMS4wLjAvMTZcIixcbiAgICAgICAgICBcInBjaUFkZHJlc3NcIjogXCIwMDAwOjAwOjA1LjBcIixcbiAgICAgICAgICBcInByb2R1Y3RcIjogXCIxMDAwXCIsXG4gICAgICAgICAgXCJ2ZW5kb3JcIjogXCIxYWY0XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIkhvc3RJbnRlcmZhY2VcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICBcIm5vdGVcIjogXCJUaGlzIHJlc291cmNlIHdpbGwgYmUgYXV0by1nZW5lcmF0ZWQgYW5kIGNvbnRyb2xsZWQgYnkgbXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIuXFxuRG8gbm90IGNyZWF0ZS9tb2RpZnkuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJub2RlLTFcIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTFcIixcbiAgICAgIFwiaW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjAuMC4xNjhcIixcbiAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgxXCIsXG4gICAgICAgICAgXCJuZXRBZGRyZXNzXCI6IFwiMTAuMC4wLjAvMTZcIixcbiAgICAgICAgICBcInBjaUFkZHJlc3NcIjogXCIwMDAwOjAwOjA0LjBcIixcbiAgICAgICAgICBcInByb2R1Y3RcIjogXCIxMDAwXCIsXG4gICAgICAgICAgXCJ2ZW5kb3JcIjogXCIxYWY0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaG9zdElQXCI6IFwiMTAuMS4wLjE2OFwiLFxuICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDJcIixcbiAgICAgICAgICBcIm5ldEFkZHJlc3NcIjogXCIxMC4xLjAuMC8xNlwiLFxuICAgICAgICAgIFwicGNpQWRkcmVzc1wiOiBcIjAwMDA6MDA6MDUuMFwiLFxuICAgICAgICAgIFwicHJvZHVjdFwiOiBcIjEwMDBcIixcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjFhZjRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiSVBQb29sXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgXCJub3RlXCI6IFwiVGhpcyByZXNvdXJjZSB3aWxsIGJlIGF1dG8tZ2VuZXJhdGVkIGFuZCBjb250cm9sbGVkIGJ5IG11bHRpLW5pYy1jbmktb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyLlxcbkRvIG5vdCBjcmVhdGUvbW9kaWZ5LlxcblwiXG4gICAgICB9LFxuICAgICAgXCJuYW1lXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sMy0xOTIuMTY4LjAuMC0yNlwiLFxuICAgICAgXCJuYW1lc3BhY2VcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLXN5c3RlbVwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJhbGxvY2F0aW9uc1wiOiBbXSxcbiAgICAgIFwiZXhjbHVkZXNcIjogW10sXG4gICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgxXCIsXG4gICAgICBcIm5ldEF0dGFjaERlZlwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDNcIixcbiAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguMC4wLzI2XCIsXG4gICAgICBcInZsYW5DSURSXCI6IFwiMTkyLjE2OC4wLjAvMThcIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIklQUG9vbFwiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgIFwibm90ZVwiOiBcIlRoaXMgcmVzb3VyY2Ugd2lsbCBiZSBhdXRvLWdlbmVyYXRlZCBhbmQgY29udHJvbGxlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5EbyBub3QgY3JlYXRlL21vZGlmeS5cXG5cIlxuICAgICAgfSxcbiAgICAgIFwibmFtZVwiOiBcImlwdmxhbmwzLTE5Mi4xNjguMC4wLTI2XCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImFsbG9jYXRpb25zXCI6IFtdLFxuICAgICAgXCJleGNsdWRlc1wiOiBbXSxcbiAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTFcIixcbiAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDFcIixcbiAgICAgIFwibmV0QXR0YWNoRGVmXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sM1wiLFxuICAgICAgXCJwb2RDSURSXCI6IFwiMTkyLjE2OC4wLjAvMjZcIixcbiAgICAgIFwidmxhbkNJRFJcIjogXCIxOTIuMTY4LjAuMC8xOFwiXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiTXVsdGlOaWNOZXR3b3JrXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzXCIsXG4gICAgICBcIm5hbWVzcGFjZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3Itc3lzdGVtXCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImlwYW1cIjogXCJ7XFxuICBcXFwidHlwZVxcXCI6IFxcXCJtdWx0aS1uaWMtaXBhbVxcXCIsXFxuICBcXFwiaG9zdEJsb2NrXFxcIjogOCwgXFxuICBcXFwiaW50ZXJmYWNlQmxvY2tcXFwiOiAyLFxcbiAgXFxcInZsYW5Nb2RlXFxcIjogXFxcImwzXFxcIlxcbn1cXG5cIixcbiAgICAgIFwibXVsdGlOSUNJUEFNXCI6IHRydWUsXG4gICAgICBcInBsdWdpblwiOiB7XG4gICAgICAgIFwiYXJnc1wiOiB7XG4gICAgICAgICAgXCJtb2RlXCI6IFwibDNcIlxuICAgICAgICB9LFxuICAgICAgICBcImNuaVZlcnNpb25cIjogXCIwLjMuMFwiLFxuICAgICAgICBcInR5cGVcIjogXCJpcHZsYW5cIlxuICAgICAgfSxcbiAgICAgIFwic3VibmV0XCI6IFwiMTkyLjE2OC4wLjAvMTZcIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIk11bHRpTmljTmV0d29ya1wiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJuYW1lXCI6IFwiaXB2bGFubDNcIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiaXBhbVwiOiBcIntcXG4gIFxcXCJ0eXBlXFxcIjogXFxcIm11bHRpLW5pYy1pcGFtXFxcIixcXG4gIFxcXCJob3N0QmxvY2tcXFwiOiA4LCBcXG4gIFxcXCJpbnRlcmZhY2VCbG9ja1xcXCI6IDIsXFxuICBcXFwidmxhbk1vZGVcXFwiOiBcXFwibDNcXFwiXFxufVxcblwiLFxuICAgICAgXCJtdWx0aU5JQ0lQQU1cIjogdHJ1ZSxcbiAgICAgIFwicGx1Z2luXCI6IHtcbiAgICAgICAgXCJhcmdzXCI6IHtcbiAgICAgICAgICBcIm1vZGVcIjogXCJsM1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY25pVmVyc2lvblwiOiBcIjAuMy4wXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImlwdmxhblwiXG4gICAgICB9LFxuICAgICAgXCJzdWJuZXRcIjogXCIxOTIuMTY4LjAuMC8xNlwiXG4gICAgfVxuICB9XG5dIiwiY2FwYWJpbGl0aWVzIjoiQmFzaWMgSW5zdGFsbCIsImNhdGVnb3JpZXMiOiJOZXR3b3JraW5nIiwiY29udGFpbmVySW1hZ2UiOiJnaGNyLmlvL2ZvdW5kYXRpb24tbW9kZWwtc3RhY2svbXVsdGktbmljLWNuaS1jb250cm9sbGVyOnYxLjEuMCIsImNyZWF0ZWRBdCI6IjIwMjMtMDgtMjJUMDg6NDQ6MzVaIiwib3BlcmF0b3JzLm9wZXJhdG9yZnJhbWV3b3JrLmlvL2J1aWxkZXIiOiJvcGVyYXRvci1zZGstdjEuMjguMCIsIm9wZXJhdG9ycy5vcGVyYXRvcmZyYW1ld29yay5pby9wcm9qZWN0X2xheW91dCI6ImdvLmt1YmVidWlsZGVyLmlvL3YzIn0sIm5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLnYxLjEuMCIsIm5hbWVzcGFjZSI6InBsYWNlaG9sZGVyIn0sInNwZWMiOnsiYXBpc2VydmljZWRlZmluaXRpb25zIjp7fSwiY3VzdG9tcmVzb3VyY2VkZWZpbml0aW9ucyI6eyJvd25lZCI6W3siZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJkaXNwbGF5TmFtZSI6IkNJRFIiLCJraW5kIjoiQ0lEUiIsIm5hbWUiOiJjaWRycy5tdWx0aW5pYy5mbXMuaW8iLCJ2ZXJzaW9uIjoidjEifSx7ImRlc2NyaXB0aW9uIjoiQ29uZmlnIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjb25maWdzIEFQSSIsImRpc3BsYXlOYW1lIjoiQ29uZmlnIiwia2luZCI6IkNvbmZpZyIsIm5hbWUiOiJjb25maWdzLm11bHRpbmljLmZtcy5pbyIsInZlcnNpb24iOiJ2MSJ9LHsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzcyBpcyB0aGUgU2NoZW1hIGZvciB0aGUgZGV2aWNlY2xhc3NlcyBBUEkiLCJkaXNwbGF5TmFtZSI6IkRldmljZSBDbGFzcyIsImtpbmQiOiJEZXZpY2VDbGFzcyIsIm5hbWUiOiJkZXZpY2VjbGFzc2VzLm11bHRpbmljLmZtcy5pbyIsInZlcnNpb24iOiJ2MSJ9LHsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJkaXNwbGF5TmFtZSI6Ikhvc3QgSW50ZXJmYWNlIiwia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJuYW1lIjoiaG9zdGludGVyZmFjZXMubXVsdGluaWMuZm1zLmlvIiwidmVyc2lvbiI6InYxIn0seyJkZXNjcmlwdGlvbiI6IklQUG9vbCBpcyB0aGUgU2NoZW1hIGZvciB0aGUgaXBwb29scyBBUEkiLCJkaXNwbGF5TmFtZSI6IklQUG9vbCIsImtpbmQiOiJJUFBvb2wiLCJuYW1lIjoiaXBwb29scy5tdWx0aW5pYy5mbXMuaW8iLCJ2ZXJzaW9uIjoidjEifSx7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsImRpc3BsYXlOYW1lIjoiTXVsdGkgTmljIE5ldHdvcmsiLCJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIiwidmVyc2lvbiI6InYxIn1dfSwiZGVzY3JpcHRpb24iOiJNdWx0aS1OSUMgQ05JIE9wZXJhdG9yIGhlbHBzIHRvIGF0dGFjaGluZyBzZWNvbmRhcnkgbmV0d29yayBpbnRlcmZhY2VzIHRoYXQgaXMgbGlua2VkIHRvIFxuZGlmZmVyZW50IG5ldHdvcmsgaW50ZXJmYWNlcyBvbiBob3N0IChOSUMpIHRvIHBvZCBwcm92aWRlcyBiZW5lZml0cyBvZiBuZXR3b3JrIHNlZ21lbnRhdGlvbiBcbmFuZCB0b3AtdXAgbmV0d29yayBiYW5kd2lkdGggaW4gdGhlIGNvbnRhaW5lcml6YXRpb24gc3lzdGVtLlxuXG5NdWx0aS1OSUMgQ05JIGlzIHRoZSBDTkkgcGx1Z2luIG9wZXJhdGluZyBvbiB0b3Agb2YgTXVsdHVzIENOSS4gXG5Ib3dldmVyLCBpbnN0ZWFkIG9mIGRlZmluaW5nIGFuZCBoYW5kbGluZyBlYWNoIHNlY29uZGFyeSBuZXR3b3JrIGludGVyZmFjZSBvbmUgYnkgb25lLCBcbnRoaXMgQ05JIGF1dG9tYXRpY2FsbHkgZGlzY292ZXJzIGFsbCBhdmFpbGFibGUgc2Vjb25kYXJ5IGludGVyZmFjZXMgYW5kIGhhbmRsZXMgdGhlbSBhcyBhIE5JQyBwb29sLiBcbldpdGggdGhpcyBtYW5uZXIsIGl0IGNhbiBwcm92aWRlIHRoZSBmb2xsb3dpbmcgYmVuZWZpdHMuXG5cbmkpIENvbW1vbiBzZWNvbmRhcnkgbmV0d29yayBkZWZpbml0aW9uOiBVc2VyIGNhbiBtYW5hZ2Ugb25seSBvbmUgbmV0d29yayBkZWZpbml0aW9uIGZvciBcbiAgIG11bHRpcGxlIHNlY29uZGFyeSBpbnRlcmZhY2VzIHdpdGggYSBjb21tb24gQ05JIG1haW4gcGx1Z2luIHN1Y2ggYXMgaXB2bGFuLCBtYWN2bGFuLCBhbmQgc3ItaW92LlxuXG5paSkgQ29tbW9uIE5BVC1ieXBhc3NpbmcgbmV0d29yayBzb2x1dGlvbjogQWxsIHNlY29uZGFyeSBOSUNzIG9uIGVhY2ggaG9zdCBjYW4gYmUgYXNzaWduZWQgXG4gICAgd2l0aCBub24tY29uZmxpY3QgQ0lEUiBhbmQgbm9uLWNvbmZsaWN0IEwzIHJvdXRpbmcgY29uZmlndXJhdGlvbiB0aGF0IGNhbiBvbWl0IGFuIG92ZXJsYXkgbmV0d29ya2luZyBvdmVyaGVhZC4gXG4gICAgUGFydGljdWxhcnlseSwgdGhlIENOSSBpcyBidWlsdC1pbiB3aXRoIEwzIElQVkxBTiBzb2x1dGlvbiBjb21wb3Npbmcgb2YgdGhlIGZvbGxvd2luZyBmdW5jdGlvbmFsaXRpZXMuXG5cbiAgICAxLiBJbnRlcmZhY2UtaG9zdC1kZXZpc2lvbiBDSURSIENvbXB1dGF0aW9uOiBjb21wdXRlIGFsbG9jYXRpbmcgQ0lEUiByYW5nZSBmb3IgZWFjaCBob3N0IGFuZCBlYWNoIGludGVyZmFjZSBcbiAgICAgICBmcm9tIGEgc2luZ2xlIGdsb2JhbCBzdWJuZXQgd2l0aCB0aGUgbnVtYmVyIG9mIGJpdHMgZm9yIGhvc3RzIGFuZCBmb3IgaW50ZXJmYWNlLlxuICAgIDIuIEwzIEhvc3QgUm91dGUgQ29uZmlndXJhdGlvbjogY29uZmlndXJlIEwzIHJvdXRlcyAobmV4dCBob3AgdmlhIGRldikgaW4gaG9zdCByb3V0ZSB0YWJsZSBhY2NvcmRpbmcgdG8gdGhlIGNvbXB1dGVkIENJRFIuXG4gICAgMy4gRGlzdHJpYnV0ZWQgSVAgQWxsb2NhdGlvbiBNYW5hZ2VtZW50OiBtYW5hZ2UgSVAgYWxsb2NhdGlvbi9kZWFsbG9jYXRpb24gZGlzdHJpYnV0ZWRseSB2aWEgdGhlIGNvbW11bmljYXRpb24gXG4gICAgICAgYmV0d2VlbiBDTkkgcHJvZ3JhbSBhbmQgZGFlbW9uIGF0IGVhY2ggaG9zdC5cblxuaWlpKSBQb2xpY3ktYmFzZWQgc2Vjb25kYXJ5IG5ldHdvcmsgYXR0YWNobWVudDogSW5zdGVhZCBvZiBzdGF0aWNhbGx5IHNldCB0aGUgZGVzaXJlZCBcbiAgICAgaG9zdCdzIG1hc3RlciBpbnRlcmZhY2UgbmFtZSBvbmUgYnkgb25lLCB1c2VyIGNhbiBkZWZpbmUgYSBwb2xpY3kgb24gYXR0YWNoaW5nIG11bHRpcGxlIHNlY29uZGFyeSBuZXR3b3JrIFxuICAgICBpbnRlcmZhY2VzIHN1Y2ggYXMgc3BlY2lmeWluZyBvbmx5IHRoZSBudW1iZXIgb2YgZGVzaXJlZCBpbnRlcmZhY2VzLCBmaWx0ZXJpbmcgb25seSBoaWdoc3BlZWQgTklDcy5cblxuIyMgSW5zdHJ1Y3Rpb25zXG5cblBsZWFzZSBjaGVjayB0aGUgW1VzZXIgR3VpZGVdKGh0dHBzOi8vZm91bmRhdGlvbi1tb2RlbC1zdGFjay5naXRodWIuaW8vbXVsdGktbmljLWNuaS91c2VyX2d1aWRlLykiLCJkaXNwbGF5TmFtZSI6Im11bHRpLW5pYy1jbmktb3BlcmF0b3IiLCJpY29uIjpbeyJiYXNlNjRkYXRhIjoiaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUYwQUFBQlNDQVlBQUFBMko5Z1dBQUFBQVhOU1IwSUFyczRjNlFBQUFJUmxXRWxtVFUwQUtnQUFBQWdBQlFFU0FBTUFBQUFCQUFFQUFBRWFBQVVBQUFBQkFBQUFTZ0ViQUFVQUFBQUJBQUFBVWdFb0FBTUFBQUFCQUFJQUFJZHBBQVFBQUFBQkFBQUFXZ0FBQUFBQUFBQklBQUFBQVFBQUFFZ0FBQUFCQUFPZ0FRQURBQUFBQVFBQkFBQ2dBZ0FFQUFBQUFRQUFBRjJnQXdBRUFBQUFBUUFBQUZJQUFBQUFxcVRSUGdBQUFBbHdTRmx6QUFBTEV3QUFDeE1CQUpxY0dBQUFFaTVKUkVGVWVBSHRuQXU4VkZXOXg5ZmFlK2JNU3lPRjFKdXBnRWdwbU0rUFlYM3lnV2FKMWYya21aV1B5RThrcWZlV2hTU1lHUi9mbVpwSlZ6T1ZoMW40b3JxSXJ5dWdRbVRtSTgxVVRMeUtVQVNDR0p6Wk0yZG05dXI3M3pQN3NHZk9nOW5EM2dmeU0rdkRacSs5OW5yODEyLy8xLysxMWh5bDJxbU5RQnVCTmdKdEJOb0l0QkZvSTlCR29JMUFHNEUyQW0wRUJnU0JURGFibnBiSnBsL2xLbVJ5NlZmUzJmUkZqSndha05HM3cwRjB6RFJsTXRuTVFxM1ZtTVp4akRLUE81MkY0eWd2TnI0YndHZWR6cVZQQTRUeHlxaGhqUHMzWmN5ZGpsTzhpWHhwQU9tSWJpamg4R3d1WStEd045THA5Rmg2VHFkeXFlUDRFS3VrbkFsUGlXNjAwRDNwVENZOVcraG92RmlOQytndHRwVVlLNmNEOW5LdDlYQzNZbzRwRkFvTGZWaFMyZFFKdHJidU0wYXQxTXJNOXN2RDNjMktmTDc0czNCdE50Zm1nNCszbEo3Qml0dW9qWnJrdXVvUmFEMlVWWG05MG1vM09INWFQbC80d2VZVzBlWGlCcjNBUkZMNVRpY0x5VTZBN0ozZ3J2V0I1NWF5bGJMN29XS3h1Q3lWU24zUXR0V3hmTVNtNTZNdFBWRXBQY28xNW11RmZPRldud0JXNURHV3JSOHh4cnpwNUF0Nyt1VlIzaE5SZHRhakw2MVdVTFlQSXVXSVltZnhJZjk5TnR0eHBPU1oyQnRHcVp2OThtYnZsdGJmcE80dXRPK1FOb0IwcTlMNlkzQnA2S1NOZmpqWVNGWWtLN1FDcyt4QnVlQlREcjZQSWg4cjZIRGViSUM0eERiV2pHdzJkUmJpWUdrbTAzR0UwcllvS2xEWE54UWM1NXF3RThubTBsK0dTM2Z4MjJtbGMxNTN5dHhGbjJ2OThpM2MveFBhUHFCMTVXRHF2ZW5YVGVhU0g2WS9tK2UzdUNJSDNCK25wVHRMK2hNb3hOK0lDY2o5U2N6QTc5SFJEZzJkcFhpL3FGRlJlYy9adEhCK3NxRitVNCtBL29MMDBkSFJzYjgweUdZeno4cHpNcHNVQUp0S21WeG1rclNCOXBXSWxDT2trZlRuOTAzNTlLWTZHcWhLQUR6VkE2Nkg1ay8vQlJxR05ORFJ3UVFuVS84NXJyY0VvRXdtODIzcXRMektmR0MyQm5UR1R5RkdGdnZ6SU4vVm5jK2xYK2I5emczejJIYVBtVXh5akJBSGtXWEF2MWlVR0RMN1UzRDB5MTU1THYycnVLbUxDSFFoVXh5M3kyQ0V2OVVBWHdlSC81VHlXQUVQelcxYTIyZDZvR3B6ZmFHek9NM0xGOVV5bHVnNFpSbmhrTThqdjVkd2Q3MTNFZjFYVWVyMVlyNzRRRVRkK2QwNG1JVVg4aUNYS09VdS8wWHd6dHlHS1V1ZGdRN1lCMTJ5aHBuZDZ6ak83NEoxd3VSRGcyNjBHaTVHZ2x0V0R3WUhRdXUvQmdmK0ZhTDI0NHBjSG9wbVF5enR5V1M3bFY1dy9Banl2UU9lUzUrT0hYOEwxb3huS1hualdPbzhWdmxObUpwbjg0d0JGaTZGQnAzdVY4c1FWc0k2Q0FmKy93TEQ3WVMxc3BjWWdueVVuOFBta1hFNkp1S1hHR2RRcFZMeHJKVEFtTEZtUlRFRCtHMEFuc0NKdWd0MDc5T3VHb1UzOEMxb21wakpwSllSTXZoeFdDSkNnNjROWnBuV3A0THRSWmgvZjNXY3J0OWtNdXI5MmtyUGhNTnpFTGN3MzFrNEt5d2gvZFZIWDR6RmpCdlVYNTNHZDlDMGUxa25kMjBzRC9PY1VJbnZJVklTTU5PTk9FckMxVjVpM2s5aFZkNnR0UFVkQ3VJSEhWdjdmd0hoRHI3K3FRdzhGNFZhWkdDV0h1UXB0ZDR0bTI3aVBBcTN6WCs3S3AxZW5zUWJqbUo0cmNyZEhxdjBCNlBkZytKOVIreDhIZ2R6clpQeVpsT2ZuQzVXaVdXcDQ0M1dnN1J4LzhKQTgraFVBRlpFQjg5QXZqNmp0RGtYOElmaEdUcXk5RXpGWElCYi9scXpnOGRWRDFQeWZkQ1ZncTRDSytTbGxzZlJabStZNlQwVlpYVTdZclcrZHFUdkRIa1JvY0h3UmxORDlRYTZ6dVJTVitQWm5RZmhsckN2T0dodzlQK1hkZVZ6cGM3U2M1UzRLTFJydWN1VjVwS1BFVnFoMENiV0JDZStSdHluYVllcGtSaHgrQURnRWx2ckg2cXMrcFBLcTc5VFJ4eStHL21ZSFlqU1Izbk9ON2JiMG5NUDBIRmt6Z2ZvNzlCaEJiazlpdzVXb0RnK3p3ZllOMmtTRDVaVUNldEV2UjNvdUJESXY2dXlXQ2MvZ2RtK3d0eEhaMVQ2RlpWVHo4Q01JOERuL2RWVlZKblV5b1FiUVUvUzRSU3ZJK04rSWU5MHphMTFlaGxPdzZOd3poaSsvbjlCelBXdERCYWlqWmh2b1pkdGlQNmJyZnBQclFwSEtwTVdrL0Y0R2hFM2txYm1KY0Nma0hkS1R6ZmJVYkJlSGVqSXdnL3g4cjF3K1N2SWNCOXdxVjlFZUZ6SGdIZGlLc25HeExSZ0oxSG40U0pJMEY5Q2hOMFpkZDk5OVljT0cybFoxdnNjN2J4V0V5TmUxWHllM1NSVkdJYzE5QUZqMGlOYzExM1QxZFgxWWwvOU5GTmVCem9OY1B4SXh2UE92S3ovSHpoMElNY2tIRnVDNDJQalF1Qk93VlZZSGViRGpCMDc2QkxXMEZiaVpzYnlnbWZzWnhtVjFmY0IvdGRWWjlVbkVRd2NSNjBFZks2dFQzV2c4d1ZmVGlReXE1bjBVRno1Y3pBUEpRNGhhU2ZMVmxPOW5ER1RLUCtKbDQvaFAxRmVyT0JMWXVpNlI1YzRQd2NwWlMva2hWZ2kvNENobG5NL0VLYjZEREw4TVVjVkR1VjVJMWVreVdyb2pWMHJJM0VJTEJack9scDZBUUdobVlnVHpDNjlMMFM5aWdkMlMwT2JmOXZIaExhdmhzRXl5TEk1V0RsRGNZQStwa3hoSkt2c1JWYjFTQmpnditPWVhCMm55d0FveWR0d2IzZkUxN2tjZ3NaV0ZRZGtHUFVINDZwVHFPS2JTSmJFb1MzTDdHZU05VGJ5OXhIZU5idUJJRU1OWkxMWWhKN0puRVJuYlU3R0hBTGdKY0NlU0tGbmhTRkdWcVd5NW56TXhQbXN1SEdVWDdhNVFUUzVIcUJMdDNDeldDZTM0KzRlYmJTRmMxVEJPU3I5d1I5U2xJNmRzTzdtR2JrTFQwQWRwcFhEbDdtUXR0ZjU5YmFiZTFidENnT2QzcE1lQ0srS2ozZUM3MXpscnJZSks5S21jVk1tV0szbGZLK2cxM3BiandWemJ5ODlENUtOVzhyM1FOeThpVWMwSHhrMURBSS9DWlhYc3N2K2RxR3pNTE9YZHR1c0NQa0JndDd3NjR4YkZ1NnRKcDJZQzhQc0RuT2RHTFRXaUxsOFZTcXdDcDZ2MVl6MDFoL292UTZFOHpRUit2ZUFvbWRZbGtkUnlWTTBvbmhGRDdEUks4dHhGdGQyNDZFQ2JKVVdvMHFzMkNlaHpVdVpqSFVOTkYvTGRRZTY2eHJpb3krd0ovQnA1bmNxREZYUnFoS0xQeElhZEtLTU9BaGlPbGF1Z1BKdXpTNldEZzdVRkk5ek9ENVhtMWRUTjFaSm5yTXhueVVtdjdpcEJoRlZrckFzWU8vSCtGK2p5d3VoblZRMWk0bFBuK1YwbHA2S2FLaTZia0tEN2xGVjdhSnEwOWQxUitqQWsvR0JnSC9kK3o0Zk9wajRZYnlOQlhTTUFMcnZkV3pEenRFRURJSmZFR1U2aVFEZUxzVFBYNFVCWmhLNGU5VnZJWHV4ZHRJK2szY2pXTUJyaVkvY3l5N1dmUDk5Mkh0bzBBbXJMVVdHSDgrU1BKL0JIdUR5dUJwWmZnWXFkVStlMTJCK0RlUGV5MGVodENFaHJuNElIckdZWnY1UXNqRDlmRzkzVnRoamxNdlZJeUUyeithYjNRQ05OYjJnbGEzMFZ6R241eEJ0UFkwR1RjMHoySEdqblI1ODEyc2VrL0pHWHZ3RDFqbWNnWi9Edkx3SzRPNkNDMlo2RFl3N2pidVlsUko1Yk9ZS1RiUTNUb2ovaE5ORFZPK3VTdmo2Y0FHY0FwRTVOeXZqZnBhdk53VjV2d2tHK3lLTU5ybTdjb2hNYUU2bjczVWxWZjVrd3RqM0F2eElaV2x2WUlncGMwVHQwa0srK0Q4aHhxZXFTOVBRM3o3VUVOMmNybFVIb21Sc3M0MjFOcE1RVEpaUjdqWDV6cUlmVVp6SFdjem40ZmI1bHRHeVFxL2s2bmNsTlk3WEN1aEtZdW9TNHVWNEhKc2M5cjVzY213d3JuNkFaZnFHUHdCeWNKU2R0QzZBbkk5UzVzSnFpeXNWY3dXeWtzM3JZS3FHN0lNbFVlZFpkaVpiN1hSbnpOMEZZZnN2Ry9lT1lCdmsrZjE0NlJ2Zy85MG9IOHdscDhHYVRpMkJYdXU5SzUvditpMTV1ZXFTbklPQkMzN05Fa3dIRnZZSTRqY253MmtuOEhFZTM5d2dmazVIMkswRzlSdFJsUFVlNldZaWVzMUJ2d1RCaGlUUlZTV2xuZzFVMmhrUkk1dmtJaG8zQmNxYnltNE42SDBOc0NQZTNPMkFUYmpPM0ZFcHVXSzMyM2JDbm9ZNE9oRko4a3VlUjNEVnpNcjRPWjJ4akpOM3p1WWVLcUdySnJOQ3I4SzMraEZlK0F1czB1VjBzQU9tOGEySXJDUnkvaUdlUTVuSFFrRGtvS044UGtPL1F5UldnL04wT3ZtcXZPdFNwM0F1NWxtQUh3M1JQMElweVFUa05kdHBMZW01YXZNWS8zYzZuZW1Ja2RPZ2VYOVc2WXVjQkhzSlV2ZGl5UGVLTXVXb3RpL25RMUVST2VoR202RXNTN0EwaTZBa3FHREtlSHlQd1NHanVjUjdiU0RVWlFWdmR5bVArWHNVVnRwMEtEdVphUjBnRk1KUVQ3QmYvSTFTVittRkdzVUUxRG8reDE3eTBaZzVIWmpWVDJMbGlSNXdhdS9yYnBHRERtR3llU3VZSGxvM1V2WGhFTGxCOUZ6cXJmRGY0K1VTcEN6V0tTdi8zWFp3WDQ4OS9tWG9PSnRqMUVNVGJtbXRSQ0lEZE8xTXNPOCtWc1BoMVRJdHR0Z0V5cWF5RXNiSkhrV2dycGVOSEhTQ1hmTVljQk5FSEVzNDlRckhLWWhNdHhBcGw4TGhZOGl2Ujc2TzU5NGRRaUQvNzVBMllMWDlxWEU1SW5KbXdVQ0hzNlpYRXpxNEZrc3VqNWs1a2ZtUEpoSTdqOU9SbzVoY1YzQ0NrWU5PNTI4eCtEbXc4d3hjNnd2NEFOK0ZBRTlvU3hBSldmNTE2Z3dJNEt5b0ZLYnI2T0NFbzh6ckJML1cwT3JUR0F3YjJkUDlDTXprcjk3YkVFbWl2ejZJamlPQzZjd0pqaHNINkFwdW40MXB1RXJaNW1JR0d3UFk0aE11Z2JDTENhRXVDUklRVTk3VEpVeDY3MFRTL25OTVl3UzYxUThDckErNGxEdk0rQmV3R3R1TzVrQ2VJd085QStkb25LdXRmUzFqTnJoVjUraDFHVkVTdHZnQ2JuTDVwa2xRcVVxVjJCSnlkSGtpa2I2ZmtmZUtiUkE2QnRnY0gzWW91Y0dONDFEdWxiSHE4YzNxVTB1Y2prSTVnREFBeWxBUFIya0FLL2FLWmNxRVNTOG5haWZjSFV3REJuWmcwQUowbkJCNGppc3JTblFsQUk4bERuTTZLL3gyR1VoT0dQQkZ6dkp3TVpXSEd3ZjNNR3NzM01MejRLUktQTVJBdzVGbHk0eHJjQjZNSEpVZ0hLRy83MjFtYktHRGQ5SHI5Y3g1bXN5SEVPUnNsT3JUZklURm1JNUx3RWMydkgvRnBza1RqZk1OemVuc2tJdG50eXRpZWluT3oxanlFa2xVZkduWnlKME55MytmeDVsY21LdmhFMXlRRE44cS9oYm9LQkZWY3Rob0xlSkw5SVMzZ25HZ3JpTFMya1hnYnhwQUh5dytDdGlVZURrZFU5TUxCalpTRnhwMFFKRUFGbDI3VjNQekFKZG5XVnA4WmN4Q3ZTZGUzQ1lwZXpja09lZk8yZnNaelBnVE1oK0xYd25ieWZRcjJHRVQvQmhTYlRQK0ppeVZRd0M4ZzNLSjA3emQxL3hEZzg3Z0Zla01KZEpMVysvM2wvS2w1V040bk5EWHdQMlZveUs2c0MyWDlsZG5nTjROSW1iM0dIUGVtK244a3drOXhhejJnYkVJYVp1SHM5bmt4L1A1MGg5cnRHREFPRXVhb2FzWDRQcHZoalorSERGeUFqLzRta3JOaDdnMlNndVdHR2ZWMWU1OGpGV0luVDBvYWhsMDZXOTdTSWpTYndJd2dLcy81eFYvc2FONnpBNnJMZjF6eXM4d3ltYTFsNDRLUzJ0bzBKRmhQME9Nbk1PZ0IrRmxjaExLM00rZ1ExRW94OG5neEY0dWxKdmtCenB4WW10T01wZm9OZDdSQ2kwb3dtSFNycUxjeVlGempZUzBDK2VDd1JkNWRRU1hoT3A3bUlXVTlabENnMDVQNzdCeGU2eHQ2N3ZoYkFKQVdqeE1FU2x5MkdocXdTbk82bk8wbUY3d2hWZXcrZzVFaWUwVDVSQ2lGQ1haeG0zY3BOZ0kwOG5IN2VDU2M1Q3hnNjVxdXo4SG85RS96ckU2empoYUc0aXh5QUdrUnVJb1VrT29ONnBpVlRhVzh0NnZPRHlkSUMraVNyamZwK0R1anpSSmhGK0VLV0VTRjhGWUp3SDdCTVRJVTM3WEtNd3ZrQjhFbzczSmZaMWZ2ajNjZDBEMnpXUVpWckJtcW4vSWhsOG1RL0RKWVlrampyRk0rZ0JZYitlbjhSZlRZZnRydGo1TzRJSFFYNUt4RWFYM1lCYVBsNThHVVZiMHlqS3BsazR4dENKZW1xSFpBcWg1aUo2akVEbGRjTVNUckZRNVQ0am1WM2NSZXo2WkdNdzl6WFFVWXgzTkNqeGEyL3BnNWJvRjltOFhZSCsvRkJ4UG9vcUpUT0lyeUhiNUxlbEppQnU0bnNYRVB3eUduMklxM2hDc3YwM3p3czAxN2w0RGQrNVhJMGJEK2JVL0w1VlpTVm5UM25EVW5DNjJONXo3UkkxR2J4WEN2UzcwM1F4ZFBad3pjWXprM0x5M2NvWFR4YzNmaWhRTHAzTjA0VlBDRHNaMXI0QjdYcXpSSjZlcGZzRGtaUHRyT0NMaWVVeWR4dkIwcjFOaHBld2wzQlZSU3VDaHo2ZS9BN0N4SkFZK2gwMlVRZlRONzJMMUJQWkZPN0hRemd1T2hiUHpCcytYQnN1MkpoOEw2RXdrSnhpeFBiZW1nVGdNRFMzS2RqaDMrYmwzVTZubVdoZjRnSFdLMmlSTWt1MEJzU0NhVHF4Q2pzK3BBL2lRSy9BbjVPZU9uaUtFbTJmZzhDemkrVnl1eTduV2NzV1M0Z0hkcU9lUjNhZmduNTRKMWIvazh1ejI2czlOT0loditJdEJSaDlaMXVXbWJXck8yYXltbnpyUWt6cnhOSFo1YThCb0xUL3Q2Ylk4NE9iRmlMRkgrY0RIY0pqb3NLMDVxN2dsZ2xxa3VQOXUyWlM5QlhuSjcxSDFXQ2F5Q01SbjBXSTNJbkdUdWR1Y0JMdUpQeU8xdFA5ZStuN0xDbnFVN3lnMmVaTnJwYTR2Zm1RaHA3YU1YVmRhZmZETFBDYnA1ZjMyWGNSeVBSTGcxd2VWbFpmUHNybFFkU2kyeVFUa0J3QkNCNHAwRmI3a2YvaEVWUDllWk5vVmM1Q3l3WDU1SFBkV09DVU1IVU5RVE9OUlZQdXpYN2VKbjVYY0grZXliWkl3MlNUL1BlTHZNT3F2Ui9ITWxiOS93UDFFVmdET3A3a1NSMjlLazMyMXE0VkFZQmZFM3NMZ0tvVER5ekRJZGZUaGk1Z1EzWVdyR2plbmg2Tm1nR3RqYngrR2VEL0UxYnBBVkdzUnl2VDFBU2FoUFZ3YmdUWUNiUVRhQ0xRUmFDUFFScUNOUUJ1Qk5nSnRCTm9JdEJGb0kvRHVSdUJmS2VWblM3VTVaeEFBQUFBQVNVVk9SSzVDWUlJPSIsIm1lZGlhdHlwZSI6ImltYWdlL3BuZyJ9XSwiaW5zdGFsbCI6eyJzcGVjIjp7ImNsdXN0ZXJQZXJtaXNzaW9ucyI6W3sicnVsZXMiOlt7ImFwaUdyb3VwcyI6WyJtdWx0aW5pYy5mbXMuaW8iXSwicmVzb3VyY2VzIjpbImNpZHJzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsiY2lkcnMvZmluYWxpemVycyJdLCJ2ZXJicyI6WyJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJjaWRycy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJjb25maWdzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsiY29uZmlncy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJob3N0aW50ZXJmYWNlcyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0IiwicGF0Y2giLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJtdWx0aW5pYy5mbXMuaW8iXSwicmVzb3VyY2VzIjpbImhvc3RpbnRlcmZhY2VzL2ZpbmFsaXplcnMiXSwidmVyYnMiOlsidXBkYXRlIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsiaG9zdGludGVyZmFjZXMvc3RhdHVzIl0sInZlcmJzIjpbImdldCIsInBhdGNoIiwidXBkYXRlIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsiaXBwb29scyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0IiwicGF0Y2giLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJtdWx0aW5pYy5mbXMuaW8iXSwicmVzb3VyY2VzIjpbImlwcG9vbHMvZmluYWxpemVycyJdLCJ2ZXJicyI6WyJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJpcHBvb2xzL3N0YXR1cyJdLCJ2ZXJicyI6WyJnZXQiLCJwYXRjaCIsInVwZGF0ZSJdfSx7ImFwaUdyb3VwcyI6WyJtdWx0aW5pYy5mbXMuaW8iXSwicmVzb3VyY2VzIjpbIm11bHRpbmljbmV0d29ya3MiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJtdWx0aW5pY25ldHdvcmtzL2ZpbmFsaXplcnMiXSwidmVyYnMiOlsidXBkYXRlIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsibXVsdGluaWNuZXR3b3Jrcy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJwb2RzIiwibm9kZXMiLCJuYW1lc3BhY2VzIl0sInZlcmJzIjpbImdldCIsIndhdGNoIiwibGlzdCIsInBhdGNoIl19LHsiYXBpR3JvdXBzIjpbImFwcHMiXSwicmVzb3VyY2VzIjpbImRhZW1vbnNldHMiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiazhzLmNuaS5jbmNmLmlvIl0sInJlc291cmNlcyI6WyJuZXR3b3JrLWF0dGFjaG1lbnQtZGVmaW5pdGlvbnMiXSwidmVyYnMiOlsiY3JlYXRlIiwidXBkYXRlIiwiZ2V0Iiwid2F0Y2giLCJsaXN0IiwiZGVsZXRlIl19LHsiYXBpR3JvdXBzIjpbInNlY3VyaXR5Lm9wZW5zaGlmdC5pbyJdLCJyZXNvdXJjZU5hbWVzIjpbInByaXZpbGVnZWQiXSwicmVzb3VyY2VzIjpbInNlY3VyaXR5Y29udGV4dGNvbnN0cmFpbnRzIl0sInZlcmJzIjpbInVzZSJdfSx7ImFwaUdyb3VwcyI6WyJhdXRoZW50aWNhdGlvbi5rOHMuaW8iXSwicmVzb3VyY2VzIjpbInRva2VucmV2aWV3cyJdLCJ2ZXJicyI6WyJjcmVhdGUiXX0seyJhcGlHcm91cHMiOlsiYXV0aG9yaXphdGlvbi5rOHMuaW8iXSwicmVzb3VyY2VzIjpbInN1YmplY3RhY2Nlc3NyZXZpZXdzIl0sInZlcmJzIjpbImNyZWF0ZSJdfSx7ImFwaUdyb3VwcyI6WyJzcmlvdm5ldHdvcmsub3BlbnNoaWZ0LmlvIl0sInJlc291cmNlcyI6WyJzcmlvdm5ldHdvcmtub2Rlc3RhdGVzIl0sInZlcmJzIjpbImdldCIsImxpc3QiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJzcmlvdm5ldHdvcmsub3BlbnNoaWZ0LmlvIl0sInJlc291cmNlcyI6WyJzcmlvdm5ldHdvcmtub2RlcG9saWNpZXMiLCJzcmlvdmlibmV0d29ya3MiLCJzcmlvdm5ldHdvcmtzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJ3YXRjaCJdfV0sInNlcnZpY2VBY2NvdW50TmFtZSI6Im11bHRpLW5pYy1jbmktb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyIn1dLCJkZXBsb3ltZW50cyI6W3sibGFiZWwiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIiLCJzcGVjIjp7InJlcGxpY2FzIjoxLCJzZWxlY3RvciI6eyJtYXRjaExhYmVscyI6eyJjb250cm9sLXBsYW5lIjoiY29udHJvbGxlci1tYW5hZ2VyIn19LCJzdHJhdGVneSI6e30sInRlbXBsYXRlIjp7Im1ldGFkYXRhIjp7ImxhYmVscyI6eyJjb250cm9sLXBsYW5lIjoiY29udHJvbGxlci1tYW5hZ2VyIn19LCJzcGVjIjp7ImNvbnRhaW5lcnMiOlt7ImFyZ3MiOlsiLS1zZWN1cmUtbGlzdGVuLWFkZHJlc3M9MC4wLjAuMDo4NDQzIiwiLS11cHN0cmVhbT1odHRwOi8vMTI3LjAuMC4xOjgwODAvIiwiLS1sb2d0b3N0ZGVycj10cnVlIiwiLS12PTEwIl0sImltYWdlIjoiZ2NyLmlvL2t1YmVidWlsZGVyL2t1YmUtcmJhYy1wcm94eTp2MC44LjAiLCJuYW1lIjoia3ViZS1yYmFjLXByb3h5IiwicG9ydHMiOlt7ImNvbnRhaW5lclBvcnQiOjg0NDMsIm5hbWUiOiJodHRwcyJ9XSwicmVzb3VyY2VzIjp7fX0seyJhcmdzIjpbIi0temFwLWxvZy1sZXZlbD00IiwiLS16YXAtdGltZS1lbmNvZGluZz1pc284NjAxIiwiLS1oZWFsdGgtcHJvYmUtYmluZC1hZGRyZXNzPTo4MDgzIiwiLS1tZXRyaWNzLWJpbmQtYWRkcmVzcz0xMjcuMC4wLjE6ODA4MCIsIi0tbGVhZGVyLWVsZWN0Il0sImNvbW1hbmQiOlsiL21hbmFnZXIiXSwiZW52IjpbeyJuYW1lIjoiT1BFUkFUT1JfTkFNRVNQQUNFIiwidmFsdWVGcm9tIjp7ImZpZWxkUmVmIjp7ImZpZWxkUGF0aCI6Im1ldGFkYXRhLm5hbWVzcGFjZSJ9fX0seyJuYW1lIjoiUE9EX05BTUUiLCJ2YWx1ZUZyb20iOnsiZmllbGRSZWYiOnsiZmllbGRQYXRoIjoibWV0YWRhdGEubmFtZSJ9fX1dLCJpbWFnZSI6ImdoY3IuaW8vZm91bmRhdGlvbi1tb2RlbC1zdGFjay9tdWx0aS1uaWMtY25pLWNvbnRyb2xsZXI6djEuMS4wIiwiaW1hZ2VQdWxsUG9saWN5IjoiQWx3YXlzIiwibGl2ZW5lc3NQcm9iZSI6eyJodHRwR2V0Ijp7InBhdGgiOiIvaGVhbHRoeiIsInBvcnQiOjgwODN9LCJpbml0aWFsRGVsYXlTZWNvbmRzIjoxNSwicGVyaW9kU2Vjb25kcyI6MjB9LCJuYW1lIjoibWFuYWdlciIsInJlYWRpbmVzc1Byb2JlIjp7Imh0dHBHZXQiOnsicGF0aCI6Ii9yZWFkeXoiLCJwb3J0Ijo4MDgzfSwiaW5pdGlhbERlbGF5U2Vjb25kcyI6NSwicGVyaW9kU2Vjb25kcyI6MTB9LCJyZXNvdXJjZXMiOnsibGltaXRzIjp7ImNwdSI6IjEwMG0iLCJtZW1vcnkiOiI1MDBNaSJ9LCJyZXF1ZXN0cyI6eyJjcHUiOiIxMDBtIiwibWVtb3J5IjoiNTAwTWkifX0sInNlY3VyaXR5Q29udGV4dCI6eyJhbGxvd1ByaXZpbGVnZUVzY2FsYXRpb24iOmZhbHNlfX1dLCJob3N0TmV0d29yayI6dHJ1ZSwicHJpb3JpdHlDbGFzc05hbWUiOiJzeXN0ZW0tY2x1c3Rlci1jcml0aWNhbCIsInNlY3VyaXR5Q29udGV4dCI6eyJydW5Bc05vblJvb3QiOnRydWV9LCJzZXJ2aWNlQWNjb3VudE5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlciIsInRlcm1pbmF0aW9uR3JhY2VQZXJpb2RTZWNvbmRzIjoxMH19fX1dLCJwZXJtaXNzaW9ucyI6W3sicnVsZXMiOlt7ImFwaUdyb3VwcyI6WyIiLCJjb29yZGluYXRpb24uazhzLmlvIl0sInJlc291cmNlcyI6WyJjb25maWdtYXBzIiwibGVhc2VzIl0sInZlcmJzIjpbImdldCIsImxpc3QiLCJ3YXRjaCIsImNyZWF0ZSIsInVwZGF0ZSIsInBhdGNoIiwiZGVsZXRlIl19LHsiYXBpR3JvdXBzIjpbIiJdLCJyZXNvdXJjZXMiOlsiZXZlbnRzIl0sInZlcmJzIjpbImNyZWF0ZSIsInBhdGNoIl19XSwic2VydmljZUFjY291bnROYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIifV19LCJzdHJhdGVneSI6ImRlcGxveW1lbnQifSwiaW5zdGFsbE1vZGVzIjpbeyJzdXBwb3J0ZWQiOnRydWUsInR5cGUiOiJPd25OYW1lc3BhY2UifSx7InN1cHBvcnRlZCI6dHJ1ZSwidHlwZSI6IlNpbmdsZU5hbWVzcGFjZSJ9LHsic3VwcG9ydGVkIjpmYWxzZSwidHlwZSI6Ik11bHRpTmFtZXNwYWNlIn0seyJzdXBwb3J0ZWQiOnRydWUsInR5cGUiOiJBbGxOYW1lc3BhY2VzIn1dLCJrZXl3b3JkcyI6WyJtdWx0aS1uaWMiLCJjbmkiLCJuZXR3b3JrIl0sImxpbmtzIjpbeyJuYW1lIjoiTXVsdGktTklDIENOSSBPcGVyYXRvciIsInVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9mb3VuZGF0aW9uLW1vZGVsLXN0YWNrL211bHRpLW5pYy1jbmkifV0sIm1haW50YWluZXJzIjpbeyJlbWFpbCI6InN1bnlhbmFuLmNob29jaG90a2FldzFAaWJtLmNvbSIsIm5hbWUiOiJTdW55YW5hbiBDaG9vY2hvdGthZXcifSx7ImVtYWlsIjoiY2hpYmFAanAuaWJtLmNvbSIsIm5hbWUiOiJUYXRzdWhpcm8gQ2hpYmEifV0sIm1hdHVyaXR5IjoiYWxwaGEiLCJwcm92aWRlciI6eyJuYW1lIjoiRm91bmRhdGlvbiBNb2RlbCBTdGFjayJ9LCJ2ZXJzaW9uIjoiMS4xLjAifX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9tZXRyaWNzIl0sInZlcmJzIjpbImdldCJdfV19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlIn0sInNwZWMiOnsicG9ydHMiOlt7Im5hbWUiOiJodHRwcyIsInBvcnQiOjg0NDMsInRhcmdldFBvcnQiOiJodHRwcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.1.0
  name: ""
- image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:68a58d75492d5781947572c7903746315fe4b4aa0fb8eafc3970e390a6543729
  name: ""
schema: olm.bundle
---
image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:bbadd73026ec7291713a5687b7dbe32e3fe08d0204b1fb21d86bb2512bcf7d7d
name: multi-nic-cni-operator.v1.2.0
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.2.0
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibGlzdEtpbmQiOiJNdWx0aU5pY05ldHdvcmtMaXN0IiwicGx1cmFsIjoibXVsdGluaWNuZXR3b3JrcyIsInNpbmd1bGFyIjoibXVsdGluaWNuZXR3b3JrIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIE11bHRpTmljTmV0d29yayBNYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbCBTdWJuZXQgaXMgZ2xvYmFsIHN1Ym5ldCwgZGVmYXVsdDogMTcyLjMwLjAuMC8xNiBJUEFNIGlzIGlwYW0gc3BlY2lmaWNhdGlvbiBNYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uIFBvbGljeSBpcyBnZW5lcmFsIHBvbGljeSBvZiB0aGUgcG9vbCIsInByb3BlcnRpZXMiOnsiYXR0YWNoUG9saWN5Ijp7ImRlc2NyaXB0aW9uIjoiQXNzaWdubWVudFBvbGljeSBkZWZpbmVzIHRoZSBwb2xpY3kgdG8gc2VsZWN0IHRoZSBOSUNzIGZyb20gdGhlIHBvb2wgU3RyYXRlZ3kgaXMgb25lIG9mIE5vbmUsIENvc3RPcHQsIFBlcmZPcHQsIFFvU0NsYXNzIFRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHMgcmVxdWlyZWQgZm9yIENvc3RPcHQgYW5kIFBlcmZPcHQiLCJwcm9wZXJ0aWVzIjp7InN0cmF0ZWd5Ijp7InR5cGUiOiJzdHJpbmcifSwidGFyZ2V0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0cmF0ZWd5Il0sInR5cGUiOiJvYmplY3QifSwiaXBhbSI6eyJ0eXBlIjoic3RyaW5nIn0sIm1hc3Rlck5ldHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwibXVsdGlOSUNJUEFNIjp7InR5cGUiOiJib29sZWFuIn0sIm5hbWVzcGFjZXMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwicGx1Z2luIjp7ImRlc2NyaXB0aW9uIjoicmVmZXJlbmNlOiBnaXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvY25pL3BrZy90eXBlcyIsInByb3BlcnRpZXMiOnsiYXJncyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJvYmplY3QifSwiY2FwYWJpbGl0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJib29sZWFuIn0sInR5cGUiOiJvYmplY3QifSwiY25pVmVyc2lvbiI6eyJ0eXBlIjoic3RyaW5nIn0sImRucyI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImRvbWFpbiI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWVzZXJ2ZXJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm9wdGlvbnMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwic2VhcmNoIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY25pVmVyc2lvbiIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaXBhbSIsInBsdWdpbiJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29ya1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBNdWx0aU5pY05ldHdvcmsiLCJwcm9wZXJ0aWVzIjp7ImNvbXB1dGVSZXN1bHRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sIm51bU9mSG9zdHMiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbIm5ldEFkZHJlc3MiLCJudW1PZkhvc3RzIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZ1N0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn0sImRpc2NvdmVyeSI6eyJwcm9wZXJ0aWVzIjp7ImNpZHJQcm9jZXNzZWQiOnsidHlwZSI6ImludGVnZXIifSwiZXhpc3REYWVtb24iOnsidHlwZSI6ImludGVnZXIifSwiaW5mb0F2YWlsYWJsZSI6eyJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsiY2lkclByb2Nlc3NlZCIsImV4aXN0RGFlbW9uIiwiaW5mb0F2YWlsYWJsZSJdLCJ0eXBlIjoib2JqZWN0In0sImxhc3RTeW5jVGltZSI6eyJmb3JtYXQiOiJkYXRlLXRpbWUiLCJ0eXBlIjoic3RyaW5nIn0sIm1lc3NhZ2UiOnsidHlwZSI6InN0cmluZyJ9LCJyb3V0ZVN0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJjb21wdXRlUmVzdWx0cyIsImNvbmZpZ1N0YXR1cyIsImRpc2NvdmVyeSIsImxhc3RTeW5jVGltZSIsIm1lc3NhZ2UiLCJyb3V0ZVN0YXR1cyJdLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNpZHJzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkNJRFIiLCJsaXN0S2luZCI6IkNJRFJMaXN0IiwicGx1cmFsIjoiY2lkcnMiLCJzaW5ndWxhciI6ImNpZHIifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQ0lEUiIsInByb3BlcnRpZXMiOnsiY2lkciI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Imhvc3RzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaG9zdEluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImlwcG9vbCI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdElQIiwiaG9zdEluZGV4IiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwicG9kQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbnRlcmZhY2VJbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuZXRBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbkNJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdHMiLCJpbnRlcmZhY2VJbmRleCIsIm5ldEFkZHJlc3MiLCJ2bGFuQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWciOnsiZGVzY3JpcHRpb24iOiJJTlNFUlQgQURESVRJT05BTCBTUEVDIEZJRUxEUyAtIGRlc2lyZWQgc3RhdGUgb2YgY2x1c3RlciBJbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImRldmljZWNsYXNzZXMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiRGV2aWNlQ2xhc3MiLCJsaXN0S2luZCI6IkRldmljZUNsYXNzTGlzdCIsInBsdXJhbCI6ImRldmljZWNsYXNzZXMiLCJzaW5ndWxhciI6ImRldmljZWNsYXNzIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiRGV2aWNlQ2xhc3MgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGRldmljZWNsYXNzZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1NwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInByb3BlcnRpZXMiOnsiaWRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsicHJvZHVjdHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInByb2R1Y3RzIiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpZHMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Imhvc3RpbnRlcmZhY2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJsaXN0S2luZCI6Ikhvc3RJbnRlcmZhY2VMaXN0IiwicGx1cmFsIjoiaG9zdGludGVyZmFjZXMiLCJzaW5ndWxhciI6Imhvc3RpbnRlcmZhY2UifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwY2lBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwicHJvZHVjdCI6eyJ0eXBlIjoic3RyaW5nIn0sInZlbmRvciI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0SVAiLCJpbnRlcmZhY2VOYW1lIiwibmV0QWRkcmVzcyIsInBjaUFkZHJlc3MiLCJwcm9kdWN0IiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJob3N0TmFtZSIsImludGVyZmFjZXMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIEhvc3RJbnRlcmZhY2UiLCJwcm9wZXJ0aWVzIjp7InN0YXQiOnsicHJvcGVydGllcyI6eyJjb3VudCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibGFzdFJ4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RSeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFRpbWVzdGFtcCI6eyJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VHhEcm9wIjp7InR5cGUiOiJpbnRlZ2VyIn0sInJ4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwicnhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn0sInR4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJjb3VudCIsImludGVyZmFjZU5hbWUiLCJsYXN0UngiLCJsYXN0UnhEcm9wIiwibGFzdFRpbWVzdGFtcCIsImxhc3RUeCIsImxhc3RUeERyb3AiLCJyeERyb3BSYXRlIiwicnhSYXRlIiwidHhEcm9wUmF0ZSIsInR4UmF0ZSJdLCJ0eXBlIjoib2JqZWN0In19LCJyZXF1aXJlZCI6WyJzdGF0Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImlwcG9vbHMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiSVBQb29sIiwibGlzdEtpbmQiOiJJUFBvb2xMaXN0IiwicGx1cmFsIjoiaXBwb29scyIsInNpbmd1bGFyIjoiaXBwb29sIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBpcHBvb2xzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIElQUG9vbCIsInByb3BlcnRpZXMiOnsiYWxsb2NhdGlvbnMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJhZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwiaW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwibmFtZXNwYWNlIjp7InR5cGUiOiJzdHJpbmcifSwicG9kIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFkZHJlc3MiLCJpbmRleCIsIm5hbWVzcGFjZSIsInBvZCJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJleGNsdWRlcyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJuZXRBdHRhY2hEZWYiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RDSURSIjp7ImRlc2NyaXB0aW9uIjoiRm9vIGlzIGFuIGV4YW1wbGUgZmllbGQgb2YgSVBQb29sLiBFZGl0IGlwcG9vbF90eXBlcy5nbyB0byByZW1vdmUvdXBkYXRlIiwidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJhbGxvY2F0aW9ucyIsImV4Y2x1ZGVzIiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwibmV0QXR0YWNoRGVmIiwicG9kQ0lEUiIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIElQUG9vbCIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9tZXRyaWNzIl0sInZlcmJzIjpbImdldCJdfV19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlIn0sInNwZWMiOnsicG9ydHMiOlt7Im5hbWUiOiJodHRwcyIsInBvcnQiOjg0NDMsInRhcmdldFBvcnQiOiJodHRwcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.2.0
  name: ""
- image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:bbadd73026ec7291713a5687b7dbe32e3fe08d0204b1fb21d86bb2512bcf7d7d
  name: ""
schema: olm.bundle
---
image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:22988421ffe9056d474108040d5e812e44d42edaee93d30095785e539674695e
name: multi-nic-cni-operator.v1.2.1
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.2.1
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibGlzdEtpbmQiOiJNdWx0aU5pY05ldHdvcmtMaXN0IiwicGx1cmFsIjoibXVsdGluaWNuZXR3b3JrcyIsInNpbmd1bGFyIjoibXVsdGluaWNuZXR3b3JrIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIE11bHRpTmljTmV0d29yayBNYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbCBTdWJuZXQgaXMgZ2xvYmFsIHN1Ym5ldCwgZGVmYXVsdDogMTcyLjMwLjAuMC8xNiBJUEFNIGlzIGlwYW0gc3BlY2lmaWNhdGlvbiBNYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uIFBvbGljeSBpcyBnZW5lcmFsIHBvbGljeSBvZiB0aGUgcG9vbCIsInByb3BlcnRpZXMiOnsiYXR0YWNoUG9saWN5Ijp7ImRlc2NyaXB0aW9uIjoiQXNzaWdubWVudFBvbGljeSBkZWZpbmVzIHRoZSBwb2xpY3kgdG8gc2VsZWN0IHRoZSBOSUNzIGZyb20gdGhlIHBvb2wgU3RyYXRlZ3kgaXMgb25lIG9mIE5vbmUsIENvc3RPcHQsIFBlcmZPcHQsIFFvU0NsYXNzIFRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHMgcmVxdWlyZWQgZm9yIENvc3RPcHQgYW5kIFBlcmZPcHQiLCJwcm9wZXJ0aWVzIjp7InN0cmF0ZWd5Ijp7InR5cGUiOiJzdHJpbmcifSwidGFyZ2V0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0cmF0ZWd5Il0sInR5cGUiOiJvYmplY3QifSwiaXBhbSI6eyJ0eXBlIjoic3RyaW5nIn0sIm1hc3Rlck5ldHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwibXVsdGlOSUNJUEFNIjp7InR5cGUiOiJib29sZWFuIn0sIm5hbWVzcGFjZXMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwicGx1Z2luIjp7ImRlc2NyaXB0aW9uIjoicmVmZXJlbmNlOiBnaXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvY25pL3BrZy90eXBlcyIsInByb3BlcnRpZXMiOnsiYXJncyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJvYmplY3QifSwiY2FwYWJpbGl0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJib29sZWFuIn0sInR5cGUiOiJvYmplY3QifSwiY25pVmVyc2lvbiI6eyJ0eXBlIjoic3RyaW5nIn0sImRucyI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImRvbWFpbiI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWVzZXJ2ZXJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm9wdGlvbnMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwic2VhcmNoIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY25pVmVyc2lvbiIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaXBhbSIsInBsdWdpbiJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29ya1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBNdWx0aU5pY05ldHdvcmsiLCJwcm9wZXJ0aWVzIjp7ImNvbXB1dGVSZXN1bHRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sIm51bU9mSG9zdHMiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbIm5ldEFkZHJlc3MiLCJudW1PZkhvc3RzIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZ1N0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn0sImRpc2NvdmVyeSI6eyJwcm9wZXJ0aWVzIjp7ImNpZHJQcm9jZXNzZWQiOnsidHlwZSI6ImludGVnZXIifSwiZXhpc3REYWVtb24iOnsidHlwZSI6ImludGVnZXIifSwiaW5mb0F2YWlsYWJsZSI6eyJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsiY2lkclByb2Nlc3NlZCIsImV4aXN0RGFlbW9uIiwiaW5mb0F2YWlsYWJsZSJdLCJ0eXBlIjoib2JqZWN0In0sImxhc3RTeW5jVGltZSI6eyJmb3JtYXQiOiJkYXRlLXRpbWUiLCJ0eXBlIjoic3RyaW5nIn0sIm1lc3NhZ2UiOnsidHlwZSI6InN0cmluZyJ9LCJyb3V0ZVN0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJjb21wdXRlUmVzdWx0cyIsImNvbmZpZ1N0YXR1cyIsImRpc2NvdmVyeSIsImxhc3RTeW5jVGltZSIsIm1lc3NhZ2UiLCJyb3V0ZVN0YXR1cyJdLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNpZHJzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkNJRFIiLCJsaXN0S2luZCI6IkNJRFJMaXN0IiwicGx1cmFsIjoiY2lkcnMiLCJzaW5ndWxhciI6ImNpZHIifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQ0lEUiIsInByb3BlcnRpZXMiOnsiY2lkciI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Imhvc3RzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaG9zdEluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImlwcG9vbCI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdElQIiwiaG9zdEluZGV4IiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwicG9kQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbnRlcmZhY2VJbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuZXRBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbkNJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdHMiLCJpbnRlcmZhY2VJbmRleCIsIm5ldEFkZHJlc3MiLCJ2bGFuQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWciOnsiZGVzY3JpcHRpb24iOiJJTlNFUlQgQURESVRJT05BTCBTUEVDIEZJRUxEUyAtIGRlc2lyZWQgc3RhdGUgb2YgY2x1c3RlciBJbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImRldmljZWNsYXNzZXMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiRGV2aWNlQ2xhc3MiLCJsaXN0S2luZCI6IkRldmljZUNsYXNzTGlzdCIsInBsdXJhbCI6ImRldmljZWNsYXNzZXMiLCJzaW5ndWxhciI6ImRldmljZWNsYXNzIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiRGV2aWNlQ2xhc3MgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGRldmljZWNsYXNzZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1NwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInByb3BlcnRpZXMiOnsiaWRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsicHJvZHVjdHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInByb2R1Y3RzIiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpZHMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Imhvc3RpbnRlcmZhY2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJsaXN0S2luZCI6Ikhvc3RJbnRlcmZhY2VMaXN0IiwicGx1cmFsIjoiaG9zdGludGVyZmFjZXMiLCJzaW5ndWxhciI6Imhvc3RpbnRlcmZhY2UifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwY2lBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwicHJvZHVjdCI6eyJ0eXBlIjoic3RyaW5nIn0sInZlbmRvciI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0SVAiLCJpbnRlcmZhY2VOYW1lIiwibmV0QWRkcmVzcyIsInBjaUFkZHJlc3MiLCJwcm9kdWN0IiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJob3N0TmFtZSIsImludGVyZmFjZXMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIEhvc3RJbnRlcmZhY2UiLCJwcm9wZXJ0aWVzIjp7InN0YXQiOnsicHJvcGVydGllcyI6eyJjb3VudCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibGFzdFJ4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RSeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFRpbWVzdGFtcCI6eyJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VHhEcm9wIjp7InR5cGUiOiJpbnRlZ2VyIn0sInJ4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwicnhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn0sInR4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJjb3VudCIsImludGVyZmFjZU5hbWUiLCJsYXN0UngiLCJsYXN0UnhEcm9wIiwibGFzdFRpbWVzdGFtcCIsImxhc3RUeCIsImxhc3RUeERyb3AiLCJyeERyb3BSYXRlIiwicnhSYXRlIiwidHhEcm9wUmF0ZSIsInR4UmF0ZSJdLCJ0eXBlIjoib2JqZWN0In19LCJyZXF1aXJlZCI6WyJzdGF0Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImlwcG9vbHMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiSVBQb29sIiwibGlzdEtpbmQiOiJJUFBvb2xMaXN0IiwicGx1cmFsIjoiaXBwb29scyIsInNpbmd1bGFyIjoiaXBwb29sIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBpcHBvb2xzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIElQUG9vbCIsInByb3BlcnRpZXMiOnsiYWxsb2NhdGlvbnMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJhZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwiaW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwibmFtZXNwYWNlIjp7InR5cGUiOiJzdHJpbmcifSwicG9kIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFkZHJlc3MiLCJpbmRleCIsIm5hbWVzcGFjZSIsInBvZCJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJleGNsdWRlcyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJuZXRBdHRhY2hEZWYiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RDSURSIjp7ImRlc2NyaXB0aW9uIjoiRm9vIGlzIGFuIGV4YW1wbGUgZmllbGQgb2YgSVBQb29sLiBFZGl0IGlwcG9vbF90eXBlcy5nbyB0byByZW1vdmUvdXBkYXRlIiwidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJhbGxvY2F0aW9ucyIsImV4Y2x1ZGVzIiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwibmV0QXR0YWNoRGVmIiwicG9kQ0lEUiIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIElQUG9vbCIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoib3BlcmF0b3JzLmNvcmVvcy5jb20vdjFhbHBoYTEiLCJraW5kIjoiQ2x1c3RlclNlcnZpY2VWZXJzaW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiYWxtLWV4YW1wbGVzIjoiW1xuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiQ0lEUlwiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgIFwibm90ZVwiOiBcIlRoaXMgcmVzb3VyY2Ugd2lsbCBiZSBhdXRvLWdlbmVyYXRlZCBhbmQgY29udHJvbGxlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5EbyBub3QgY3JlYXRlL21vZGlmeS5cXG5cIlxuICAgICAgfSxcbiAgICAgIFwibmFtZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDNcIixcbiAgICAgIFwibmFtZXNwYWNlXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1zeXN0ZW1cIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiY2lkclwiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4yNDQuMC4xNjhcIixcbiAgICAgICAgICAgICAgXCJob3N0SW5kZXhcIjogMCxcbiAgICAgICAgICAgICAgXCJob3N0TmFtZVwiOiBcIm5vZGUtMVwiLFxuICAgICAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgxXCIsXG4gICAgICAgICAgICAgIFwiaXBwb29sXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sMy0xOTIuMTY4LjAuMC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjAuMC8yNlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjI0NC4wLjE2N1wiLFxuICAgICAgICAgICAgICBcImhvc3RJbmRleFwiOiAxLFxuICAgICAgICAgICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0yXCIsXG4gICAgICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDFcIixcbiAgICAgICAgICAgICAgXCJpcHBvb2xcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzLTE5Mi4xNjguMC42NC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjAuNjQvMjZcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJpbnRlcmZhY2VJbmRleFwiOiAwLFxuICAgICAgICAgIFwibmV0QWRkcmVzc1wiOiBcIjEwLjI0NC4wLjAvMTZcIixcbiAgICAgICAgICBcInZsYW5DSURSXCI6IFwiMTkyLjE2OC4wLjAvMThcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJob3N0c1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiaG9zdElQXCI6IFwiMTAuMC4wLjE2OFwiLFxuICAgICAgICAgICAgICBcImhvc3RJbmRleFwiOiAwLFxuICAgICAgICAgICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDJcIixcbiAgICAgICAgICAgICAgXCJpcHBvb2xcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzLTE5Mi4xNjguNjQuMC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjY0LjAvMjZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4wLjAuMTY3XCIsXG4gICAgICAgICAgICAgIFwiaG9zdEluZGV4XCI6IDEsXG4gICAgICAgICAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTJcIixcbiAgICAgICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMlwiLFxuICAgICAgICAgICAgICBcImlwcG9vbFwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDMtMTkyLjE2OC42NC42NC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjY0LjY0LzI2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiaW50ZXJmYWNlSW5kZXhcIjogMSxcbiAgICAgICAgICBcIm5ldEFkZHJlc3NcIjogXCIxMC4wLjAuMC8xNlwiLFxuICAgICAgICAgIFwidmxhbkNJRFJcIjogXCIxOTIuMTY4LjY0LjAvMThcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJjb25maWdcIjoge1xuICAgICAgICBcImhvc3RCbG9ja1wiOiA4LFxuICAgICAgICBcImludGVyZmFjZUJsb2NrXCI6IDIsXG4gICAgICAgIFwibWFzdGVyTmV0c1wiOiBbXSxcbiAgICAgICAgXCJuYW1lXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sM1wiLFxuICAgICAgICBcInN1Ym5ldFwiOiBcIjE5Mi4xNjguMC4wLzE2XCIsXG4gICAgICAgIFwidHlwZVwiOiBcImlwdmxhblwiLFxuICAgICAgICBcInZsYW5Nb2RlXCI6IFwibDNcIlxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIkNJRFJcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICBcIm5vdGVcIjogXCJUaGlzIHJlc291cmNlIHdpbGwgYmUgYXV0by1nZW5lcmF0ZWQgYW5kIGNvbnRyb2xsZWQgYnkgbXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIuXFxuRG8gbm90IGNyZWF0ZS9tb2RpZnkuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJpcHZsYW5sM1wiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJjaWRyXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiaG9zdHNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjI0NC4wLjE2OFwiLFxuICAgICAgICAgICAgICBcImhvc3RJbmRleFwiOiAwLFxuICAgICAgICAgICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDFcIixcbiAgICAgICAgICAgICAgXCJpcHBvb2xcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzLTE5Mi4xNjguMC4wLTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguMC4wLzI2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiaG9zdElQXCI6IFwiMTAuMjQ0LjAuMTY3XCIsXG4gICAgICAgICAgICAgIFwiaG9zdEluZGV4XCI6IDEsXG4gICAgICAgICAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTJcIixcbiAgICAgICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMVwiLFxuICAgICAgICAgICAgICBcImlwcG9vbFwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDMtMTkyLjE2OC4wLjY0LTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguMC42NC8yNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImludGVyZmFjZUluZGV4XCI6IDAsXG4gICAgICAgICAgXCJuZXRBZGRyZXNzXCI6IFwiMTAuMjQ0LjAuMC8xNlwiLFxuICAgICAgICAgIFwidmxhbkNJRFJcIjogXCIxOTIuMTY4LjAuMC8xOFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4wLjAuMTY4XCIsXG4gICAgICAgICAgICAgIFwiaG9zdEluZGV4XCI6IDAsXG4gICAgICAgICAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTFcIixcbiAgICAgICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMlwiLFxuICAgICAgICAgICAgICBcImlwcG9vbFwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDMtMTkyLjE2OC42NC4wLTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguNjQuMC8yNlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjAuMC4xNjdcIixcbiAgICAgICAgICAgICAgXCJob3N0SW5kZXhcIjogMSxcbiAgICAgICAgICAgICAgXCJob3N0TmFtZVwiOiBcIm5vZGUtMlwiLFxuICAgICAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgyXCIsXG4gICAgICAgICAgICAgIFwiaXBwb29sXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sMy0xOTIuMTY4LjY0LjY0LTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguNjQuNjQvMjZcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJpbnRlcmZhY2VJbmRleFwiOiAxLFxuICAgICAgICAgIFwibmV0QWRkcmVzc1wiOiBcIjEwLjAuMC4wLzE2XCIsXG4gICAgICAgICAgXCJ2bGFuQ0lEUlwiOiBcIjE5Mi4xNjguNjQuMC8xOFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImNvbmZpZ1wiOiB7XG4gICAgICAgIFwiaG9zdEJsb2NrXCI6IDgsXG4gICAgICAgIFwiaW50ZXJmYWNlQmxvY2tcIjogMixcbiAgICAgICAgXCJtYXN0ZXJOZXRzXCI6IFtdLFxuICAgICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzXCIsXG4gICAgICAgIFwic3VibmV0XCI6IFwiMTkyLjE2OC4wLjAvMTZcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiaXB2bGFuXCIsXG4gICAgICAgIFwidmxhbk1vZGVcIjogXCJsM1wiXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiQ29uZmlnXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgXCJub3RlXCI6IFwiVGhlIHJlc291cmNlIHdpdGggZGVmYXVsdCBzZXR0aW5ncyB3aWxsIGJlIGF1dG8tY3JlYXRlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5QbGVhc2UgbW9kaWZ5IGlmIG5lZWQuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW11bHRpLW5pY2RcIixcbiAgICAgIFwibmFtZXNwYWNlXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1zeXN0ZW1cIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiYWRkUm91dGVQYXRoXCI6IFwiL2FkZGwzXCIsXG4gICAgICBcImNuaVR5cGVcIjogXCJtdWx0aS1uaWNcIixcbiAgICAgIFwiY29udGV4dFRpbWVvdXRNaW51dGVzXCI6IDIsXG4gICAgICBcImRhZW1vblwiOiB7XG4gICAgICAgIFwiZW52XCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJEQUVNT05fUE9SVFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjExMDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlJUX1RBQkxFX1BBVEhcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIvb3B0L3J0X3RhYmxlc1wiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImltYWdlXCI6IFwiZ2hjci5pby9mb3VuZGF0aW9uLW1vZGVsLXN0YWNrL211bHRpLW5pYy1jbmktZGFlbW9uOnYxLjIuMVwiLFxuICAgICAgICBcIm1vdW50c1wiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJob3N0cGF0aFwiOiBcIi92YXIvbGliL2NuaS9iaW5cIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNuaWJpblwiLFxuICAgICAgICAgICAgXCJwb2RwYXRoXCI6IFwiL2hvc3Qvb3B0L2NuaS9iaW5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJob3N0cGF0aFwiOiBcIi92YXIvbGliL2t1YmVsZXQvZGV2aWNlLXBsdWdpbnNcIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImRldmljZS1wbHVnaW5cIixcbiAgICAgICAgICAgIFwicG9kcGF0aFwiOiBcIi92YXIvbGliL2t1YmVsZXQvZGV2aWNlLXBsdWdpbnNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJob3N0cGF0aFwiOiBcIi9ldGMvaXByb3V0ZTIvcnRfdGFibGVzXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJydC10YWJsZXNcIixcbiAgICAgICAgICAgIFwicG9kcGF0aFwiOiBcIi9vcHQvcnRfdGFibGVzXCJcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwicG9ydFwiOiAxMTAwMCxcbiAgICAgICAgXCJyZXNvdXJjZXNcIjoge1xuICAgICAgICAgIFwicmVxdWVzdHNcIjoge1xuICAgICAgICAgICAgXCJjcHVcIjogXCIxMDBtXCIsXG4gICAgICAgICAgICBcIm1lbW9yeVwiOiBcIjUwTWlcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzZWN1cml0eUNvbnRleHRcIjoge1xuICAgICAgICAgIFwicHJpdmlsZWdlZFwiOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImRlbGV0ZVJvdXRlUGF0aFwiOiBcIi9kZWxldGVsM1wiLFxuICAgICAgXCJnZXRJbnRlcmZhY2VQYXRoXCI6IFwiL2ludGVyZmFjZVwiLFxuICAgICAgXCJpcGFtVHlwZVwiOiBcIm11bHRpLW5pYy1pcGFtXCIsXG4gICAgICBcImpvaW5QYXRoXCI6IFwiL2pvaW5cIixcbiAgICAgIFwibG9nTGV2ZWxcIjogNCxcbiAgICAgIFwibG9uZ1JlY29uY2lsZU1pbnV0ZXNcIjogMTAsXG4gICAgICBcIm5vcm1hbFJlY29uY2lsZU1pbnV0ZXNcIjogMSxcbiAgICAgIFwidXJnZW50UmVjb25jaWxlU2Vjb25kc1wiOiA1XG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiQ29uZmlnXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgXCJub3RlXCI6IFwiVGhlIHJlc291cmNlIHdpdGggZGVmYXVsdCBzZXR0aW5ncyB3aWxsIGJlIGF1dG8tY3JlYXRlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5QbGVhc2UgbW9kaWZ5IGlmIG5lZWQuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWNkXCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImFkZFJvdXRlUGF0aFwiOiBcIi9hZGRsM1wiLFxuICAgICAgXCJjbmlUeXBlXCI6IFwibXVsdGktbmljXCIsXG4gICAgICBcImNvbnRleHRUaW1lb3V0TWludXRlc1wiOiAyLFxuICAgICAgXCJkYWVtb25cIjoge1xuICAgICAgICBcImVudlwiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiREFFTU9OX1BPUlRcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIxMTAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJSVF9UQUJMRV9QQVRIXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiL29wdC9ydF90YWJsZXNcIlxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJpbWFnZVwiOiBcImdoY3IuaW8vZm91bmRhdGlvbi1tb2RlbC1zdGFjay9tdWx0aS1uaWMtY25pLWRhZW1vbjp2MS4yLjFcIixcbiAgICAgICAgXCJtb3VudHNcIjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaG9zdHBhdGhcIjogXCIvdmFyL2xpYi9jbmkvYmluXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjbmliaW5cIixcbiAgICAgICAgICAgIFwicG9kcGF0aFwiOiBcIi9ob3N0L29wdC9jbmkvYmluXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaG9zdHBhdGhcIjogXCIvdmFyL2xpYi9rdWJlbGV0L2RldmljZS1wbHVnaW5zXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJkZXZpY2UtcGx1Z2luXCIsXG4gICAgICAgICAgICBcInBvZHBhdGhcIjogXCIvdmFyL2xpYi9rdWJlbGV0L2RldmljZS1wbHVnaW5zXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaG9zdHBhdGhcIjogXCIvZXRjL2lwcm91dGUyL3J0X3RhYmxlc1wiLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicnQtdGFibGVzXCIsXG4gICAgICAgICAgICBcInBvZHBhdGhcIjogXCIvb3B0L3J0X3RhYmxlc1wiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInBvcnRcIjogMTEwMDAsXG4gICAgICAgIFwicmVzb3VyY2VzXCI6IHtcbiAgICAgICAgICBcInJlcXVlc3RzXCI6IHtcbiAgICAgICAgICAgIFwiY3B1XCI6IFwiMTAwbVwiLFxuICAgICAgICAgICAgXCJtZW1vcnlcIjogXCI1ME1pXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic2VjdXJpdHlDb250ZXh0XCI6IHtcbiAgICAgICAgICBcInByaXZpbGVnZWRcIjogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJkZWxldGVSb3V0ZVBhdGhcIjogXCIvZGVsZXRlbDNcIixcbiAgICAgIFwiZ2V0SW50ZXJmYWNlUGF0aFwiOiBcIi9pbnRlcmZhY2VcIixcbiAgICAgIFwiaXBhbVR5cGVcIjogXCJtdWx0aS1uaWMtaXBhbVwiLFxuICAgICAgXCJqb2luUGF0aFwiOiBcIi9qb2luXCIsXG4gICAgICBcImxvZ0xldmVsXCI6IDQsXG4gICAgICBcImxvbmdSZWNvbmNpbGVNaW51dGVzXCI6IDEwLFxuICAgICAgXCJub3JtYWxSZWNvbmNpbGVNaW51dGVzXCI6IDEsXG4gICAgICBcInVyZ2VudFJlY29uY2lsZVNlY29uZHNcIjogNVxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIkRldmljZUNsYXNzXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWhpZ2hzcGVlZFwiLFxuICAgICAgXCJuYW1lc3BhY2VcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLXN5c3RlbVwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJpZHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcIjEwMTlcIixcbiAgICAgICAgICAgIFwiMTAxZFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjE1YjNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcImVmYTBcIixcbiAgICAgICAgICAgIFwiZWZhMVwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjFkMGZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiRGV2aWNlQ2xhc3NcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwibmFtZVwiOiBcImhpZ2hzcGVlZFwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJpZHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcIjEwMTlcIixcbiAgICAgICAgICAgIFwiMTAxZFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjE1YjNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcImVmYTBcIixcbiAgICAgICAgICAgIFwiZWZhMVwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjFkMGZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiSG9zdEludGVyZmFjZVwiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgIFwibm90ZVwiOiBcIlRoaXMgcmVzb3VyY2Ugd2lsbCBiZSBhdXRvLWdlbmVyYXRlZCBhbmQgY29udHJvbGxlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5EbyBub3QgY3JlYXRlL21vZGlmeS5cXG5cIlxuICAgICAgfSxcbiAgICAgIFwibmFtZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3Itbm9kZS0xXCIsXG4gICAgICBcIm5hbWVzcGFjZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3Itc3lzdGVtXCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICBcImludGVyZmFjZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4wLjAuMTY4XCIsXG4gICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMVwiLFxuICAgICAgICAgIFwibmV0QWRkcmVzc1wiOiBcIjEwLjAuMC4wLzE2XCIsXG4gICAgICAgICAgXCJwY2lBZGRyZXNzXCI6IFwiMDAwMDowMDowNC4wXCIsXG4gICAgICAgICAgXCJwcm9kdWN0XCI6IFwiMTAwMFwiLFxuICAgICAgICAgIFwidmVuZG9yXCI6IFwiMWFmNFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjEuMC4xNjhcIixcbiAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgyXCIsXG4gICAgICAgICAgXCJuZXRBZGRyZXNzXCI6IFwiMTAuMS4wLjAvMTZcIixcbiAgICAgICAgICBcInBjaUFkZHJlc3NcIjogXCIwMDAwOjAwOjA1LjBcIixcbiAgICAgICAgICBcInByb2R1Y3RcIjogXCIxMDAwXCIsXG4gICAgICAgICAgXCJ2ZW5kb3JcIjogXCIxYWY0XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIkhvc3RJbnRlcmZhY2VcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICBcIm5vdGVcIjogXCJUaGlzIHJlc291cmNlIHdpbGwgYmUgYXV0by1nZW5lcmF0ZWQgYW5kIGNvbnRyb2xsZWQgYnkgbXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIuXFxuRG8gbm90IGNyZWF0ZS9tb2RpZnkuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJub2RlLTFcIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTFcIixcbiAgICAgIFwiaW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjAuMC4xNjhcIixcbiAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgxXCIsXG4gICAgICAgICAgXCJuZXRBZGRyZXNzXCI6IFwiMTAuMC4wLjAvMTZcIixcbiAgICAgICAgICBcInBjaUFkZHJlc3NcIjogXCIwMDAwOjAwOjA0LjBcIixcbiAgICAgICAgICBcInByb2R1Y3RcIjogXCIxMDAwXCIsXG4gICAgICAgICAgXCJ2ZW5kb3JcIjogXCIxYWY0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaG9zdElQXCI6IFwiMTAuMS4wLjE2OFwiLFxuICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDJcIixcbiAgICAgICAgICBcIm5ldEFkZHJlc3NcIjogXCIxMC4xLjAuMC8xNlwiLFxuICAgICAgICAgIFwicGNpQWRkcmVzc1wiOiBcIjAwMDA6MDA6MDUuMFwiLFxuICAgICAgICAgIFwicHJvZHVjdFwiOiBcIjEwMDBcIixcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjFhZjRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiSVBQb29sXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgXCJub3RlXCI6IFwiVGhpcyByZXNvdXJjZSB3aWxsIGJlIGF1dG8tZ2VuZXJhdGVkIGFuZCBjb250cm9sbGVkIGJ5IG11bHRpLW5pYy1jbmktb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyLlxcbkRvIG5vdCBjcmVhdGUvbW9kaWZ5LlxcblwiXG4gICAgICB9LFxuICAgICAgXCJuYW1lXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sMy0xOTIuMTY4LjAuMC0yNlwiLFxuICAgICAgXCJuYW1lc3BhY2VcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLXN5c3RlbVwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJhbGxvY2F0aW9uc1wiOiBbXSxcbiAgICAgIFwiZXhjbHVkZXNcIjogW10sXG4gICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgxXCIsXG4gICAgICBcIm5ldEF0dGFjaERlZlwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDNcIixcbiAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguMC4wLzI2XCIsXG4gICAgICBcInZsYW5DSURSXCI6IFwiMTkyLjE2OC4wLjAvMThcIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIklQUG9vbFwiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgIFwibm90ZVwiOiBcIlRoaXMgcmVzb3VyY2Ugd2lsbCBiZSBhdXRvLWdlbmVyYXRlZCBhbmQgY29udHJvbGxlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5EbyBub3QgY3JlYXRlL21vZGlmeS5cXG5cIlxuICAgICAgfSxcbiAgICAgIFwibmFtZVwiOiBcImlwdmxhbmwzLTE5Mi4xNjguMC4wLTI2XCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImFsbG9jYXRpb25zXCI6IFtdLFxuICAgICAgXCJleGNsdWRlc1wiOiBbXSxcbiAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTFcIixcbiAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDFcIixcbiAgICAgIFwibmV0QXR0YWNoRGVmXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sM1wiLFxuICAgICAgXCJwb2RDSURSXCI6IFwiMTkyLjE2OC4wLjAvMjZcIixcbiAgICAgIFwidmxhbkNJRFJcIjogXCIxOTIuMTY4LjAuMC8xOFwiXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiTXVsdGlOaWNOZXR3b3JrXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzXCIsXG4gICAgICBcIm5hbWVzcGFjZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3Itc3lzdGVtXCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImlwYW1cIjogXCJ7XFxuICBcXFwidHlwZVxcXCI6IFxcXCJtdWx0aS1uaWMtaXBhbVxcXCIsXFxuICBcXFwiaG9zdEJsb2NrXFxcIjogOCwgXFxuICBcXFwiaW50ZXJmYWNlQmxvY2tcXFwiOiAyLFxcbiAgXFxcInZsYW5Nb2RlXFxcIjogXFxcImwzXFxcIlxcbn1cXG5cIixcbiAgICAgIFwibXVsdGlOSUNJUEFNXCI6IHRydWUsXG4gICAgICBcInBsdWdpblwiOiB7XG4gICAgICAgIFwiYXJnc1wiOiB7XG4gICAgICAgICAgXCJtb2RlXCI6IFwibDNcIlxuICAgICAgICB9LFxuICAgICAgICBcImNuaVZlcnNpb25cIjogXCIwLjMuMFwiLFxuICAgICAgICBcInR5cGVcIjogXCJpcHZsYW5cIlxuICAgICAgfSxcbiAgICAgIFwic3VibmV0XCI6IFwiMTkyLjE2OC4wLjAvMTZcIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIk11bHRpTmljTmV0d29ya1wiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJuYW1lXCI6IFwiaXB2bGFubDNcIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiaXBhbVwiOiBcIntcXG4gIFxcXCJ0eXBlXFxcIjogXFxcIm11bHRpLW5pYy1pcGFtXFxcIixcXG4gIFxcXCJob3N0QmxvY2tcXFwiOiA4LCBcXG4gIFxcXCJpbnRlcmZhY2VCbG9ja1xcXCI6IDIsXFxuICBcXFwidmxhbk1vZGVcXFwiOiBcXFwibDNcXFwiXFxufVxcblwiLFxuICAgICAgXCJtdWx0aU5JQ0lQQU1cIjogdHJ1ZSxcbiAgICAgIFwicGx1Z2luXCI6IHtcbiAgICAgICAgXCJhcmdzXCI6IHtcbiAgICAgICAgICBcIm1vZGVcIjogXCJsM1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY25pVmVyc2lvblwiOiBcIjAuMy4wXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImlwdmxhblwiXG4gICAgICB9LFxuICAgICAgXCJzdWJuZXRcIjogXCIxOTIuMTY4LjAuMC8xNlwiXG4gICAgfVxuICB9XG5dIiwiY2FwYWJpbGl0aWVzIjoiQmFzaWMgSW5zdGFsbCIsImNhdGVnb3JpZXMiOiJOZXR3b3JraW5nIiwiY29udGFpbmVySW1hZ2UiOiJnaGNyLmlvL2ZvdW5kYXRpb24tbW9kZWwtc3RhY2svbXVsdGktbmljLWNuaS1jb250cm9sbGVyOnYxLjIuMSIsImNyZWF0ZWRBdCI6IjIwMjMtMDgtMjJUMDg6NDY6MDlaIiwib3BlcmF0b3JzLm9wZXJhdG9yZnJhbWV3b3JrLmlvL2J1aWxkZXIiOiJvcGVyYXRvci1zZGstdjEuMjguMCIsIm9wZXJhdG9ycy5vcGVyYXRvcmZyYW1ld29yay5pby9wcm9qZWN0X2xheW91dCI6ImdvLmt1YmVidWlsZGVyLmlvL3YzIn0sIm5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLnYxLjIuMSIsIm5hbWVzcGFjZSI6InBsYWNlaG9sZGVyIn0sInNwZWMiOnsiYXBpc2VydmljZWRlZmluaXRpb25zIjp7fSwiY3VzdG9tcmVzb3VyY2VkZWZpbml0aW9ucyI6eyJvd25lZCI6W3siZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJkaXNwbGF5TmFtZSI6IkNJRFIiLCJraW5kIjoiQ0lEUiIsIm5hbWUiOiJjaWRycy5tdWx0aW5pYy5mbXMuaW8iLCJ2ZXJzaW9uIjoidjEifSx7ImRlc2NyaXB0aW9uIjoiQ29uZmlnIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjb25maWdzIEFQSSIsImRpc3BsYXlOYW1lIjoiQ29uZmlnIiwia2luZCI6IkNvbmZpZyIsIm5hbWUiOiJjb25maWdzLm11bHRpbmljLmZtcy5pbyIsInZlcnNpb24iOiJ2MSJ9LHsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzcyBpcyB0aGUgU2NoZW1hIGZvciB0aGUgZGV2aWNlY2xhc3NlcyBBUEkiLCJkaXNwbGF5TmFtZSI6IkRldmljZSBDbGFzcyIsImtpbmQiOiJEZXZpY2VDbGFzcyIsIm5hbWUiOiJkZXZpY2VjbGFzc2VzLm11bHRpbmljLmZtcy5pbyIsInZlcnNpb24iOiJ2MSJ9LHsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJkaXNwbGF5TmFtZSI6Ikhvc3QgSW50ZXJmYWNlIiwia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJuYW1lIjoiaG9zdGludGVyZmFjZXMubXVsdGluaWMuZm1zLmlvIiwidmVyc2lvbiI6InYxIn0seyJkZXNjcmlwdGlvbiI6IklQUG9vbCBpcyB0aGUgU2NoZW1hIGZvciB0aGUgaXBwb29scyBBUEkiLCJkaXNwbGF5TmFtZSI6IklQUG9vbCIsImtpbmQiOiJJUFBvb2wiLCJuYW1lIjoiaXBwb29scy5tdWx0aW5pYy5mbXMuaW8iLCJ2ZXJzaW9uIjoidjEifSx7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsImRpc3BsYXlOYW1lIjoiTXVsdGkgTmljIE5ldHdvcmsiLCJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIiwidmVyc2lvbiI6InYxIn1dfSwiZGVzY3JpcHRpb24iOiJNdWx0aS1OSUMgQ05JIE9wZXJhdG9yIGhlbHBzIHRvIGF0dGFjaGluZyBzZWNvbmRhcnkgbmV0d29yayBpbnRlcmZhY2VzIHRoYXQgaXMgbGlua2VkIHRvIFxuZGlmZmVyZW50IG5ldHdvcmsgaW50ZXJmYWNlcyBvbiBob3N0IChOSUMpIHRvIHBvZCBwcm92aWRlcyBiZW5lZml0cyBvZiBuZXR3b3JrIHNlZ21lbnRhdGlvbiBcbmFuZCB0b3AtdXAgbmV0d29yayBiYW5kd2lkdGggaW4gdGhlIGNvbnRhaW5lcml6YXRpb24gc3lzdGVtLlxuXG5NdWx0aS1OSUMgQ05JIGlzIHRoZSBDTkkgcGx1Z2luIG9wZXJhdGluZyBvbiB0b3Agb2YgTXVsdHVzIENOSS4gXG5Ib3dldmVyLCBpbnN0ZWFkIG9mIGRlZmluaW5nIGFuZCBoYW5kbGluZyBlYWNoIHNlY29uZGFyeSBuZXR3b3JrIGludGVyZmFjZSBvbmUgYnkgb25lLCBcbnRoaXMgQ05JIGF1dG9tYXRpY2FsbHkgZGlzY292ZXJzIGFsbCBhdmFpbGFibGUgc2Vjb25kYXJ5IGludGVyZmFjZXMgYW5kIGhhbmRsZXMgdGhlbSBhcyBhIE5JQyBwb29sLiBcbldpdGggdGhpcyBtYW5uZXIsIGl0IGNhbiBwcm92aWRlIHRoZSBmb2xsb3dpbmcgYmVuZWZpdHMuXG5cbmkpIENvbW1vbiBzZWNvbmRhcnkgbmV0d29yayBkZWZpbml0aW9uOiBVc2VyIGNhbiBtYW5hZ2Ugb25seSBvbmUgbmV0d29yayBkZWZpbml0aW9uIGZvciBcbiAgIG11bHRpcGxlIHNlY29uZGFyeSBpbnRlcmZhY2VzIHdpdGggYSBjb21tb24gQ05JIG1haW4gcGx1Z2luIHN1Y2ggYXMgaXB2bGFuLCBtYWN2bGFuLCBhbmQgc3ItaW92LlxuXG5paSkgQ29tbW9uIE5BVC1ieXBhc3NpbmcgbmV0d29yayBzb2x1dGlvbjogQWxsIHNlY29uZGFyeSBOSUNzIG9uIGVhY2ggaG9zdCBjYW4gYmUgYXNzaWduZWQgXG4gICAgd2l0aCBub24tY29uZmxpY3QgQ0lEUiBhbmQgbm9uLWNvbmZsaWN0IEwzIHJvdXRpbmcgY29uZmlndXJhdGlvbiB0aGF0IGNhbiBvbWl0IGFuIG92ZXJsYXkgbmV0d29ya2luZyBvdmVyaGVhZC4gXG4gICAgUGFydGljdWxhcnlseSwgdGhlIENOSSBpcyBidWlsdC1pbiB3aXRoIEwzIElQVkxBTiBzb2x1dGlvbiBjb21wb3Npbmcgb2YgdGhlIGZvbGxvd2luZyBmdW5jdGlvbmFsaXRpZXMuXG5cbiAgICAxLiBJbnRlcmZhY2UtaG9zdC1kZXZpc2lvbiBDSURSIENvbXB1dGF0aW9uOiBjb21wdXRlIGFsbG9jYXRpbmcgQ0lEUiByYW5nZSBmb3IgZWFjaCBob3N0IGFuZCBlYWNoIGludGVyZmFjZSBcbiAgICAgICBmcm9tIGEgc2luZ2xlIGdsb2JhbCBzdWJuZXQgd2l0aCB0aGUgbnVtYmVyIG9mIGJpdHMgZm9yIGhvc3RzIGFuZCBmb3IgaW50ZXJmYWNlLlxuICAgIDIuIEwzIEhvc3QgUm91dGUgQ29uZmlndXJhdGlvbjogY29uZmlndXJlIEwzIHJvdXRlcyAobmV4dCBob3AgdmlhIGRldikgaW4gaG9zdCByb3V0ZSB0YWJsZSBhY2NvcmRpbmcgdG8gdGhlIGNvbXB1dGVkIENJRFIuXG4gICAgMy4gRGlzdHJpYnV0ZWQgSVAgQWxsb2NhdGlvbiBNYW5hZ2VtZW50OiBtYW5hZ2UgSVAgYWxsb2NhdGlvbi9kZWFsbG9jYXRpb24gZGlzdHJpYnV0ZWRseSB2aWEgdGhlIGNvbW11bmljYXRpb24gXG4gICAgICAgYmV0d2VlbiBDTkkgcHJvZ3JhbSBhbmQgZGFlbW9uIGF0IGVhY2ggaG9zdC5cblxuaWlpKSBQb2xpY3ktYmFzZWQgc2Vjb25kYXJ5IG5ldHdvcmsgYXR0YWNobWVudDogSW5zdGVhZCBvZiBzdGF0aWNhbGx5IHNldCB0aGUgZGVzaXJlZCBcbiAgICAgaG9zdCdzIG1hc3RlciBpbnRlcmZhY2UgbmFtZSBvbmUgYnkgb25lLCB1c2VyIGNhbiBkZWZpbmUgYSBwb2xpY3kgb24gYXR0YWNoaW5nIG11bHRpcGxlIHNlY29uZGFyeSBuZXR3b3JrIFxuICAgICBpbnRlcmZhY2VzIHN1Y2ggYXMgc3BlY2lmeWluZyBvbmx5IHRoZSBudW1iZXIgb2YgZGVzaXJlZCBpbnRlcmZhY2VzLCBmaWx0ZXJpbmcgb25seSBoaWdoc3BlZWQgTklDcy5cblxuIyMgSW5zdHJ1Y3Rpb25zXG5cblBsZWFzZSBjaGVjayB0aGUgW1VzZXIgR3VpZGVdKGh0dHBzOi8vZm91bmRhdGlvbi1tb2RlbC1zdGFjay5naXRodWIuaW8vbXVsdGktbmljLWNuaS91c2VyX2d1aWRlLykiLCJkaXNwbGF5TmFtZSI6Im11bHRpLW5pYy1jbmktb3BlcmF0b3IiLCJpY29uIjpbeyJiYXNlNjRkYXRhIjoiaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUYwQUFBQlNDQVlBQUFBMko5Z1dBQUFBQVhOU1IwSUFyczRjNlFBQUFJUmxXRWxtVFUwQUtnQUFBQWdBQlFFU0FBTUFBQUFCQUFFQUFBRWFBQVVBQUFBQkFBQUFTZ0ViQUFVQUFBQUJBQUFBVWdFb0FBTUFBQUFCQUFJQUFJZHBBQVFBQUFBQkFBQUFXZ0FBQUFBQUFBQklBQUFBQVFBQUFFZ0FBQUFCQUFPZ0FRQURBQUFBQVFBQkFBQ2dBZ0FFQUFBQUFRQUFBRjJnQXdBRUFBQUFBUUFBQUZJQUFBQUFxcVRSUGdBQUFBbHdTRmx6QUFBTEV3QUFDeE1CQUpxY0dBQUFFaTVKUkVGVWVBSHRuQXU4VkZXOXg5ZmFlK2JNU3lPRjFKdXBnRWdwbU0rUFlYM3lnV2FKMWYya21aV1B5RThrcWZlV2hTU1lHUi9mbVpwSlZ6T1ZoMW40b3JxSXJ5dWdRbVRtSTgxVVRMeUtVQVNDR0p6Wk0yZG05dXI3M3pQN3NHZk9nOW5EM2dmeU0rdkRacSs5OW5yODEyLy8xLysxMWh5bDJxbU5RQnVCTmdKdEJOb0l0QkZvSTlCR29JMUFHNEUyQW0wRUJnU0JURGFibnBiSnBsL2xLbVJ5NlZmUzJmUkZqSndha05HM3cwRjB6RFJsTXRuTVFxM1ZtTVp4akRLUE81MkY0eWd2TnI0YndHZWR6cVZQQTRUeHlxaGhqUHMzWmN5ZGpsTzhpWHhwQU9tSWJpamg4R3d1WStEd045THA5Rmg2VHFkeXFlUDRFS3VrbkFsUGlXNjAwRDNwVENZOVcraG92RmlOQytndHRwVVlLNmNEOW5LdDlYQzNZbzRwRkFvTGZWaFMyZFFKdHJidU0wYXQxTXJNOXN2RDNjMktmTDc0czNCdE50Zm1nNCszbEo3Qml0dW9qWnJrdXVvUmFEMlVWWG05MG1vM09INWFQbC80d2VZVzBlWGlCcjNBUkZMNVRpY0x5VTZBN0ozZ3J2V0I1NWF5bGJMN29XS3h1Q3lWU24zUXR0V3hmTVNtNTZNdFBWRXBQY28xNW11RmZPRldud0JXNURHV3JSOHh4cnpwNUF0Nyt1VlIzaE5SZHRhakw2MVdVTFlQSXVXSVltZnhJZjk5TnR0eHBPU1oyQnRHcVp2OThtYnZsdGJmcE80dXRPK1FOb0IwcTlMNlkzQnA2S1NOZmpqWVNGWWtLN1FDcyt4QnVlQlREcjZQSWg4cjZIRGViSUM0eERiV2pHdzJkUmJpWUdrbTAzR0UwcllvS2xEWE54UWM1NXF3RThubTBsK0dTM2Z4MjJtbGMxNTN5dHhGbjJ2OThpM2MveFBhUHFCMTVXRHF2ZW5YVGVhU0g2WS9tK2UzdUNJSDNCK25wVHRMK2hNb3hOK0lDY2o5U2N6QTc5SFJEZzJkcFhpL3FGRlJlYy9adEhCK3NxRitVNCtBL29MMDBkSFJzYjgweUdZeno4cHpNcHNVQUp0S21WeG1rclNCOXBXSWxDT2trZlRuOTAzNTlLWTZHcWhLQUR6VkE2Nkg1ay8vQlJxR05ORFJ3UVFuVS84NXJyY0VvRXdtODIzcXRMektmR0MyQm5UR1R5RkdGdnZ6SU4vVm5jK2xYK2I5emczejJIYVBtVXh5akJBSGtXWEF2MWlVR0RMN1UzRDB5MTU1THYycnVLbUxDSFFoVXh5M3kyQ0V2OVVBWHdlSC81VHlXQUVQelcxYTIyZDZvR3B6ZmFHek9NM0xGOVV5bHVnNFpSbmhrTThqdjVkd2Q3MTNFZjFYVWVyMVlyNzRRRVRkK2QwNG1JVVg4aUNYS09VdS8wWHd6dHlHS1V1ZGdRN1lCMTJ5aHBuZDZ6ak83NEoxd3VSRGcyNjBHaTVHZ2x0V0R3WUhRdXUvQmdmK0ZhTDI0NHBjSG9wbVF5enR5V1M3bFY1dy9Banl2UU9lUzUrT0hYOEwxb3huS1hualdPbzhWdmxObUpwbjg0d0JGaTZGQnAzdVY4c1FWc0k2Q0FmKy93TEQ3WVMxc3BjWWdueVVuOFBta1hFNkp1S1hHR2RRcFZMeHJKVEFtTEZtUlRFRCtHMEFuc0NKdWd0MDc5T3VHb1UzOEMxb21wakpwSllSTXZoeFdDSkNnNjROWnBuV3A0THRSWmgvZjNXY3J0OWtNdXI5MmtyUGhNTnpFTGN3MzFrNEt5d2gvZFZIWDR6RmpCdlVYNTNHZDlDMGUxa25kMjBzRC9PY1VJbnZJVklTTU5PTk9FckMxVjVpM2s5aFZkNnR0UFVkQ3VJSEhWdjdmd0hoRHI3K3FRdzhGNFZhWkdDV0h1UXB0ZDR0bTI3aVBBcTN6WCs3S3AxZW5zUWJqbUo0cmNyZEhxdjBCNlBkZytKOVIreDhIZ2R6clpQeVpsT2ZuQzVXaVdXcDQ0M1dnN1J4LzhKQTgraFVBRlpFQjg5QXZqNmp0RGtYOElmaEdUcXk5RXpGWElCYi9scXpnOGRWRDFQeWZkQ1ZncTRDSytTbGxzZlJabStZNlQwVlpYVTdZclcrZHFUdkRIa1JvY0h3UmxORDlRYTZ6dVJTVitQWm5RZmhsckN2T0dodzlQK1hkZVZ6cGM3U2M1UzRLTFJydWN1VjVwS1BFVnFoMENiV0JDZStSdHluYVllcGtSaHgrQURnRWx2ckg2cXMrcFBLcTc5VFJ4eStHL21ZSFlqU1Izbk9ON2JiMG5NUDBIRmt6Z2ZvNzlCaEJiazlpdzVXb0RnK3p3ZllOMmtTRDVaVUNldEV2UjNvdUJESXY2dXlXQ2MvZ2RtK3d0eEhaMVQ2RlpWVHo4Q01JOERuL2RWVlZKblV5b1FiUVUvUzRSU3ZJK04rSWU5MHphMTFlaGxPdzZOd3poaSsvbjlCelBXdERCYWlqWmh2b1pkdGlQNmJyZnBQclFwSEtwTVdrL0Y0R2hFM2txYm1KY0Nma0hkS1R6ZmJVYkJlSGVqSXdnL3g4cjF3K1N2SWNCOXdxVjlFZUZ6SGdIZGlLc25HeExSZ0oxSG40U0pJMEY5Q2hOMFpkZDk5OVljT0cybFoxdnNjN2J4V0V5TmUxWHllM1NSVkdJYzE5QUZqMGlOYzExM1QxZFgxWWwvOU5GTmVCem9OY1B4SXh2UE92S3ovSHpoMElNY2tIRnVDNDJQalF1Qk93VlZZSGViRGpCMDc2QkxXMEZiaVpzYnlnbWZzWnhtVjFmY0IvdGRWWjlVbkVRd2NSNjBFZks2dFQzV2c4d1ZmVGlReXE1bjBVRno1Y3pBUEpRNGhhU2ZMVmxPOW5ER1RLUCtKbDQvaFAxRmVyT0JMWXVpNlI1YzRQd2NwWlMva2hWZ2kvNENobG5NL0VLYjZEREw4TVVjVkR1VjVJMWVreVdyb2pWMHJJM0VJTEJack9scDZBUUdobVlnVHpDNjlMMFM5aWdkMlMwT2JmOXZIaExhdmhzRXl5TEk1V0RsRGNZQStwa3hoSkt2c1JWYjFTQmpnditPWVhCMm55d0FveWR0d2IzZkUxN2tjZ3NaV0ZRZGtHUFVINDZwVHFPS2JTSmJFb1MzTDdHZU05VGJ5OXhIZU5idUJJRU1OWkxMWWhKN0puRVJuYlU3R0hBTGdKY0NlU0tGbmhTRkdWcVd5NW56TXhQbXN1SEdVWDdhNVFUUzVIcUJMdDNDeldDZTM0KzRlYmJTRmMxVEJPU3I5d1I5U2xJNmRzTzdtR2JrTFQwQWRwcFhEbDdtUXR0ZjU5YmFiZTFidENnT2QzcE1lQ0srS2ozZUM3MXpscnJZSks5S21jVk1tV0szbGZLK2cxM3BiandWemJ5ODlENUtOVzhyM1FOeThpVWMwSHhrMURBSS9DWlhYc3N2K2RxR3pNTE9YZHR1c0NQa0JndDd3NjR4YkZ1NnRKcDJZQzhQc0RuT2RHTFRXaUxsOFZTcXdDcDZ2MVl6MDFoL292UTZFOHpRUit2ZUFvbWRZbGtkUnlWTTBvbmhGRDdEUks4dHhGdGQyNDZFQ2JKVVdvMHFzMkNlaHpVdVpqSFVOTkYvTGRRZTY2eHJpb3krd0ovQnA1bmNxREZYUnFoS0xQeElhZEtLTU9BaGlPbGF1Z1BKdXpTNldEZzdVRkk5ek9ENVhtMWRUTjFaSm5yTXhueVVtdjdpcEJoRlZrckFzWU8vSCtGK2p5d3VoblZRMWk0bFBuK1YwbHA2S2FLaTZia0tEN2xGVjdhSnEwOWQxUitqQWsvR0JnSC9kK3o0Zk9wajRZYnlOQlhTTUFMcnZkV3pEenRFRURJSmZFR1U2aVFEZUxzVFBYNFVCWmhLNGU5VnZJWHV4ZHRJK2szY2pXTUJyaVkvY3l5N1dmUDk5Mkh0bzBBbXJMVVdHSDgrU1BKL0JIdUR5dUJwWmZnWXFkVStlMTJCK0RlUGV5MGVodENFaHJuNElIckdZWnY1UXNqRDlmRzkzVnRoamxNdlZJeUUyeithYjNRQ05OYjJnbGEzMFZ6R241eEJ0UFkwR1RjMHoySEdqblI1ODEyc2VrL0pHWHZ3RDFqbWNnWi9Edkx3SzRPNkNDMlo2RFl3N2pidVlsUko1Yk9ZS1RiUTNUb2ovaE5ORFZPK3VTdmo2Y0FHY0FwRTVOeXZqZnBhdk53VjV2d2tHK3lLTU5ybTdjb2hNYUU2bjczVWxWZjVrd3RqM0F2eElaV2x2WUlncGMwVHQwa0srK0Q4aHhxZXFTOVBRM3o3VUVOMmNybFVIb21Sc3M0MjFOcE1RVEpaUjdqWDV6cUlmVVp6SFdjem40ZmI1bHRHeVFxL2s2bmNsTlk3WEN1aEtZdW9TNHVWNEhKc2M5cjVzY213d3JuNkFaZnFHUHdCeWNKU2R0QzZBbkk5UzVzSnFpeXNWY3dXeWtzM3JZS3FHN0lNbFVlZFpkaVpiN1hSbnpOMEZZZnN2Ry9lT1lCdmsrZjE0NlJ2Zy85MG9IOHdscDhHYVRpMkJYdXU5SzUvditpMTV1ZXFTbklPQkMzN05Fa3dIRnZZSTRqY253MmtuOEhFZTM5d2dmazVIMkswRzlSdFJsUFVlNldZaWVzMUJ2d1RCaGlUUlZTV2xuZzFVMmhrUkk1dmtJaG8zQmNxYnltNE42SDBOc0NQZTNPMkFUYmpPM0ZFcHVXSzMyM2JDbm9ZNE9oRko4a3VlUjNEVnpNcjRPWjJ4akpOM3p1WWVLcUdySnJOQ3I4SzMraEZlK0F1czB1VjBzQU9tOGEySXJDUnkvaUdlUTVuSFFrRGtvS044UGtPL1F5UldnL04wT3ZtcXZPdFNwM0F1NWxtQUh3M1JQMElweVFUa05kdHBMZW01YXZNWS8zYzZuZW1Ja2RPZ2VYOVc2WXVjQkhzSlV2ZGl5UGVLTXVXb3RpL25RMUVST2VoR202RXNTN0EwaTZBa3FHREtlSHlQd1NHanVjUjdiU0RVWlFWdmR5bVArWHNVVnRwMEtEdVphUjBnRk1KUVQ3QmYvSTFTVittRkdzVUUxRG8reDE3eTBaZzVIWmpWVDJMbGlSNXdhdS9yYnBHRERtR3llU3VZSGxvM1V2WGhFTGxCOUZ6cXJmRGY0K1VTcEN6V0tTdi8zWFp3WDQ4OS9tWG9PSnRqMUVNVGJtbXRSQ0lEZE8xTXNPOCtWc1BoMVRJdHR0Z0V5cWF5RXNiSkhrV2dycGVOSEhTQ1hmTVljQk5FSEVzNDlRckhLWWhNdHhBcGw4TGhZOGl2Ujc2TzU5NGRRaUQvNzVBMllMWDlxWEU1SW5KbXdVQ0hzNlpYRXpxNEZrc3VqNWs1a2ZtUEpoSTdqOU9SbzVoY1YzQ0NrWU5PNTI4eCtEbXc4d3hjNnd2NEFOK0ZBRTlvU3hBSldmNTE2Z3dJNEt5b0ZLYnI2T0NFbzh6ckJML1cwT3JUR0F3YjJkUDlDTXprcjk3YkVFbWl2ejZJamlPQzZjd0pqaHNINkFwdW40MXB1RXJaNW1JR0d3UFk0aE11Z2JDTENhRXVDUklRVTk3VEpVeDY3MFRTL25OTVl3UzYxUThDckErNGxEdk0rQmV3R3R1TzVrQ2VJd085QStkb25LdXRmUzFqTnJoVjUraDFHVkVTdHZnQ2JuTDVwa2xRcVVxVjJCSnlkSGtpa2I2ZmtmZUtiUkE2QnRnY0gzWW91Y0dONDFEdWxiSHE4YzNxVTB1Y2prSTVnREFBeWxBUFIya0FLL2FLWmNxRVNTOG5haWZjSFV3REJuWmcwQUowbkJCNGppc3JTblFsQUk4bERuTTZLL3gyR1VoT0dQQkZ6dkp3TVpXSEd3ZjNNR3NzM01MejRLUktQTVJBdzVGbHk0eHJjQjZNSEpVZ0hLRy83MjFtYktHRGQ5SHI5Y3g1bXN5SEVPUnNsT3JUZklURm1JNUx3RWMydkgvRnBza1RqZk1OemVuc2tJdG50eXRpZWluT3oxanlFa2xVZkduWnlKME55MytmeDVsY21LdmhFMXlRRE44cS9oYm9LQkZWY3Rob0xlSkw5SVMzZ25HZ3JpTFMya1hnYnhwQUh5dytDdGlVZURrZFU5TUxCalpTRnhwMFFKRUFGbDI3VjNQekFKZG5XVnA4WmN4Q3ZTZGUzQ1lwZXpja09lZk8yZnNaelBnVE1oK0xYd25ieWZRcjJHRVQvQmhTYlRQK0ppeVZRd0M4ZzNLSjA3emQxL3hEZzg3Z0Zla01KZEpMVysvM2wvS2w1V040bk5EWHdQMlZveUs2c0MyWDlsZG5nTjROSW1iM0dIUGVtK244a3drOXhhejJnYkVJYVp1SHM5bmt4L1A1MGg5cnRHREFPRXVhb2FzWDRQcHZoalorSERGeUFqLzRta3JOaDdnMlNndVdHR2ZWMWU1OGpGV0luVDBvYWhsMDZXOTdTSWpTYndJd2dLcy81eFYvc2FONnpBNnJMZjF6eXM4d3ltYTFsNDRLUzJ0bzBKRmhQME9Nbk1PZ0IrRmxjaExLM00rZ1ExRW94OG5neEY0dWxKdmtCenB4WW10T01wZm9OZDdSQ2kwb3dtSFNycUxjeVlGempZUzBDK2VDd1JkNWRRU1hoT3A3bUlXVTlabENnMDVQNzdCeGU2eHQ2N3ZoYkFKQVdqeE1FU2x5MkdocXdTbk82bk8wbUY3d2hWZXcrZzVFaWUwVDVSQ2lGQ1haeG0zY3BOZ0kwOG5IN2VDU2M1Q3hnNjVxdXo4SG85RS96ckU2empoYUc0aXh5QUdrUnVJb1VrT29ONnBpVlRhVzh0NnZPRHlkSUMraVNyamZwK0R1anpSSmhGK0VLV0VTRjhGWUp3SDdCTVRJVTM3WEtNd3ZrQjhFbzczSmZaMWZ2ajNjZDBEMnpXUVpWckJtcW4vSWhsOG1RL0RKWVlrampyRk0rZ0JZYitlbjhSZlRZZnRydGo1TzRJSFFYNUt4RWFYM1lCYVBsNThHVVZiMHlqS3BsazR4dENKZW1xSFpBcWg1aUo2akVEbGRjTVNUckZRNVQ0am1WM2NSZXo2WkdNdzl6WFFVWXgzTkNqeGEyL3BnNWJvRjltOFhZSCsvRkJ4UG9vcUpUT0lyeUhiNUxlbEppQnU0bnNYRVB3eUduMklxM2hDc3YwM3p3czAxN2w0RGQrNVhJMGJEK2JVL0w1VlpTVm5UM25EVW5DNjJONXo3UkkxR2J4WEN2UzcwM1F4ZFBad3pjWXprM0x5M2NvWFR4YzNmaWhRTHAzTjA0VlBDRHNaMXI0QjdYcXpSSjZlcGZzRGtaUHRyT0NMaWVVeWR4dkIwcjFOaHBld2wzQlZSU3VDaHo2ZS9BN0N4SkFZK2gwMlVRZlRONzJMMUJQWkZPN0hRemd1T2hiUHpCcytYQnN1MkpoOEw2RXdrSnhpeFBiZW1nVGdNRFMzS2RqaDMrYmwzVTZubVdoZjRnSFdLMmlSTWt1MEJzU0NhVHF4Q2pzK3BBL2lRSy9BbjVPZU9uaUtFbTJmZzhDemkrVnl1eTduV2NzV1M0Z0hkcU9lUjNhZmduNTRKMWIvazh1ejI2czlOT0loditJdEJSaDlaMXVXbWJXck8yYXltbnpyUWt6cnhOSFo1YThCb0xUL3Q2Ylk4NE9iRmlMRkgrY0RIY0pqb3NLMDVxN2dsZ2xxa3VQOXUyWlM5QlhuSjcxSDFXQ2F5Q01SbjBXSTNJbkdUdWR1Y0JMdUpQeU8xdFA5ZStuN0xDbnFVN3lnMmVaTnJwYTR2Zm1RaHA3YU1YVmRhZmZETFBDYnA1ZjMyWGNSeVBSTGcxd2VWbFpmUHNybFFkU2kyeVFUa0J3QkNCNHAwRmI3a2YvaEVWUDllWk5vVmM1Q3l3WDU1SFBkV09DVU1IVU5RVE9OUlZQdXpYN2VKbjVYY0grZXliWkl3MlNUL1BlTHZNT3F2Ui9ITWxiOS93UDFFVmdET3A3a1NSMjlLazMyMXE0VkFZQmZFM3NMZ0tvVER5ekRJZGZUaGk1Z1EzWVdyR2plbmg2Tm1nR3RqYngrR2VEL0UxYnBBVkdzUnl2VDFBU2FoUFZ3YmdUWUNiUVRhQ0xRUmFDUFFScUNOUUJ1Qk5nSnRCTm9JdEJGb0kvRHVSdUJmS2VWblM3VTVaeEFBQUFBQVNVVk9SSzVDWUlJPSIsIm1lZGlhdHlwZSI6ImltYWdlL3BuZyJ9XSwiaW5zdGFsbCI6eyJzcGVjIjp7ImNsdXN0ZXJQZXJtaXNzaW9ucyI6W3sicnVsZXMiOlt7ImFwaUdyb3VwcyI6WyJtdWx0aW5pYy5mbXMuaW8iXSwicmVzb3VyY2VzIjpbImNpZHJzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsiY2lkcnMvZmluYWxpemVycyJdLCJ2ZXJicyI6WyJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJjaWRycy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJjb25maWdzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsiY29uZmlncy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJob3N0aW50ZXJmYWNlcyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0IiwicGF0Y2giLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJtdWx0aW5pYy5mbXMuaW8iXSwicmVzb3VyY2VzIjpbImhvc3RpbnRlcmZhY2VzL2ZpbmFsaXplcnMiXSwidmVyYnMiOlsidXBkYXRlIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsiaG9zdGludGVyZmFjZXMvc3RhdHVzIl0sInZlcmJzIjpbImdldCIsInBhdGNoIiwidXBkYXRlIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsiaXBwb29scyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0IiwicGF0Y2giLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJtdWx0aW5pYy5mbXMuaW8iXSwicmVzb3VyY2VzIjpbImlwcG9vbHMvZmluYWxpemVycyJdLCJ2ZXJicyI6WyJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJpcHBvb2xzL3N0YXR1cyJdLCJ2ZXJicyI6WyJnZXQiLCJwYXRjaCIsInVwZGF0ZSJdfSx7ImFwaUdyb3VwcyI6WyJtdWx0aW5pYy5mbXMuaW8iXSwicmVzb3VyY2VzIjpbIm11bHRpbmljbmV0d29ya3MiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJtdWx0aW5pY25ldHdvcmtzL2ZpbmFsaXplcnMiXSwidmVyYnMiOlsidXBkYXRlIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsibXVsdGluaWNuZXR3b3Jrcy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsibWVsbGFub3guY29tIl0sInJlc291cmNlcyI6WyJob3N0ZGV2aWNlbmV0d29ya3MiLCJuaWNjbHVzdGVycG9saWNpZXMiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbIiJdLCJyZXNvdXJjZXMiOlsicG9kcyIsIm5vZGVzIiwibmFtZXNwYWNlcyJdLCJ2ZXJicyI6WyJnZXQiLCJ3YXRjaCIsImxpc3QiLCJwYXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJhcHBzIl0sInJlc291cmNlcyI6WyJkYWVtb25zZXRzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbIms4cy5jbmkuY25jZi5pbyJdLCJyZXNvdXJjZXMiOlsibmV0d29yay1hdHRhY2htZW50LWRlZmluaXRpb25zIl0sInZlcmJzIjpbImNyZWF0ZSIsInVwZGF0ZSIsImdldCIsIndhdGNoIiwibGlzdCIsImRlbGV0ZSJdfSx7ImFwaUdyb3VwcyI6WyJzZWN1cml0eS5vcGVuc2hpZnQuaW8iXSwicmVzb3VyY2VOYW1lcyI6WyJwcml2aWxlZ2VkIl0sInJlc291cmNlcyI6WyJzZWN1cml0eWNvbnRleHRjb25zdHJhaW50cyJdLCJ2ZXJicyI6WyJ1c2UiXX0seyJhcGlHcm91cHMiOlsiYXV0aGVudGljYXRpb24uazhzLmlvIl0sInJlc291cmNlcyI6WyJ0b2tlbnJldmlld3MiXSwidmVyYnMiOlsiY3JlYXRlIl19LHsiYXBpR3JvdXBzIjpbImF1dGhvcml6YXRpb24uazhzLmlvIl0sInJlc291cmNlcyI6WyJzdWJqZWN0YWNjZXNzcmV2aWV3cyJdLCJ2ZXJicyI6WyJjcmVhdGUiXX0seyJhcGlHcm91cHMiOlsic3Jpb3ZuZXR3b3JrLm9wZW5zaGlmdC5pbyJdLCJyZXNvdXJjZXMiOlsic3Jpb3ZuZXR3b3Jrbm9kZXN0YXRlcyJdLCJ2ZXJicyI6WyJnZXQiLCJsaXN0Iiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsic3Jpb3ZuZXR3b3JrLm9wZW5zaGlmdC5pbyJdLCJyZXNvdXJjZXMiOlsic3Jpb3ZuZXR3b3Jrbm9kZXBvbGljaWVzIiwic3Jpb3ZpYm5ldHdvcmtzIiwic3Jpb3ZuZXR3b3JrcyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0Iiwid2F0Y2giXX1dLCJzZXJ2aWNlQWNjb3VudE5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlciJ9XSwiZGVwbG95bWVudHMiOlt7ImxhYmVsIjp7ImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifSwibmFtZSI6Im11bHRpLW5pYy1jbmktb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyIiwic3BlYyI6eyJyZXBsaWNhcyI6MSwic2VsZWN0b3IiOnsibWF0Y2hMYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RyYXRlZ3kiOnt9LCJ0ZW1wbGF0ZSI6eyJtZXRhZGF0YSI6eyJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3BlYyI6eyJjb250YWluZXJzIjpbeyJhcmdzIjpbIi0tc2VjdXJlLWxpc3Rlbi1hZGRyZXNzPTAuMC4wLjA6ODQ0MyIsIi0tdXBzdHJlYW09aHR0cDovLzEyNy4wLjAuMTo4MDgwLyIsIi0tbG9ndG9zdGRlcnI9dHJ1ZSIsIi0tdj0xMCJdLCJpbWFnZSI6Imdjci5pby9rdWJlYnVpbGRlci9rdWJlLXJiYWMtcHJveHk6djAuOC4wIiwibmFtZSI6Imt1YmUtcmJhYy1wcm94eSIsInBvcnRzIjpbeyJjb250YWluZXJQb3J0Ijo4NDQzLCJuYW1lIjoiaHR0cHMifV0sInJlc291cmNlcyI6e319LHsiYXJncyI6WyItLXphcC1sb2ctbGV2ZWw9NCIsIi0temFwLXRpbWUtZW5jb2Rpbmc9aXNvODYwMSIsIi0taGVhbHRoLXByb2JlLWJpbmQtYWRkcmVzcz06ODA4MyIsIi0tbWV0cmljcy1iaW5kLWFkZHJlc3M9MTI3LjAuMC4xOjgwODAiLCItLWxlYWRlci1lbGVjdCJdLCJjb21tYW5kIjpbIi9tYW5hZ2VyIl0sImVudiI6W3sibmFtZSI6Ik9QRVJBVE9SX05BTUVTUEFDRSIsInZhbHVlRnJvbSI6eyJmaWVsZFJlZiI6eyJmaWVsZFBhdGgiOiJtZXRhZGF0YS5uYW1lc3BhY2UifX19LHsibmFtZSI6IlBPRF9OQU1FIiwidmFsdWVGcm9tIjp7ImZpZWxkUmVmIjp7ImZpZWxkUGF0aCI6Im1ldGFkYXRhLm5hbWUifX19XSwiaW1hZ2UiOiJnaGNyLmlvL2ZvdW5kYXRpb24tbW9kZWwtc3RhY2svbXVsdGktbmljLWNuaS1jb250cm9sbGVyOnYxLjIuMSIsImltYWdlUHVsbFBvbGljeSI6IkFsd2F5cyIsImxpdmVuZXNzUHJvYmUiOnsiaHR0cEdldCI6eyJwYXRoIjoiL2hlYWx0aHoiLCJwb3J0Ijo4MDgzfSwiaW5pdGlhbERlbGF5U2Vjb25kcyI6MTUsInBlcmlvZFNlY29uZHMiOjIwfSwibmFtZSI6Im1hbmFnZXIiLCJyZWFkaW5lc3NQcm9iZSI6eyJodHRwR2V0Ijp7InBhdGgiOiIvcmVhZHl6IiwicG9ydCI6ODA4M30sImluaXRpYWxEZWxheVNlY29uZHMiOjUsInBlcmlvZFNlY29uZHMiOjEwfSwicmVzb3VyY2VzIjp7ImxpbWl0cyI6eyJjcHUiOiIxMDBtIiwibWVtb3J5IjoiNTAwTWkifSwicmVxdWVzdHMiOnsiY3B1IjoiMTAwbSIsIm1lbW9yeSI6IjUwME1pIn19LCJzZWN1cml0eUNvbnRleHQiOnsiYWxsb3dQcml2aWxlZ2VFc2NhbGF0aW9uIjpmYWxzZX19XSwiaG9zdE5ldHdvcmsiOnRydWUsInByaW9yaXR5Q2xhc3NOYW1lIjoic3lzdGVtLWNsdXN0ZXItY3JpdGljYWwiLCJzZWN1cml0eUNvbnRleHQiOnsicnVuQXNOb25Sb290Ijp0cnVlfSwic2VydmljZUFjY291bnROYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIiLCJ0ZXJtaW5hdGlvbkdyYWNlUGVyaW9kU2Vjb25kcyI6MTB9fX19XSwicGVybWlzc2lvbnMiOlt7InJ1bGVzIjpbeyJhcGlHcm91cHMiOlsiIiwiY29vcmRpbmF0aW9uLms4cy5pbyJdLCJyZXNvdXJjZXMiOlsiY29uZmlnbWFwcyIsImxlYXNlcyJdLCJ2ZXJicyI6WyJnZXQiLCJsaXN0Iiwid2F0Y2giLCJjcmVhdGUiLCJ1cGRhdGUiLCJwYXRjaCIsImRlbGV0ZSJdfSx7ImFwaUdyb3VwcyI6WyIiXSwicmVzb3VyY2VzIjpbImV2ZW50cyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJwYXRjaCJdfV0sInNlcnZpY2VBY2NvdW50TmFtZSI6Im11bHRpLW5pYy1jbmktb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyIn1dfSwic3RyYXRlZ3kiOiJkZXBsb3ltZW50In0sImluc3RhbGxNb2RlcyI6W3sic3VwcG9ydGVkIjp0cnVlLCJ0eXBlIjoiT3duTmFtZXNwYWNlIn0seyJzdXBwb3J0ZWQiOnRydWUsInR5cGUiOiJTaW5nbGVOYW1lc3BhY2UifSx7InN1cHBvcnRlZCI6ZmFsc2UsInR5cGUiOiJNdWx0aU5hbWVzcGFjZSJ9LHsic3VwcG9ydGVkIjp0cnVlLCJ0eXBlIjoiQWxsTmFtZXNwYWNlcyJ9XSwia2V5d29yZHMiOlsibXVsdGktbmljIiwiY25pIiwibmV0d29yayJdLCJsaW5rcyI6W3sibmFtZSI6Ik11bHRpLU5JQyBDTkkgT3BlcmF0b3IiLCJ1cmwiOiJodHRwczovL2dpdGh1Yi5jb20vZm91bmRhdGlvbi1tb2RlbC1zdGFjay9tdWx0aS1uaWMtY25pIn1dLCJtYWludGFpbmVycyI6W3siZW1haWwiOiJzdW55YW5hbi5jaG9vY2hvdGthZXcxQGlibS5jb20iLCJuYW1lIjoiU3VueWFuYW4gQ2hvb2Nob3RrYWV3In0seyJlbWFpbCI6ImNoaWJhQGpwLmlibS5jb20iLCJuYW1lIjoiVGF0c3VoaXJvIENoaWJhIn1dLCJtYXR1cml0eSI6ImFscGhhIiwicHJvdmlkZXIiOnsibmFtZSI6IkZvdW5kYXRpb24gTW9kZWwgU3RhY2sifSwicmVwbGFjZXMiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLnYxLjAuMiIsInZlcnNpb24iOiIxLjIuMSJ9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9tZXRyaWNzIl0sInZlcmJzIjpbImdldCJdfV19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlIn0sInNwZWMiOnsicG9ydHMiOlt7Im5hbWUiOiJodHRwcyIsInBvcnQiOjg0NDMsInRhcmdldFBvcnQiOiJodHRwcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.2.1
  name: ""
- image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:22988421ffe9056d474108040d5e812e44d42edaee93d30095785e539674695e
  name: ""
schema: olm.bundle
---
image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:b0c63a70993df477b1e04c989ee09fa5cd12e65339043a6616346d484fe84d89
name: multi-nic-cni-operator.v1.2.2
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.2.2
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibGlzdEtpbmQiOiJNdWx0aU5pY05ldHdvcmtMaXN0IiwicGx1cmFsIjoibXVsdGluaWNuZXR3b3JrcyIsInNpbmd1bGFyIjoibXVsdGluaWNuZXR3b3JrIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIE11bHRpTmljTmV0d29yayBNYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbCBTdWJuZXQgaXMgZ2xvYmFsIHN1Ym5ldCwgZGVmYXVsdDogMTcyLjMwLjAuMC8xNiBJUEFNIGlzIGlwYW0gc3BlY2lmaWNhdGlvbiBNYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uIFBvbGljeSBpcyBnZW5lcmFsIHBvbGljeSBvZiB0aGUgcG9vbCIsInByb3BlcnRpZXMiOnsiYXR0YWNoUG9saWN5Ijp7ImRlc2NyaXB0aW9uIjoiQXNzaWdubWVudFBvbGljeSBkZWZpbmVzIHRoZSBwb2xpY3kgdG8gc2VsZWN0IHRoZSBOSUNzIGZyb20gdGhlIHBvb2wgU3RyYXRlZ3kgaXMgb25lIG9mIE5vbmUsIENvc3RPcHQsIFBlcmZPcHQsIFFvU0NsYXNzIFRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHMgcmVxdWlyZWQgZm9yIENvc3RPcHQgYW5kIFBlcmZPcHQiLCJwcm9wZXJ0aWVzIjp7InN0cmF0ZWd5Ijp7InR5cGUiOiJzdHJpbmcifSwidGFyZ2V0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0cmF0ZWd5Il0sInR5cGUiOiJvYmplY3QifSwiaXBhbSI6eyJ0eXBlIjoic3RyaW5nIn0sIm1hc3Rlck5ldHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwibXVsdGlOSUNJUEFNIjp7InR5cGUiOiJib29sZWFuIn0sIm5hbWVzcGFjZXMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwicGx1Z2luIjp7ImRlc2NyaXB0aW9uIjoicmVmZXJlbmNlOiBnaXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvY25pL3BrZy90eXBlcyIsInByb3BlcnRpZXMiOnsiYXJncyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJvYmplY3QifSwiY2FwYWJpbGl0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJib29sZWFuIn0sInR5cGUiOiJvYmplY3QifSwiY25pVmVyc2lvbiI6eyJ0eXBlIjoic3RyaW5nIn0sImRucyI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImRvbWFpbiI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWVzZXJ2ZXJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm9wdGlvbnMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwic2VhcmNoIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY25pVmVyc2lvbiIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaXBhbSIsInBsdWdpbiJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29ya1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBNdWx0aU5pY05ldHdvcmsiLCJwcm9wZXJ0aWVzIjp7ImNvbXB1dGVSZXN1bHRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sIm51bU9mSG9zdHMiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbIm5ldEFkZHJlc3MiLCJudW1PZkhvc3RzIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZ1N0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn0sImRpc2NvdmVyeSI6eyJwcm9wZXJ0aWVzIjp7ImNpZHJQcm9jZXNzZWQiOnsidHlwZSI6ImludGVnZXIifSwiZXhpc3REYWVtb24iOnsidHlwZSI6ImludGVnZXIifSwiaW5mb0F2YWlsYWJsZSI6eyJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsiY2lkclByb2Nlc3NlZCIsImV4aXN0RGFlbW9uIiwiaW5mb0F2YWlsYWJsZSJdLCJ0eXBlIjoib2JqZWN0In0sImxhc3RTeW5jVGltZSI6eyJmb3JtYXQiOiJkYXRlLXRpbWUiLCJ0eXBlIjoic3RyaW5nIn0sIm1lc3NhZ2UiOnsidHlwZSI6InN0cmluZyJ9LCJyb3V0ZVN0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJjb21wdXRlUmVzdWx0cyIsImNvbmZpZ1N0YXR1cyIsImRpc2NvdmVyeSIsImxhc3RTeW5jVGltZSIsIm1lc3NhZ2UiLCJyb3V0ZVN0YXR1cyJdLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNpZHJzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkNJRFIiLCJsaXN0S2luZCI6IkNJRFJMaXN0IiwicGx1cmFsIjoiY2lkcnMiLCJzaW5ndWxhciI6ImNpZHIifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQ0lEUiIsInByb3BlcnRpZXMiOnsiY2lkciI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Imhvc3RzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaG9zdEluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImlwcG9vbCI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdElQIiwiaG9zdEluZGV4IiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwicG9kQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbnRlcmZhY2VJbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuZXRBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbkNJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdHMiLCJpbnRlcmZhY2VJbmRleCIsIm5ldEFkZHJlc3MiLCJ2bGFuQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWciOnsiZGVzY3JpcHRpb24iOiJJTlNFUlQgQURESVRJT05BTCBTUEVDIEZJRUxEUyAtIGRlc2lyZWQgc3RhdGUgb2YgY2x1c3RlciBJbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImRldmljZWNsYXNzZXMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiRGV2aWNlQ2xhc3MiLCJsaXN0S2luZCI6IkRldmljZUNsYXNzTGlzdCIsInBsdXJhbCI6ImRldmljZWNsYXNzZXMiLCJzaW5ndWxhciI6ImRldmljZWNsYXNzIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiRGV2aWNlQ2xhc3MgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGRldmljZWNsYXNzZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1NwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInByb3BlcnRpZXMiOnsiaWRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsicHJvZHVjdHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInByb2R1Y3RzIiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpZHMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Imhvc3RpbnRlcmZhY2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJsaXN0S2luZCI6Ikhvc3RJbnRlcmZhY2VMaXN0IiwicGx1cmFsIjoiaG9zdGludGVyZmFjZXMiLCJzaW5ndWxhciI6Imhvc3RpbnRlcmZhY2UifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwY2lBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwicHJvZHVjdCI6eyJ0eXBlIjoic3RyaW5nIn0sInZlbmRvciI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0SVAiLCJpbnRlcmZhY2VOYW1lIiwibmV0QWRkcmVzcyIsInBjaUFkZHJlc3MiLCJwcm9kdWN0IiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJob3N0TmFtZSIsImludGVyZmFjZXMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIEhvc3RJbnRlcmZhY2UiLCJwcm9wZXJ0aWVzIjp7InN0YXQiOnsicHJvcGVydGllcyI6eyJjb3VudCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibGFzdFJ4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RSeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFRpbWVzdGFtcCI6eyJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VHhEcm9wIjp7InR5cGUiOiJpbnRlZ2VyIn0sInJ4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwicnhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn0sInR4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJjb3VudCIsImludGVyZmFjZU5hbWUiLCJsYXN0UngiLCJsYXN0UnhEcm9wIiwibGFzdFRpbWVzdGFtcCIsImxhc3RUeCIsImxhc3RUeERyb3AiLCJyeERyb3BSYXRlIiwicnhSYXRlIiwidHhEcm9wUmF0ZSIsInR4UmF0ZSJdLCJ0eXBlIjoib2JqZWN0In19LCJyZXF1aXJlZCI6WyJzdGF0Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImlwcG9vbHMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiSVBQb29sIiwibGlzdEtpbmQiOiJJUFBvb2xMaXN0IiwicGx1cmFsIjoiaXBwb29scyIsInNpbmd1bGFyIjoiaXBwb29sIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBpcHBvb2xzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIElQUG9vbCIsInByb3BlcnRpZXMiOnsiYWxsb2NhdGlvbnMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJhZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwiaW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwibmFtZXNwYWNlIjp7InR5cGUiOiJzdHJpbmcifSwicG9kIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFkZHJlc3MiLCJpbmRleCIsIm5hbWVzcGFjZSIsInBvZCJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJleGNsdWRlcyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJuZXRBdHRhY2hEZWYiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RDSURSIjp7ImRlc2NyaXB0aW9uIjoiRm9vIGlzIGFuIGV4YW1wbGUgZmllbGQgb2YgSVBQb29sLiBFZGl0IGlwcG9vbF90eXBlcy5nbyB0byByZW1vdmUvdXBkYXRlIiwidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJhbGxvY2F0aW9ucyIsImV4Y2x1ZGVzIiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwibmV0QXR0YWNoRGVmIiwicG9kQ0lEUiIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIElQUG9vbCIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9tZXRyaWNzIl0sInZlcmJzIjpbImdldCJdfV19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlIn0sInNwZWMiOnsicG9ydHMiOlt7Im5hbWUiOiJodHRwcyIsInBvcnQiOjg0NDMsInRhcmdldFBvcnQiOiJodHRwcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.2.2
  name: ""
- image: quay.io/openshift-community-operators/multi-nic-cni-operator@sha256:b0c63a70993df477b1e04c989ee09fa5cd12e65339043a6616346d484fe84d89
  name: ""
schema: olm.bundle
---
image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator@sha256:215dd76b906ed3af409b47d11cbbb3e1e77e56a37872316750379e7fe7bcc1b0
name: multi-nic-cni-operator.v1.2.3
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.2.3
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibGlzdEtpbmQiOiJNdWx0aU5pY05ldHdvcmtMaXN0IiwicGx1cmFsIjoibXVsdGluaWNuZXR3b3JrcyIsInNpbmd1bGFyIjoibXVsdGluaWNuZXR3b3JrIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIE11bHRpTmljTmV0d29yayBNYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbCBTdWJuZXQgaXMgZ2xvYmFsIHN1Ym5ldCwgZGVmYXVsdDogMTcyLjMwLjAuMC8xNiBJUEFNIGlzIGlwYW0gc3BlY2lmaWNhdGlvbiBNYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uIFBvbGljeSBpcyBnZW5lcmFsIHBvbGljeSBvZiB0aGUgcG9vbCIsInByb3BlcnRpZXMiOnsiYXR0YWNoUG9saWN5Ijp7ImRlc2NyaXB0aW9uIjoiQXNzaWdubWVudFBvbGljeSBkZWZpbmVzIHRoZSBwb2xpY3kgdG8gc2VsZWN0IHRoZSBOSUNzIGZyb20gdGhlIHBvb2wgU3RyYXRlZ3kgaXMgb25lIG9mIE5vbmUsIENvc3RPcHQsIFBlcmZPcHQsIFFvU0NsYXNzIFRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHMgcmVxdWlyZWQgZm9yIENvc3RPcHQgYW5kIFBlcmZPcHQiLCJwcm9wZXJ0aWVzIjp7InN0cmF0ZWd5Ijp7InR5cGUiOiJzdHJpbmcifSwidGFyZ2V0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0cmF0ZWd5Il0sInR5cGUiOiJvYmplY3QifSwiaXBhbSI6eyJ0eXBlIjoic3RyaW5nIn0sIm1hc3Rlck5ldHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwibXVsdGlOSUNJUEFNIjp7InR5cGUiOiJib29sZWFuIn0sIm5hbWVzcGFjZXMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwicGx1Z2luIjp7ImRlc2NyaXB0aW9uIjoicmVmZXJlbmNlOiBnaXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvY25pL3BrZy90eXBlcyIsInByb3BlcnRpZXMiOnsiYXJncyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJvYmplY3QifSwiY2FwYWJpbGl0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJib29sZWFuIn0sInR5cGUiOiJvYmplY3QifSwiY25pVmVyc2lvbiI6eyJ0eXBlIjoic3RyaW5nIn0sImRucyI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImRvbWFpbiI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWVzZXJ2ZXJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm9wdGlvbnMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwic2VhcmNoIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY25pVmVyc2lvbiIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaXBhbSIsInBsdWdpbiJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29ya1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBNdWx0aU5pY05ldHdvcmsiLCJwcm9wZXJ0aWVzIjp7ImNvbXB1dGVSZXN1bHRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sIm51bU9mSG9zdHMiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbIm5ldEFkZHJlc3MiLCJudW1PZkhvc3RzIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZ1N0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn0sImRpc2NvdmVyeSI6eyJwcm9wZXJ0aWVzIjp7ImNpZHJQcm9jZXNzZWQiOnsidHlwZSI6ImludGVnZXIifSwiZXhpc3REYWVtb24iOnsidHlwZSI6ImludGVnZXIifSwiaW5mb0F2YWlsYWJsZSI6eyJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsiY2lkclByb2Nlc3NlZCIsImV4aXN0RGFlbW9uIiwiaW5mb0F2YWlsYWJsZSJdLCJ0eXBlIjoib2JqZWN0In0sImxhc3RTeW5jVGltZSI6eyJmb3JtYXQiOiJkYXRlLXRpbWUiLCJ0eXBlIjoic3RyaW5nIn0sIm1lc3NhZ2UiOnsidHlwZSI6InN0cmluZyJ9LCJyb3V0ZVN0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJjb21wdXRlUmVzdWx0cyIsImNvbmZpZ1N0YXR1cyIsImRpc2NvdmVyeSIsImxhc3RTeW5jVGltZSIsIm1lc3NhZ2UiLCJyb3V0ZVN0YXR1cyJdLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNpZHJzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkNJRFIiLCJsaXN0S2luZCI6IkNJRFJMaXN0IiwicGx1cmFsIjoiY2lkcnMiLCJzaW5ndWxhciI6ImNpZHIifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQ0lEUiIsInByb3BlcnRpZXMiOnsiY2lkciI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Imhvc3RzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaG9zdEluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImlwcG9vbCI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdElQIiwiaG9zdEluZGV4IiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwicG9kQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbnRlcmZhY2VJbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuZXRBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbkNJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdHMiLCJpbnRlcmZhY2VJbmRleCIsIm5ldEFkZHJlc3MiLCJ2bGFuQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWciOnsiZGVzY3JpcHRpb24iOiJJTlNFUlQgQURESVRJT05BTCBTUEVDIEZJRUxEUyAtIGRlc2lyZWQgc3RhdGUgb2YgY2x1c3RlciBJbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImRldmljZWNsYXNzZXMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiRGV2aWNlQ2xhc3MiLCJsaXN0S2luZCI6IkRldmljZUNsYXNzTGlzdCIsInBsdXJhbCI6ImRldmljZWNsYXNzZXMiLCJzaW5ndWxhciI6ImRldmljZWNsYXNzIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiRGV2aWNlQ2xhc3MgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGRldmljZWNsYXNzZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1NwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInByb3BlcnRpZXMiOnsiaWRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsicHJvZHVjdHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInByb2R1Y3RzIiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpZHMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Imhvc3RpbnRlcmZhY2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJsaXN0S2luZCI6Ikhvc3RJbnRlcmZhY2VMaXN0IiwicGx1cmFsIjoiaG9zdGludGVyZmFjZXMiLCJzaW5ndWxhciI6Imhvc3RpbnRlcmZhY2UifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwY2lBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwicHJvZHVjdCI6eyJ0eXBlIjoic3RyaW5nIn0sInZlbmRvciI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJpbnRlcmZhY2VOYW1lIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJob3N0TmFtZSIsImludGVyZmFjZXMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIEhvc3RJbnRlcmZhY2UiLCJwcm9wZXJ0aWVzIjp7InN0YXQiOnsicHJvcGVydGllcyI6eyJjb3VudCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibGFzdFJ4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RSeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFRpbWVzdGFtcCI6eyJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VHhEcm9wIjp7InR5cGUiOiJpbnRlZ2VyIn0sInJ4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwicnhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn0sInR4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJjb3VudCIsImludGVyZmFjZU5hbWUiLCJsYXN0UngiLCJsYXN0UnhEcm9wIiwibGFzdFRpbWVzdGFtcCIsImxhc3RUeCIsImxhc3RUeERyb3AiLCJyeERyb3BSYXRlIiwicnhSYXRlIiwidHhEcm9wUmF0ZSIsInR4UmF0ZSJdLCJ0eXBlIjoib2JqZWN0In19LCJyZXF1aXJlZCI6WyJzdGF0Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImlwcG9vbHMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiSVBQb29sIiwibGlzdEtpbmQiOiJJUFBvb2xMaXN0IiwicGx1cmFsIjoiaXBwb29scyIsInNpbmd1bGFyIjoiaXBwb29sIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBpcHBvb2xzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIElQUG9vbCIsInByb3BlcnRpZXMiOnsiYWxsb2NhdGlvbnMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJhZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwiaW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwibmFtZXNwYWNlIjp7InR5cGUiOiJzdHJpbmcifSwicG9kIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFkZHJlc3MiLCJpbmRleCIsIm5hbWVzcGFjZSIsInBvZCJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJleGNsdWRlcyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJuZXRBdHRhY2hEZWYiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RDSURSIjp7ImRlc2NyaXB0aW9uIjoiRm9vIGlzIGFuIGV4YW1wbGUgZmllbGQgb2YgSVBQb29sLiBFZGl0IGlwcG9vbF90eXBlcy5nbyB0byByZW1vdmUvdXBkYXRlIiwidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJhbGxvY2F0aW9ucyIsImV4Y2x1ZGVzIiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwibmV0QXR0YWNoRGVmIiwicG9kQ0lEUiIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIElQUG9vbCIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9tZXRyaWNzIl0sInZlcmJzIjpbImdldCJdfV19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlIn0sInNwZWMiOnsicG9ydHMiOlt7Im5hbWUiOiJodHRwcyIsInBvcnQiOjg0NDMsInRhcmdldFBvcnQiOiJodHRwcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.2.3
  name: ""
- image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator@sha256:215dd76b906ed3af409b47d11cbbb3e1e77e56a37872316750379e7fe7bcc1b0
  name: ""
schema: olm.bundle
---
image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator@sha256:ab62ca14df6dc776ebef248585bada4e7ed86c9ad22345880cf4a8b2a681a033
name: multi-nic-cni-operator.v1.2.4
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.2.4
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibGlzdEtpbmQiOiJNdWx0aU5pY05ldHdvcmtMaXN0IiwicGx1cmFsIjoibXVsdGluaWNuZXR3b3JrcyIsInNpbmd1bGFyIjoibXVsdGluaWNuZXR3b3JrIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIE11bHRpTmljTmV0d29yayBNYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbCBTdWJuZXQgaXMgZ2xvYmFsIHN1Ym5ldCwgZGVmYXVsdDogMTcyLjMwLjAuMC8xNiBJUEFNIGlzIGlwYW0gc3BlY2lmaWNhdGlvbiBNYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uIFBvbGljeSBpcyBnZW5lcmFsIHBvbGljeSBvZiB0aGUgcG9vbCIsInByb3BlcnRpZXMiOnsiYXR0YWNoUG9saWN5Ijp7ImRlc2NyaXB0aW9uIjoiQXNzaWdubWVudFBvbGljeSBkZWZpbmVzIHRoZSBwb2xpY3kgdG8gc2VsZWN0IHRoZSBOSUNzIGZyb20gdGhlIHBvb2wgU3RyYXRlZ3kgaXMgb25lIG9mIE5vbmUsIENvc3RPcHQsIFBlcmZPcHQsIFFvU0NsYXNzIFRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHMgcmVxdWlyZWQgZm9yIENvc3RPcHQgYW5kIFBlcmZPcHQiLCJwcm9wZXJ0aWVzIjp7InN0cmF0ZWd5Ijp7InR5cGUiOiJzdHJpbmcifSwidGFyZ2V0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0cmF0ZWd5Il0sInR5cGUiOiJvYmplY3QifSwiaXBhbSI6eyJ0eXBlIjoic3RyaW5nIn0sIm1hc3Rlck5ldHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwibXVsdGlOSUNJUEFNIjp7InR5cGUiOiJib29sZWFuIn0sIm5hbWVzcGFjZXMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwicGx1Z2luIjp7ImRlc2NyaXB0aW9uIjoicmVmZXJlbmNlOiBnaXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvY25pL3BrZy90eXBlcyIsInByb3BlcnRpZXMiOnsiYXJncyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJvYmplY3QifSwiY2FwYWJpbGl0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJib29sZWFuIn0sInR5cGUiOiJvYmplY3QifSwiY25pVmVyc2lvbiI6eyJ0eXBlIjoic3RyaW5nIn0sImRucyI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImRvbWFpbiI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWVzZXJ2ZXJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm9wdGlvbnMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwic2VhcmNoIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY25pVmVyc2lvbiIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaXBhbSIsInBsdWdpbiJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29ya1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBNdWx0aU5pY05ldHdvcmsiLCJwcm9wZXJ0aWVzIjp7ImNvbXB1dGVSZXN1bHRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sIm51bU9mSG9zdHMiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbIm5ldEFkZHJlc3MiLCJudW1PZkhvc3RzIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZ1N0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn0sImRpc2NvdmVyeSI6eyJwcm9wZXJ0aWVzIjp7ImNpZHJQcm9jZXNzZWQiOnsidHlwZSI6ImludGVnZXIifSwiZXhpc3REYWVtb24iOnsidHlwZSI6ImludGVnZXIifSwiaW5mb0F2YWlsYWJsZSI6eyJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsiY2lkclByb2Nlc3NlZCIsImV4aXN0RGFlbW9uIiwiaW5mb0F2YWlsYWJsZSJdLCJ0eXBlIjoib2JqZWN0In0sImxhc3RTeW5jVGltZSI6eyJmb3JtYXQiOiJkYXRlLXRpbWUiLCJ0eXBlIjoic3RyaW5nIn0sIm1lc3NhZ2UiOnsidHlwZSI6InN0cmluZyJ9LCJyb3V0ZVN0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJjb21wdXRlUmVzdWx0cyIsImNvbmZpZ1N0YXR1cyIsImRpc2NvdmVyeSIsImxhc3RTeW5jVGltZSIsIm1lc3NhZ2UiLCJyb3V0ZVN0YXR1cyJdLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNpZHJzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkNJRFIiLCJsaXN0S2luZCI6IkNJRFJMaXN0IiwicGx1cmFsIjoiY2lkcnMiLCJzaW5ndWxhciI6ImNpZHIifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQ0lEUiIsInByb3BlcnRpZXMiOnsiY2lkciI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Imhvc3RzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaG9zdEluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImlwcG9vbCI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdElQIiwiaG9zdEluZGV4IiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwicG9kQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbnRlcmZhY2VJbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuZXRBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbkNJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdHMiLCJpbnRlcmZhY2VJbmRleCIsIm5ldEFkZHJlc3MiLCJ2bGFuQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWciOnsiZGVzY3JpcHRpb24iOiJJTlNFUlQgQURESVRJT05BTCBTUEVDIEZJRUxEUyAtIGRlc2lyZWQgc3RhdGUgb2YgY2x1c3RlciBJbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNvbmZpZ3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiQ29uZmlnIiwibGlzdEtpbmQiOiJDb25maWdMaXN0IiwicGx1cmFsIjoiY29uZmlncyIsInNpbmd1bGFyIjoiY29uZmlnIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiQ29uZmlnIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjb25maWdzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiQ29uZmlnU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIENvbmZpZyIsInByb3BlcnRpZXMiOnsiYWRkUm91dGVQYXRoIjp7InR5cGUiOiJzdHJpbmcifSwiY25pVHlwZSI6eyJkZXNjcmlwdGlvbiI6IklOU0VSVCBBRERJVElPTkFMIFNQRUMgRklFTERTIC0gZGVzaXJlZCBzdGF0ZSBvZiBjbHVzdGVyIEltcG9ydGFudDogUnVuIFwibWFrZVwiIHRvIHJlZ2VuZXJhdGUgY29kZSBhZnRlciBtb2RpZnlpbmcgdGhpcyBmaWxlIiwidHlwZSI6InN0cmluZyJ9LCJjb250ZXh0VGltZW91dE1pbnV0ZXMiOnsidHlwZSI6ImludGVnZXIifSwiZGFlbW9uIjp7InByb3BlcnRpZXMiOnsiZW52Ijp7Iml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiRW52VmFyIHJlcHJlc2VudHMgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUgcHJlc2VudCBpbiBhIENvbnRhaW5lci4iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG9mIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZS4gTXVzdCBiZSBhIENfSURFTlRJRklFUi4iLCJ0eXBlIjoic3RyaW5nIn0sInZhbHVlIjp7ImRlc2NyaXB0aW9uIjoiVmFyaWFibGUgcmVmZXJlbmNlcyAkKFZBUl9OQU1FKSBhcmUgZXhwYW5kZWQgdXNpbmcgdGhlIHByZXZpb3VzbHkgZGVmaW5lZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgaW4gdGhlIGNvbnRhaW5lciBhbmQgYW55IHNlcnZpY2UgZW52aXJvbm1lbnQgdmFyaWFibGVzLiBJZiBhIHZhcmlhYmxlIGNhbm5vdCBiZSByZXNvbHZlZCwgdGhlIHJlZmVyZW5jZSBpbiB0aGUgaW5wdXQgc3RyaW5nIHdpbGwgYmUgdW5jaGFuZ2VkLiBEb3VibGUgJCQgYXJlIHJlZHVjZWQgdG8gYSBzaW5nbGUgJCwgd2hpY2ggYWxsb3dzIGZvciBlc2NhcGluZyB0aGUgJChWQVJfTkFNRSkgc3ludGF4OiBpLmUuIFwiJCQoVkFSX05BTUUpXCIgd2lsbCBwcm9kdWNlIHRoZSBzdHJpbmcgbGl0ZXJhbCBcIiQoVkFSX05BTUUpXCIuIEVzY2FwZWQgcmVmZXJlbmNlcyB3aWxsIG5ldmVyIGJlIGV4cGFuZGVkLCByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIHZhcmlhYmxlIGV4aXN0cyBvciBub3QuIERlZmF1bHRzIHRvIFwiXCIuIiwidHlwZSI6InN0cmluZyJ9LCJ2YWx1ZUZyb20iOnsiZGVzY3JpcHRpb24iOiJTb3VyY2UgZm9yIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSdzIHZhbHVlLiBDYW5ub3QgYmUgdXNlZCBpZiB2YWx1ZSBpcyBub3QgZW1wdHkuIiwicHJvcGVydGllcyI6eyJjb25maWdNYXBLZXlSZWYiOnsiZGVzY3JpcHRpb24iOiJTZWxlY3RzIGEga2V5IG9mIGEgQ29uZmlnTWFwLiIsInByb3BlcnRpZXMiOnsia2V5Ijp7ImRlc2NyaXB0aW9uIjoiVGhlIGtleSB0byBzZWxlY3QuIiwidHlwZSI6InN0cmluZyJ9LCJuYW1lIjp7ImRlc2NyaXB0aW9uIjoiTmFtZSBvZiB0aGUgcmVmZXJlbnQuIE1vcmUgaW5mbzogaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvd29ya2luZy13aXRoLW9iamVjdHMvbmFtZXMvI25hbWVzIFRPRE86IEFkZCBvdGhlciB1c2VmdWwgZmllbGRzLiBhcGlWZXJzaW9uLCBraW5kLCB1aWQ/IiwidHlwZSI6InN0cmluZyJ9LCJvcHRpb25hbCI6eyJkZXNjcmlwdGlvbiI6IlNwZWNpZnkgd2hldGhlciB0aGUgQ29uZmlnTWFwIG9yIGl0cyBrZXkgbXVzdCBiZSBkZWZpbmVkIiwidHlwZSI6ImJvb2xlYW4ifX0sInJlcXVpcmVkIjpbImtleSJdLCJ0eXBlIjoib2JqZWN0In0sImZpZWxkUmVmIjp7ImRlc2NyaXB0aW9uIjoiU2VsZWN0cyBhIGZpZWxkIG9mIHRoZSBwb2Q6IHN1cHBvcnRzIG1ldGFkYXRhLm5hbWUsIG1ldGFkYXRhLm5hbWVzcGFjZSwgYG1ldGFkYXRhLmxhYmVsc1snXHUwMDNjS0VZXHUwMDNlJ11gLCBgbWV0YWRhdGEuYW5ub3RhdGlvbnNbJ1x1MDAzY0tFWVx1MDAzZSddYCwgc3BlYy5ub2RlTmFtZSwgc3BlYy5zZXJ2aWNlQWNjb3VudE5hbWUsIHN0YXR1cy5ob3N0SVAsIHN0YXR1cy5wb2RJUCwgc3RhdHVzLnBvZElQcy4iLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJWZXJzaW9uIG9mIHRoZSBzY2hlbWEgdGhlIEZpZWxkUGF0aCBpcyB3cml0dGVuIGluIHRlcm1zIG9mLCBkZWZhdWx0cyB0byBcInYxXCIuIiwidHlwZSI6InN0cmluZyJ9LCJmaWVsZFBhdGgiOnsiZGVzY3JpcHRpb24iOiJQYXRoIG9mIHRoZSBmaWVsZCB0byBzZWxlY3QgaW4gdGhlIHNwZWNpZmllZCBBUEkgdmVyc2lvbi4iLCJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJmaWVsZFBhdGgiXSwidHlwZSI6Im9iamVjdCJ9LCJyZXNvdXJjZUZpZWxkUmVmIjp7ImRlc2NyaXB0aW9uIjoiU2VsZWN0cyBhIHJlc291cmNlIG9mIHRoZSBjb250YWluZXI6IG9ubHkgcmVzb3VyY2VzIGxpbWl0cyBhbmQgcmVxdWVzdHMgKGxpbWl0cy5jcHUsIGxpbWl0cy5tZW1vcnksIGxpbWl0cy5lcGhlbWVyYWwtc3RvcmFnZSwgcmVxdWVzdHMuY3B1LCByZXF1ZXN0cy5tZW1vcnkgYW5kIHJlcXVlc3RzLmVwaGVtZXJhbC1zdG9yYWdlKSBhcmUgY3VycmVudGx5IHN1cHBvcnRlZC4iLCJwcm9wZXJ0aWVzIjp7ImNvbnRhaW5lck5hbWUiOnsiZGVzY3JpcHRpb24iOiJDb250YWluZXIgbmFtZTogcmVxdWlyZWQgZm9yIHZvbHVtZXMsIG9wdGlvbmFsIGZvciBlbnYgdmFycyIsInR5cGUiOiJzdHJpbmcifSwiZGl2aXNvciI6eyJhbnlPZiI6W3sidHlwZSI6ImludGVnZXIifSx7InR5cGUiOiJzdHJpbmcifV0sImRlc2NyaXB0aW9uIjoiU3BlY2lmaWVzIHRoZSBvdXRwdXQgZm9ybWF0IG9mIHRoZSBleHBvc2VkIHJlc291cmNlcywgZGVmYXVsdHMgdG8gXCIxXCIiLCJwYXR0ZXJuIjoiXihcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSgoW0tNR1RQRV1pKXxbbnVta01HVFBFXXwoW2VFXShcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSkpPyQiLCJ4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZyI6dHJ1ZX0sInJlc291cmNlIjp7ImRlc2NyaXB0aW9uIjoiUmVxdWlyZWQ6IHJlc291cmNlIHRvIHNlbGVjdCIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInJlc291cmNlIl0sInR5cGUiOiJvYmplY3QifSwic2VjcmV0S2V5UmVmIjp7ImRlc2NyaXB0aW9uIjoiU2VsZWN0cyBhIGtleSBvZiBhIHNlY3JldCBpbiB0aGUgcG9kJ3MgbmFtZXNwYWNlIiwicHJvcGVydGllcyI6eyJrZXkiOnsiZGVzY3JpcHRpb24iOiJUaGUga2V5IG9mIHRoZSBzZWNyZXQgdG8gc2VsZWN0IGZyb20uICBNdXN0IGJlIGEgdmFsaWQgc2VjcmV0IGtleS4iLCJ0eXBlIjoic3RyaW5nIn0sIm5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG9mIHRoZSByZWZlcmVudC4gTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9vdmVydmlldy93b3JraW5nLXdpdGgtb2JqZWN0cy9uYW1lcy8jbmFtZXMgVE9ETzogQWRkIG90aGVyIHVzZWZ1bCBmaWVsZHMuIGFwaVZlcnNpb24sIGtpbmQsIHVpZD8iLCJ0eXBlIjoic3RyaW5nIn0sIm9wdGlvbmFsIjp7ImRlc2NyaXB0aW9uIjoiU3BlY2lmeSB3aGV0aGVyIHRoZSBTZWNyZXQgb3IgaXRzIGtleSBtdXN0IGJlIGRlZmluZWQiLCJ0eXBlIjoiYm9vbGVhbiJ9fSwicmVxdWlyZWQiOlsia2V5Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInJlcXVpcmVkIjpbIm5hbWUiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifSwiZW52RnJvbSI6eyJpdGVtcyI6eyJkZXNjcmlwdGlvbiI6IkVudkZyb21Tb3VyY2UgcmVwcmVzZW50cyB0aGUgc291cmNlIG9mIGEgc2V0IG9mIENvbmZpZ01hcHMiLCJwcm9wZXJ0aWVzIjp7ImNvbmZpZ01hcFJlZiI6eyJkZXNjcmlwdGlvbiI6IlRoZSBDb25maWdNYXAgdG8gc2VsZWN0IGZyb20iLCJwcm9wZXJ0aWVzIjp7Im5hbWUiOnsiZGVzY3JpcHRpb24iOiJOYW1lIG9mIHRoZSByZWZlcmVudC4gTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9vdmVydmlldy93b3JraW5nLXdpdGgtb2JqZWN0cy9uYW1lcy8jbmFtZXMgVE9ETzogQWRkIG90aGVyIHVzZWZ1bCBmaWVsZHMuIGFwaVZlcnNpb24sIGtpbmQsIHVpZD8iLCJ0eXBlIjoic3RyaW5nIn0sIm9wdGlvbmFsIjp7ImRlc2NyaXB0aW9uIjoiU3BlY2lmeSB3aGV0aGVyIHRoZSBDb25maWdNYXAgbXVzdCBiZSBkZWZpbmVkIiwidHlwZSI6ImJvb2xlYW4ifX0sInR5cGUiOiJvYmplY3QifSwicHJlZml4Ijp7ImRlc2NyaXB0aW9uIjoiQW4gb3B0aW9uYWwgaWRlbnRpZmllciB0byBwcmVwZW5kIHRvIGVhY2gga2V5IGluIHRoZSBDb25maWdNYXAuIE11c3QgYmUgYSBDX0lERU5USUZJRVIuIiwidHlwZSI6InN0cmluZyJ9LCJzZWNyZXRSZWYiOnsiZGVzY3JpcHRpb24iOiJUaGUgU2VjcmV0IHRvIHNlbGVjdCBmcm9tIiwicHJvcGVydGllcyI6eyJuYW1lIjp7ImRlc2NyaXB0aW9uIjoiTmFtZSBvZiB0aGUgcmVmZXJlbnQuIE1vcmUgaW5mbzogaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvd29ya2luZy13aXRoLW9iamVjdHMvbmFtZXMvI25hbWVzIFRPRE86IEFkZCBvdGhlciB1c2VmdWwgZmllbGRzLiBhcGlWZXJzaW9uLCBraW5kLCB1aWQ/IiwidHlwZSI6InN0cmluZyJ9LCJvcHRpb25hbCI6eyJkZXNjcmlwdGlvbiI6IlNwZWNpZnkgd2hldGhlciB0aGUgU2VjcmV0IG11c3QgYmUgZGVmaW5lZCIsInR5cGUiOiJib29sZWFuIn19LCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbWFnZSI6eyJ0eXBlIjoic3RyaW5nIn0sImltYWdlUHVsbFBvbGljeSI6eyJ0eXBlIjoic3RyaW5nIn0sImltYWdlUHVsbFNlY3JldE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJtb3VudHMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJob3N0cGF0aCI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RwYXRoIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImhvc3RwYXRoIiwibmFtZSIsInBvZHBhdGgiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifSwibm9kZVNlbGVjdG9yIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6Im9iamVjdCJ9LCJwb3J0Ijp7InR5cGUiOiJpbnRlZ2VyIn0sInJlc291cmNlcyI6eyJkZXNjcmlwdGlvbiI6IlJlc291cmNlUmVxdWlyZW1lbnRzIGRlc2NyaWJlcyB0aGUgY29tcHV0ZSByZXNvdXJjZSByZXF1aXJlbWVudHMuIiwicHJvcGVydGllcyI6eyJsaW1pdHMiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsiYW55T2YiOlt7InR5cGUiOiJpbnRlZ2VyIn0seyJ0eXBlIjoic3RyaW5nIn1dLCJwYXR0ZXJuIjoiXihcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSgoW0tNR1RQRV1pKXxbbnVta01HVFBFXXwoW2VFXShcXCt8LSk/KChbMC05XSsoXFwuWzAtOV0qKT8pfChcXC5bMC05XSspKSkpPyQiLCJ4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZyI6dHJ1ZX0sImRlc2NyaXB0aW9uIjoiTGltaXRzIGRlc2NyaWJlcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgY29tcHV0ZSByZXNvdXJjZXMgYWxsb3dlZC4gTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9jb25maWd1cmF0aW9uL21hbmFnZS1yZXNvdXJjZXMtY29udGFpbmVycy8iLCJ0eXBlIjoib2JqZWN0In0sInJlcXVlc3RzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7ImFueU9mIjpbeyJ0eXBlIjoiaW50ZWdlciJ9LHsidHlwZSI6InN0cmluZyJ9XSwicGF0dGVybiI6Il4oXFwrfC0pPygoWzAtOV0rKFxcLlswLTldKik/KXwoXFwuWzAtOV0rKSkoKFtLTUdUUEVdaSl8W251bWtNR1RQRV18KFtlRV0oXFwrfC0pPygoWzAtOV0rKFxcLlswLTldKik/KXwoXFwuWzAtOV0rKSkpKT8kIiwieC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmciOnRydWV9LCJkZXNjcmlwdGlvbiI6IlJlcXVlc3RzIGRlc2NyaWJlcyB0aGUgbWluaW11bSBhbW91bnQgb2YgY29tcHV0ZSByZXNvdXJjZXMgcmVxdWlyZWQuIElmIFJlcXVlc3RzIGlzIG9taXR0ZWQgZm9yIGEgY29udGFpbmVyLCBpdCBkZWZhdWx0cyB0byBMaW1pdHMgaWYgdGhhdCBpcyBleHBsaWNpdGx5IHNwZWNpZmllZCwgb3RoZXJ3aXNlIHRvIGFuIGltcGxlbWVudGF0aW9uLWRlZmluZWQgdmFsdWUuIE1vcmUgaW5mbzogaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvY29uZmlndXJhdGlvbi9tYW5hZ2UtcmVzb3VyY2VzLWNvbnRhaW5lcnMvIiwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9LCJzZWN1cml0eUNvbnRleHQiOnsiZGVzY3JpcHRpb24iOiJTZWN1cml0eUNvbnRleHQgaG9sZHMgc2VjdXJpdHkgY29uZmlndXJhdGlvbiB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byBhIGNvbnRhaW5lci4gU29tZSBmaWVsZHMgYXJlIHByZXNlbnQgaW4gYm90aCBTZWN1cml0eUNvbnRleHQgYW5kIFBvZFNlY3VyaXR5Q29udGV4dC4gIFdoZW4gYm90aCBhcmUgc2V0LCB0aGUgdmFsdWVzIGluIFNlY3VyaXR5Q29udGV4dCB0YWtlIHByZWNlZGVuY2UuIiwicHJvcGVydGllcyI6eyJhbGxvd1ByaXZpbGVnZUVzY2FsYXRpb24iOnsiZGVzY3JpcHRpb24iOiJBbGxvd1ByaXZpbGVnZUVzY2FsYXRpb24gY29udHJvbHMgd2hldGhlciBhIHByb2Nlc3MgY2FuIGdhaW4gbW9yZSBwcml2aWxlZ2VzIHRoYW4gaXRzIHBhcmVudCBwcm9jZXNzLiBUaGlzIGJvb2wgZGlyZWN0bHkgY29udHJvbHMgaWYgdGhlIG5vX25ld19wcml2cyBmbGFnIHdpbGwgYmUgc2V0IG9uIHRoZSBjb250YWluZXIgcHJvY2Vzcy4gQWxsb3dQcml2aWxlZ2VFc2NhbGF0aW9uIGlzIHRydWUgYWx3YXlzIHdoZW4gdGhlIGNvbnRhaW5lciBpczogMSkgcnVuIGFzIFByaXZpbGVnZWQgMikgaGFzIENBUF9TWVNfQURNSU4gTm90ZSB0aGF0IHRoaXMgZmllbGQgY2Fubm90IGJlIHNldCB3aGVuIHNwZWMub3MubmFtZSBpcyB3aW5kb3dzLiIsInR5cGUiOiJib29sZWFuIn0sImNhcGFiaWxpdGllcyI6eyJkZXNjcmlwdGlvbiI6IlRoZSBjYXBhYmlsaXRpZXMgdG8gYWRkL2Ryb3Agd2hlbiBydW5uaW5nIGNvbnRhaW5lcnMuIERlZmF1bHRzIHRvIHRoZSBkZWZhdWx0IHNldCBvZiBjYXBhYmlsaXRpZXMgZ3JhbnRlZCBieSB0aGUgY29udGFpbmVyIHJ1bnRpbWUuIE5vdGUgdGhhdCB0aGlzIGZpZWxkIGNhbm5vdCBiZSBzZXQgd2hlbiBzcGVjLm9zLm5hbWUgaXMgd2luZG93cy4iLCJwcm9wZXJ0aWVzIjp7ImFkZCI6eyJkZXNjcmlwdGlvbiI6IkFkZGVkIGNhcGFiaWxpdGllcyIsIml0ZW1zIjp7ImRlc2NyaXB0aW9uIjoiQ2FwYWJpbGl0eSByZXByZXNlbnQgUE9TSVggY2FwYWJpbGl0aWVzIHR5cGUiLCJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJkcm9wIjp7ImRlc2NyaXB0aW9uIjoiUmVtb3ZlZCBjYXBhYmlsaXRpZXMiLCJpdGVtcyI6eyJkZXNjcmlwdGlvbiI6IkNhcGFiaWxpdHkgcmVwcmVzZW50IFBPU0lYIGNhcGFiaWxpdGllcyB0eXBlIiwidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifX0sInR5cGUiOiJvYmplY3QifSwicHJpdmlsZWdlZCI6eyJkZXNjcmlwdGlvbiI6IlJ1biBjb250YWluZXIgaW4gcHJpdmlsZWdlZCBtb2RlLiBQcm9jZXNzZXMgaW4gcHJpdmlsZWdlZCBjb250YWluZXJzIGFyZSBlc3NlbnRpYWxseSBlcXVpdmFsZW50IHRvIHJvb3Qgb24gdGhlIGhvc3QuIERlZmF1bHRzIHRvIGZhbHNlLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwidHlwZSI6ImJvb2xlYW4ifSwicHJvY01vdW50Ijp7ImRlc2NyaXB0aW9uIjoicHJvY01vdW50IGRlbm90ZXMgdGhlIHR5cGUgb2YgcHJvYyBtb3VudCB0byB1c2UgZm9yIHRoZSBjb250YWluZXJzLiBUaGUgZGVmYXVsdCBpcyBEZWZhdWx0UHJvY01vdW50IHdoaWNoIHVzZXMgdGhlIGNvbnRhaW5lciBydW50aW1lIGRlZmF1bHRzIGZvciByZWFkb25seSBwYXRocyBhbmQgbWFza2VkIHBhdGhzLiBUaGlzIHJlcXVpcmVzIHRoZSBQcm9jTW91bnRUeXBlIGZlYXR1cmUgZmxhZyB0byBiZSBlbmFibGVkLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwidHlwZSI6InN0cmluZyJ9LCJyZWFkT25seVJvb3RGaWxlc3lzdGVtIjp7ImRlc2NyaXB0aW9uIjoiV2hldGhlciB0aGlzIGNvbnRhaW5lciBoYXMgYSByZWFkLW9ubHkgcm9vdCBmaWxlc3lzdGVtLiBEZWZhdWx0IGlzIGZhbHNlLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwidHlwZSI6ImJvb2xlYW4ifSwicnVuQXNHcm91cCI6eyJkZXNjcmlwdGlvbiI6IlRoZSBHSUQgdG8gcnVuIHRoZSBlbnRyeXBvaW50IG9mIHRoZSBjb250YWluZXIgcHJvY2Vzcy4gVXNlcyBydW50aW1lIGRlZmF1bHQgaWYgdW5zZXQuIE1heSBhbHNvIGJlIHNldCBpbiBQb2RTZWN1cml0eUNvbnRleHQuICBJZiBzZXQgaW4gYm90aCBTZWN1cml0eUNvbnRleHQgYW5kIFBvZFNlY3VyaXR5Q29udGV4dCwgdGhlIHZhbHVlIHNwZWNpZmllZCBpbiBTZWN1cml0eUNvbnRleHQgdGFrZXMgcHJlY2VkZW5jZS4gTm90ZSB0aGF0IHRoaXMgZmllbGQgY2Fubm90IGJlIHNldCB3aGVuIHNwZWMub3MubmFtZSBpcyB3aW5kb3dzLiIsImZvcm1hdCI6ImludDY0IiwidHlwZSI6ImludGVnZXIifSwicnVuQXNOb25Sb290Ijp7ImRlc2NyaXB0aW9uIjoiSW5kaWNhdGVzIHRoYXQgdGhlIGNvbnRhaW5lciBtdXN0IHJ1biBhcyBhIG5vbi1yb290IHVzZXIuIElmIHRydWUsIHRoZSBLdWJlbGV0IHdpbGwgdmFsaWRhdGUgdGhlIGltYWdlIGF0IHJ1bnRpbWUgdG8gZW5zdXJlIHRoYXQgaXQgZG9lcyBub3QgcnVuIGFzIFVJRCAwIChyb290KSBhbmQgZmFpbCB0byBzdGFydCB0aGUgY29udGFpbmVyIGlmIGl0IGRvZXMuIElmIHVuc2V0IG9yIGZhbHNlLCBubyBzdWNoIHZhbGlkYXRpb24gd2lsbCBiZSBwZXJmb3JtZWQuIE1heSBhbHNvIGJlIHNldCBpbiBQb2RTZWN1cml0eUNvbnRleHQuICBJZiBzZXQgaW4gYm90aCBTZWN1cml0eUNvbnRleHQgYW5kIFBvZFNlY3VyaXR5Q29udGV4dCwgdGhlIHZhbHVlIHNwZWNpZmllZCBpbiBTZWN1cml0eUNvbnRleHQgdGFrZXMgcHJlY2VkZW5jZS4iLCJ0eXBlIjoiYm9vbGVhbiJ9LCJydW5Bc1VzZXIiOnsiZGVzY3JpcHRpb24iOiJUaGUgVUlEIHRvIHJ1biB0aGUgZW50cnlwb2ludCBvZiB0aGUgY29udGFpbmVyIHByb2Nlc3MuIERlZmF1bHRzIHRvIHVzZXIgc3BlY2lmaWVkIGluIGltYWdlIG1ldGFkYXRhIGlmIHVuc3BlY2lmaWVkLiBNYXkgYWxzbyBiZSBzZXQgaW4gUG9kU2VjdXJpdHlDb250ZXh0LiAgSWYgc2V0IGluIGJvdGggU2VjdXJpdHlDb250ZXh0IGFuZCBQb2RTZWN1cml0eUNvbnRleHQsIHRoZSB2YWx1ZSBzcGVjaWZpZWQgaW4gU2VjdXJpdHlDb250ZXh0IHRha2VzIHByZWNlZGVuY2UuIE5vdGUgdGhhdCB0aGlzIGZpZWxkIGNhbm5vdCBiZSBzZXQgd2hlbiBzcGVjLm9zLm5hbWUgaXMgd2luZG93cy4iLCJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sInNlTGludXhPcHRpb25zIjp7ImRlc2NyaXB0aW9uIjoiVGhlIFNFTGludXggY29udGV4dCB0byBiZSBhcHBsaWVkIHRvIHRoZSBjb250YWluZXIuIElmIHVuc3BlY2lmaWVkLCB0aGUgY29udGFpbmVyIHJ1bnRpbWUgd2lsbCBhbGxvY2F0ZSBhIHJhbmRvbSBTRUxpbnV4IGNvbnRleHQgZm9yIGVhY2ggY29udGFpbmVyLiAgTWF5IGFsc28gYmUgc2V0IGluIFBvZFNlY3VyaXR5Q29udGV4dC4gIElmIHNldCBpbiBib3RoIFNlY3VyaXR5Q29udGV4dCBhbmQgUG9kU2VjdXJpdHlDb250ZXh0LCB0aGUgdmFsdWUgc3BlY2lmaWVkIGluIFNlY3VyaXR5Q29udGV4dCB0YWtlcyBwcmVjZWRlbmNlLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwicHJvcGVydGllcyI6eyJsZXZlbCI6eyJkZXNjcmlwdGlvbiI6IkxldmVsIGlzIFNFTGludXggbGV2ZWwgbGFiZWwgdGhhdCBhcHBsaWVzIHRvIHRoZSBjb250YWluZXIuIiwidHlwZSI6InN0cmluZyJ9LCJyb2xlIjp7ImRlc2NyaXB0aW9uIjoiUm9sZSBpcyBhIFNFTGludXggcm9sZSBsYWJlbCB0aGF0IGFwcGxpZXMgdG8gdGhlIGNvbnRhaW5lci4iLCJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOnsiZGVzY3JpcHRpb24iOiJUeXBlIGlzIGEgU0VMaW51eCB0eXBlIGxhYmVsIHRoYXQgYXBwbGllcyB0byB0aGUgY29udGFpbmVyLiIsInR5cGUiOiJzdHJpbmcifSwidXNlciI6eyJkZXNjcmlwdGlvbiI6IlVzZXIgaXMgYSBTRUxpbnV4IHVzZXIgbGFiZWwgdGhhdCBhcHBsaWVzIHRvIHRoZSBjb250YWluZXIuIiwidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9LCJzZWNjb21wUHJvZmlsZSI6eyJkZXNjcmlwdGlvbiI6IlRoZSBzZWNjb21wIG9wdGlvbnMgdG8gdXNlIGJ5IHRoaXMgY29udGFpbmVyLiBJZiBzZWNjb21wIG9wdGlvbnMgYXJlIHByb3ZpZGVkIGF0IGJvdGggdGhlIHBvZCBcdTAwMjYgY29udGFpbmVyIGxldmVsLCB0aGUgY29udGFpbmVyIG9wdGlvbnMgb3ZlcnJpZGUgdGhlIHBvZCBvcHRpb25zLiBOb3RlIHRoYXQgdGhpcyBmaWVsZCBjYW5ub3QgYmUgc2V0IHdoZW4gc3BlYy5vcy5uYW1lIGlzIHdpbmRvd3MuIiwicHJvcGVydGllcyI6eyJsb2NhbGhvc3RQcm9maWxlIjp7ImRlc2NyaXB0aW9uIjoibG9jYWxob3N0UHJvZmlsZSBpbmRpY2F0ZXMgYSBwcm9maWxlIGRlZmluZWQgaW4gYSBmaWxlIG9uIHRoZSBub2RlIHNob3VsZCBiZSB1c2VkLiBUaGUgcHJvZmlsZSBtdXN0IGJlIHByZWNvbmZpZ3VyZWQgb24gdGhlIG5vZGUgdG8gd29yay4gTXVzdCBiZSBhIGRlc2NlbmRpbmcgcGF0aCwgcmVsYXRpdmUgdG8gdGhlIGt1YmVsZXQncyBjb25maWd1cmVkIHNlY2NvbXAgcHJvZmlsZSBsb2NhdGlvbi4gTXVzdCBvbmx5IGJlIHNldCBpZiB0eXBlIGlzIFwiTG9jYWxob3N0XCIuIiwidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7ImRlc2NyaXB0aW9uIjoidHlwZSBpbmRpY2F0ZXMgd2hpY2gga2luZCBvZiBzZWNjb21wIHByb2ZpbGUgd2lsbCBiZSBhcHBsaWVkLiBWYWxpZCBvcHRpb25zIGFyZTogXG4gTG9jYWxob3N0IC0gYSBwcm9maWxlIGRlZmluZWQgaW4gYSBmaWxlIG9uIHRoZSBub2RlIHNob3VsZCBiZSB1c2VkLiBSdW50aW1lRGVmYXVsdCAtIHRoZSBjb250YWluZXIgcnVudGltZSBkZWZhdWx0IHByb2ZpbGUgc2hvdWxkIGJlIHVzZWQuIFVuY29uZmluZWQgLSBubyBwcm9maWxlIHNob3VsZCBiZSBhcHBsaWVkLiIsInR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJ3aW5kb3dzT3B0aW9ucyI6eyJkZXNjcmlwdGlvbiI6IlRoZSBXaW5kb3dzIHNwZWNpZmljIHNldHRpbmdzIGFwcGxpZWQgdG8gYWxsIGNvbnRhaW5lcnMuIElmIHVuc3BlY2lmaWVkLCB0aGUgb3B0aW9ucyBmcm9tIHRoZSBQb2RTZWN1cml0eUNvbnRleHQgd2lsbCBiZSB1c2VkLiBJZiBzZXQgaW4gYm90aCBTZWN1cml0eUNvbnRleHQgYW5kIFBvZFNlY3VyaXR5Q29udGV4dCwgdGhlIHZhbHVlIHNwZWNpZmllZCBpbiBTZWN1cml0eUNvbnRleHQgdGFrZXMgcHJlY2VkZW5jZS4gTm90ZSB0aGF0IHRoaXMgZmllbGQgY2Fubm90IGJlIHNldCB3aGVuIHNwZWMub3MubmFtZSBpcyBsaW51eC4iLCJwcm9wZXJ0aWVzIjp7Imdtc2FDcmVkZW50aWFsU3BlYyI6eyJkZXNjcmlwdGlvbiI6IkdNU0FDcmVkZW50aWFsU3BlYyBpcyB3aGVyZSB0aGUgR01TQSBhZG1pc3Npb24gd2ViaG9vayAoaHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMtc2lncy93aW5kb3dzLWdtc2EpIGlubGluZXMgdGhlIGNvbnRlbnRzIG9mIHRoZSBHTVNBIGNyZWRlbnRpYWwgc3BlYyBuYW1lZCBieSB0aGUgR01TQUNyZWRlbnRpYWxTcGVjTmFtZSBmaWVsZC4iLCJ0eXBlIjoic3RyaW5nIn0sImdtc2FDcmVkZW50aWFsU3BlY05hbWUiOnsiZGVzY3JpcHRpb24iOiJHTVNBQ3JlZGVudGlhbFNwZWNOYW1lIGlzIHRoZSBuYW1lIG9mIHRoZSBHTVNBIGNyZWRlbnRpYWwgc3BlYyB0byB1c2UuIiwidHlwZSI6InN0cmluZyJ9LCJob3N0UHJvY2VzcyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RQcm9jZXNzIGRldGVybWluZXMgaWYgYSBjb250YWluZXIgc2hvdWxkIGJlIHJ1biBhcyBhICdIb3N0IFByb2Nlc3MnIGNvbnRhaW5lci4gVGhpcyBmaWVsZCBpcyBhbHBoYS1sZXZlbCBhbmQgd2lsbCBvbmx5IGJlIGhvbm9yZWQgYnkgY29tcG9uZW50cyB0aGF0IGVuYWJsZSB0aGUgV2luZG93c0hvc3RQcm9jZXNzQ29udGFpbmVycyBmZWF0dXJlIGZsYWcuIFNldHRpbmcgdGhpcyBmaWVsZCB3aXRob3V0IHRoZSBmZWF0dXJlIGZsYWcgd2lsbCByZXN1bHQgaW4gZXJyb3JzIHdoZW4gdmFsaWRhdGluZyB0aGUgUG9kLiBBbGwgb2YgYSBQb2QncyBjb250YWluZXJzIG11c3QgaGF2ZSB0aGUgc2FtZSBlZmZlY3RpdmUgSG9zdFByb2Nlc3MgdmFsdWUgKGl0IGlzIG5vdCBhbGxvd2VkIHRvIGhhdmUgYSBtaXggb2YgSG9zdFByb2Nlc3MgY29udGFpbmVycyBhbmQgbm9uLUhvc3RQcm9jZXNzIGNvbnRhaW5lcnMpLiAgSW4gYWRkaXRpb24sIGlmIEhvc3RQcm9jZXNzIGlzIHRydWUgdGhlbiBIb3N0TmV0d29yayBtdXN0IGFsc28gYmUgc2V0IHRvIHRydWUuIiwidHlwZSI6ImJvb2xlYW4ifSwicnVuQXNVc2VyTmFtZSI6eyJkZXNjcmlwdGlvbiI6IlRoZSBVc2VyTmFtZSBpbiBXaW5kb3dzIHRvIHJ1biB0aGUgZW50cnlwb2ludCBvZiB0aGUgY29udGFpbmVyIHByb2Nlc3MuIERlZmF1bHRzIHRvIHRoZSB1c2VyIHNwZWNpZmllZCBpbiBpbWFnZSBtZXRhZGF0YSBpZiB1bnNwZWNpZmllZC4gTWF5IGFsc28gYmUgc2V0IGluIFBvZFNlY3VyaXR5Q29udGV4dC4gSWYgc2V0IGluIGJvdGggU2VjdXJpdHlDb250ZXh0IGFuZCBQb2RTZWN1cml0eUNvbnRleHQsIHRoZSB2YWx1ZSBzcGVjaWZpZWQgaW4gU2VjdXJpdHlDb250ZXh0IHRha2VzIHByZWNlZGVuY2UuIiwidHlwZSI6InN0cmluZyJ9fSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9LCJ0b2xlcmF0aW9ucyI6eyJpdGVtcyI6eyJkZXNjcmlwdGlvbiI6IlRoZSBwb2QgdGhpcyBUb2xlcmF0aW9uIGlzIGF0dGFjaGVkIHRvIHRvbGVyYXRlcyBhbnkgdGFpbnQgdGhhdCBtYXRjaGVzIHRoZSB0cmlwbGUgXHUwMDNja2V5LHZhbHVlLGVmZmVjdFx1MDAzZSB1c2luZyB0aGUgbWF0Y2hpbmcgb3BlcmF0b3IgXHUwMDNjb3BlcmF0b3JcdTAwM2UuIiwicHJvcGVydGllcyI6eyJlZmZlY3QiOnsiZGVzY3JpcHRpb24iOiJFZmZlY3QgaW5kaWNhdGVzIHRoZSB0YWludCBlZmZlY3QgdG8gbWF0Y2guIEVtcHR5IG1lYW5zIG1hdGNoIGFsbCB0YWludCBlZmZlY3RzLiBXaGVuIHNwZWNpZmllZCwgYWxsb3dlZCB2YWx1ZXMgYXJlIE5vU2NoZWR1bGUsIFByZWZlck5vU2NoZWR1bGUgYW5kIE5vRXhlY3V0ZS4iLCJ0eXBlIjoic3RyaW5nIn0sImtleSI6eyJkZXNjcmlwdGlvbiI6IktleSBpcyB0aGUgdGFpbnQga2V5IHRoYXQgdGhlIHRvbGVyYXRpb24gYXBwbGllcyB0by4gRW1wdHkgbWVhbnMgbWF0Y2ggYWxsIHRhaW50IGtleXMuIElmIHRoZSBrZXkgaXMgZW1wdHksIG9wZXJhdG9yIG11c3QgYmUgRXhpc3RzOyB0aGlzIGNvbWJpbmF0aW9uIG1lYW5zIHRvIG1hdGNoIGFsbCB2YWx1ZXMgYW5kIGFsbCBrZXlzLiIsInR5cGUiOiJzdHJpbmcifSwib3BlcmF0b3IiOnsiZGVzY3JpcHRpb24iOiJPcGVyYXRvciByZXByZXNlbnRzIGEga2V5J3MgcmVsYXRpb25zaGlwIHRvIHRoZSB2YWx1ZS4gVmFsaWQgb3BlcmF0b3JzIGFyZSBFeGlzdHMgYW5kIEVxdWFsLiBEZWZhdWx0cyB0byBFcXVhbC4gRXhpc3RzIGlzIGVxdWl2YWxlbnQgdG8gd2lsZGNhcmQgZm9yIHZhbHVlLCBzbyB0aGF0IGEgcG9kIGNhbiB0b2xlcmF0ZSBhbGwgdGFpbnRzIG9mIGEgcGFydGljdWxhciBjYXRlZ29yeS4iLCJ0eXBlIjoic3RyaW5nIn0sInRvbGVyYXRpb25TZWNvbmRzIjp7ImRlc2NyaXB0aW9uIjoiVG9sZXJhdGlvblNlY29uZHMgcmVwcmVzZW50cyB0aGUgcGVyaW9kIG9mIHRpbWUgdGhlIHRvbGVyYXRpb24gKHdoaWNoIG11c3QgYmUgb2YgZWZmZWN0IE5vRXhlY3V0ZSwgb3RoZXJ3aXNlIHRoaXMgZmllbGQgaXMgaWdub3JlZCkgdG9sZXJhdGVzIHRoZSB0YWludC4gQnkgZGVmYXVsdCwgaXQgaXMgbm90IHNldCwgd2hpY2ggbWVhbnMgdG9sZXJhdGUgdGhlIHRhaW50IGZvcmV2ZXIgKGRvIG5vdCBldmljdCkuIFplcm8gYW5kIG5lZ2F0aXZlIHZhbHVlcyB3aWxsIGJlIHRyZWF0ZWQgYXMgMCAoZXZpY3QgaW1tZWRpYXRlbHkpIGJ5IHRoZSBzeXN0ZW0uIiwiZm9ybWF0IjoiaW50NjQiLCJ0eXBlIjoiaW50ZWdlciJ9LCJ2YWx1ZSI6eyJkZXNjcmlwdGlvbiI6IlZhbHVlIGlzIHRoZSB0YWludCB2YWx1ZSB0aGUgdG9sZXJhdGlvbiBtYXRjaGVzIHRvLiBJZiB0aGUgb3BlcmF0b3IgaXMgRXhpc3RzLCB0aGUgdmFsdWUgc2hvdWxkIGJlIGVtcHR5LCBvdGhlcndpc2UganVzdCBhIHJlZ3VsYXIgc3RyaW5nLiIsInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpbWFnZSIsInBvcnQiXSwidHlwZSI6Im9iamVjdCJ9LCJkZWxldGVSb3V0ZVBhdGgiOnsidHlwZSI6InN0cmluZyJ9LCJnZXRJbnRlcmZhY2VQYXRoIjp7InR5cGUiOiJzdHJpbmcifSwiaXBhbVR5cGUiOnsidHlwZSI6InN0cmluZyJ9LCJqb2luUGF0aCI6eyJ0eXBlIjoic3RyaW5nIn0sImxvZ0xldmVsIjp7InR5cGUiOiJpbnRlZ2VyIn0sImxvbmdSZWNvbmNpbGVNaW51dGVzIjp7InR5cGUiOiJpbnRlZ2VyIn0sIm5vcm1hbFJlY29uY2lsZU1pbnV0ZXMiOnsidHlwZSI6ImludGVnZXIifSwidXJnZW50UmVjb25jaWxlU2Vjb25kcyI6eyJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsiY25pVHlwZSIsImRhZW1vbiIsImdldEludGVyZmFjZVBhdGgiLCJpcGFtVHlwZSIsImpvaW5QYXRoIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiQ29uZmlnU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIENvbmZpZyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImRldmljZWNsYXNzZXMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiRGV2aWNlQ2xhc3MiLCJsaXN0S2luZCI6IkRldmljZUNsYXNzTGlzdCIsInBsdXJhbCI6ImRldmljZWNsYXNzZXMiLCJzaW5ndWxhciI6ImRldmljZWNsYXNzIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiRGV2aWNlQ2xhc3MgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGRldmljZWNsYXNzZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1NwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInByb3BlcnRpZXMiOnsiaWRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsicHJvZHVjdHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInByb2R1Y3RzIiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpZHMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Imhvc3RpbnRlcmZhY2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJsaXN0S2luZCI6Ikhvc3RJbnRlcmZhY2VMaXN0IiwicGx1cmFsIjoiaG9zdGludGVyZmFjZXMiLCJzaW5ndWxhciI6Imhvc3RpbnRlcmZhY2UifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwY2lBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwicHJvZHVjdCI6eyJ0eXBlIjoic3RyaW5nIn0sInZlbmRvciI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJpbnRlcmZhY2VOYW1lIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJob3N0TmFtZSIsImludGVyZmFjZXMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIEhvc3RJbnRlcmZhY2UiLCJwcm9wZXJ0aWVzIjp7InN0YXQiOnsicHJvcGVydGllcyI6eyJjb3VudCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibGFzdFJ4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RSeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFRpbWVzdGFtcCI6eyJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VHhEcm9wIjp7InR5cGUiOiJpbnRlZ2VyIn0sInJ4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwicnhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn0sInR4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJjb3VudCIsImludGVyZmFjZU5hbWUiLCJsYXN0UngiLCJsYXN0UnhEcm9wIiwibGFzdFRpbWVzdGFtcCIsImxhc3RUeCIsImxhc3RUeERyb3AiLCJyeERyb3BSYXRlIiwicnhSYXRlIiwidHhEcm9wUmF0ZSIsInR4UmF0ZSJdLCJ0eXBlIjoib2JqZWN0In19LCJyZXF1aXJlZCI6WyJzdGF0Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImlwcG9vbHMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiSVBQb29sIiwibGlzdEtpbmQiOiJJUFBvb2xMaXN0IiwicGx1cmFsIjoiaXBwb29scyIsInNpbmd1bGFyIjoiaXBwb29sIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBpcHBvb2xzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIElQUG9vbCIsInByb3BlcnRpZXMiOnsiYWxsb2NhdGlvbnMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJhZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwiaW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwibmFtZXNwYWNlIjp7InR5cGUiOiJzdHJpbmcifSwicG9kIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFkZHJlc3MiLCJpbmRleCIsIm5hbWVzcGFjZSIsInBvZCJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJleGNsdWRlcyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJuZXRBdHRhY2hEZWYiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RDSURSIjp7ImRlc2NyaXB0aW9uIjoiRm9vIGlzIGFuIGV4YW1wbGUgZmllbGQgb2YgSVBQb29sLiBFZGl0IGlwcG9vbF90eXBlcy5nbyB0byByZW1vdmUvdXBkYXRlIiwidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJhbGxvY2F0aW9ucyIsImV4Y2x1ZGVzIiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwibmV0QXR0YWNoRGVmIiwicG9kQ0lEUiIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIElQUG9vbCIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoib3BlcmF0b3JzLmNvcmVvcy5jb20vdjFhbHBoYTEiLCJraW5kIjoiQ2x1c3RlclNlcnZpY2VWZXJzaW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiYWxtLWV4YW1wbGVzIjoiW1xuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiQ0lEUlwiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgIFwibm90ZVwiOiBcIlRoaXMgcmVzb3VyY2Ugd2lsbCBiZSBhdXRvLWdlbmVyYXRlZCBhbmQgY29udHJvbGxlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5EbyBub3QgY3JlYXRlL21vZGlmeS5cXG5cIlxuICAgICAgfSxcbiAgICAgIFwibmFtZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDNcIixcbiAgICAgIFwibmFtZXNwYWNlXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1zeXN0ZW1cIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiY2lkclwiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4yNDQuMC4xNjhcIixcbiAgICAgICAgICAgICAgXCJob3N0SW5kZXhcIjogMCxcbiAgICAgICAgICAgICAgXCJob3N0TmFtZVwiOiBcIm5vZGUtMVwiLFxuICAgICAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgxXCIsXG4gICAgICAgICAgICAgIFwiaXBwb29sXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sMy0xOTIuMTY4LjAuMC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjAuMC8yNlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjI0NC4wLjE2N1wiLFxuICAgICAgICAgICAgICBcImhvc3RJbmRleFwiOiAxLFxuICAgICAgICAgICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0yXCIsXG4gICAgICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDFcIixcbiAgICAgICAgICAgICAgXCJpcHBvb2xcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzLTE5Mi4xNjguMC42NC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjAuNjQvMjZcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJpbnRlcmZhY2VJbmRleFwiOiAwLFxuICAgICAgICAgIFwibmV0QWRkcmVzc1wiOiBcIjEwLjI0NC4wLjAvMTZcIixcbiAgICAgICAgICBcInZsYW5DSURSXCI6IFwiMTkyLjE2OC4wLjAvMThcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJob3N0c1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiaG9zdElQXCI6IFwiMTAuMC4wLjE2OFwiLFxuICAgICAgICAgICAgICBcImhvc3RJbmRleFwiOiAwLFxuICAgICAgICAgICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDJcIixcbiAgICAgICAgICAgICAgXCJpcHBvb2xcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzLTE5Mi4xNjguNjQuMC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjY0LjAvMjZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4wLjAuMTY3XCIsXG4gICAgICAgICAgICAgIFwiaG9zdEluZGV4XCI6IDEsXG4gICAgICAgICAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTJcIixcbiAgICAgICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMlwiLFxuICAgICAgICAgICAgICBcImlwcG9vbFwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDMtMTkyLjE2OC42NC42NC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjY0LjY0LzI2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiaW50ZXJmYWNlSW5kZXhcIjogMSxcbiAgICAgICAgICBcIm5ldEFkZHJlc3NcIjogXCIxMC4wLjAuMC8xNlwiLFxuICAgICAgICAgIFwidmxhbkNJRFJcIjogXCIxOTIuMTY4LjY0LjAvMThcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJjb25maWdcIjoge1xuICAgICAgICBcImhvc3RCbG9ja1wiOiA4LFxuICAgICAgICBcImludGVyZmFjZUJsb2NrXCI6IDIsXG4gICAgICAgIFwibWFzdGVyTmV0c1wiOiBbXSxcbiAgICAgICAgXCJuYW1lXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sM1wiLFxuICAgICAgICBcInN1Ym5ldFwiOiBcIjE5Mi4xNjguMC4wLzE2XCIsXG4gICAgICAgIFwidHlwZVwiOiBcImlwdmxhblwiLFxuICAgICAgICBcInZsYW5Nb2RlXCI6IFwibDNcIlxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIkNJRFJcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICBcIm5vdGVcIjogXCJUaGlzIHJlc291cmNlIHdpbGwgYmUgYXV0by1nZW5lcmF0ZWQgYW5kIGNvbnRyb2xsZWQgYnkgbXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIuXFxuRG8gbm90IGNyZWF0ZS9tb2RpZnkuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJpcHZsYW5sM1wiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJjaWRyXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiaG9zdHNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjI0NC4wLjE2OFwiLFxuICAgICAgICAgICAgICBcImhvc3RJbmRleFwiOiAwLFxuICAgICAgICAgICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDFcIixcbiAgICAgICAgICAgICAgXCJpcHBvb2xcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzLTE5Mi4xNjguMC4wLTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguMC4wLzI2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiaG9zdElQXCI6IFwiMTAuMjQ0LjAuMTY3XCIsXG4gICAgICAgICAgICAgIFwiaG9zdEluZGV4XCI6IDEsXG4gICAgICAgICAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTJcIixcbiAgICAgICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMVwiLFxuICAgICAgICAgICAgICBcImlwcG9vbFwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDMtMTkyLjE2OC4wLjY0LTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguMC42NC8yNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImludGVyZmFjZUluZGV4XCI6IDAsXG4gICAgICAgICAgXCJuZXRBZGRyZXNzXCI6IFwiMTAuMjQ0LjAuMC8xNlwiLFxuICAgICAgICAgIFwidmxhbkNJRFJcIjogXCIxOTIuMTY4LjAuMC8xOFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4wLjAuMTY4XCIsXG4gICAgICAgICAgICAgIFwiaG9zdEluZGV4XCI6IDAsXG4gICAgICAgICAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTFcIixcbiAgICAgICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMlwiLFxuICAgICAgICAgICAgICBcImlwcG9vbFwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDMtMTkyLjE2OC42NC4wLTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguNjQuMC8yNlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjAuMC4xNjdcIixcbiAgICAgICAgICAgICAgXCJob3N0SW5kZXhcIjogMSxcbiAgICAgICAgICAgICAgXCJob3N0TmFtZVwiOiBcIm5vZGUtMlwiLFxuICAgICAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgyXCIsXG4gICAgICAgICAgICAgIFwiaXBwb29sXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sMy0xOTIuMTY4LjY0LjY0LTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguNjQuNjQvMjZcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJpbnRlcmZhY2VJbmRleFwiOiAxLFxuICAgICAgICAgIFwibmV0QWRkcmVzc1wiOiBcIjEwLjAuMC4wLzE2XCIsXG4gICAgICAgICAgXCJ2bGFuQ0lEUlwiOiBcIjE5Mi4xNjguNjQuMC8xOFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImNvbmZpZ1wiOiB7XG4gICAgICAgIFwiaG9zdEJsb2NrXCI6IDgsXG4gICAgICAgIFwiaW50ZXJmYWNlQmxvY2tcIjogMixcbiAgICAgICAgXCJtYXN0ZXJOZXRzXCI6IFtdLFxuICAgICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzXCIsXG4gICAgICAgIFwic3VibmV0XCI6IFwiMTkyLjE2OC4wLjAvMTZcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiaXB2bGFuXCIsXG4gICAgICAgIFwidmxhbk1vZGVcIjogXCJsM1wiXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiQ29uZmlnXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgXCJub3RlXCI6IFwiVGhlIHJlc291cmNlIHdpdGggZGVmYXVsdCBzZXR0aW5ncyB3aWxsIGJlIGF1dG8tY3JlYXRlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5QbGVhc2UgbW9kaWZ5IGlmIG5lZWQuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW11bHRpLW5pY2RcIixcbiAgICAgIFwibmFtZXNwYWNlXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1zeXN0ZW1cIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiYWRkUm91dGVQYXRoXCI6IFwiL2FkZGwzXCIsXG4gICAgICBcImNuaVR5cGVcIjogXCJtdWx0aS1uaWNcIixcbiAgICAgIFwiY29udGV4dFRpbWVvdXRNaW51dGVzXCI6IDIsXG4gICAgICBcImRhZW1vblwiOiB7XG4gICAgICAgIFwiZW52XCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJEQUVNT05fUE9SVFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjExMDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlJUX1RBQkxFX1BBVEhcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIvb3B0L3J0X3RhYmxlc1wiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImltYWdlXCI6IFwiZ2hjci5pby9mb3VuZGF0aW9uLW1vZGVsLXN0YWNrL211bHRpLW5pYy1jbmktZGFlbW9uOnYxLjIuNFwiLFxuICAgICAgICBcIm1vdW50c1wiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJob3N0cGF0aFwiOiBcIi92YXIvbGliL2NuaS9iaW5cIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNuaWJpblwiLFxuICAgICAgICAgICAgXCJwb2RwYXRoXCI6IFwiL2hvc3Qvb3B0L2NuaS9iaW5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJob3N0cGF0aFwiOiBcIi92YXIvbGliL2t1YmVsZXQvZGV2aWNlLXBsdWdpbnNcIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImRldmljZS1wbHVnaW5cIixcbiAgICAgICAgICAgIFwicG9kcGF0aFwiOiBcIi92YXIvbGliL2t1YmVsZXQvZGV2aWNlLXBsdWdpbnNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJob3N0cGF0aFwiOiBcIi9ldGMvaXByb3V0ZTIvcnRfdGFibGVzXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJydC10YWJsZXNcIixcbiAgICAgICAgICAgIFwicG9kcGF0aFwiOiBcIi9vcHQvcnRfdGFibGVzXCJcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwicG9ydFwiOiAxMTAwMCxcbiAgICAgICAgXCJyZXNvdXJjZXNcIjoge1xuICAgICAgICAgIFwicmVxdWVzdHNcIjoge1xuICAgICAgICAgICAgXCJjcHVcIjogXCIxMDBtXCIsXG4gICAgICAgICAgICBcIm1lbW9yeVwiOiBcIjUwTWlcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzZWN1cml0eUNvbnRleHRcIjoge1xuICAgICAgICAgIFwicHJpdmlsZWdlZFwiOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImRlbGV0ZVJvdXRlUGF0aFwiOiBcIi9kZWxldGVsM1wiLFxuICAgICAgXCJnZXRJbnRlcmZhY2VQYXRoXCI6IFwiL2ludGVyZmFjZVwiLFxuICAgICAgXCJpcGFtVHlwZVwiOiBcIm11bHRpLW5pYy1pcGFtXCIsXG4gICAgICBcImpvaW5QYXRoXCI6IFwiL2pvaW5cIixcbiAgICAgIFwibG9nTGV2ZWxcIjogNCxcbiAgICAgIFwibG9uZ1JlY29uY2lsZU1pbnV0ZXNcIjogMTAsXG4gICAgICBcIm5vcm1hbFJlY29uY2lsZU1pbnV0ZXNcIjogMSxcbiAgICAgIFwidXJnZW50UmVjb25jaWxlU2Vjb25kc1wiOiA1XG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiQ29uZmlnXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgXCJub3RlXCI6IFwiVGhlIHJlc291cmNlIHdpdGggZGVmYXVsdCBzZXR0aW5ncyB3aWxsIGJlIGF1dG8tY3JlYXRlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5QbGVhc2UgbW9kaWZ5IGlmIG5lZWQuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWNkXCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImFkZFJvdXRlUGF0aFwiOiBcIi9hZGRsM1wiLFxuICAgICAgXCJjbmlUeXBlXCI6IFwibXVsdGktbmljXCIsXG4gICAgICBcImNvbnRleHRUaW1lb3V0TWludXRlc1wiOiAyLFxuICAgICAgXCJkYWVtb25cIjoge1xuICAgICAgICBcImVudlwiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiREFFTU9OX1BPUlRcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIxMTAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJSVF9UQUJMRV9QQVRIXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiL29wdC9ydF90YWJsZXNcIlxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJpbWFnZVwiOiBcImdoY3IuaW8vZm91bmRhdGlvbi1tb2RlbC1zdGFjay9tdWx0aS1uaWMtY25pLWRhZW1vbjp2MS4yLjRcIixcbiAgICAgICAgXCJtb3VudHNcIjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaG9zdHBhdGhcIjogXCIvdmFyL2xpYi9jbmkvYmluXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjbmliaW5cIixcbiAgICAgICAgICAgIFwicG9kcGF0aFwiOiBcIi9ob3N0L29wdC9jbmkvYmluXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaG9zdHBhdGhcIjogXCIvdmFyL2xpYi9rdWJlbGV0L2RldmljZS1wbHVnaW5zXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJkZXZpY2UtcGx1Z2luXCIsXG4gICAgICAgICAgICBcInBvZHBhdGhcIjogXCIvdmFyL2xpYi9rdWJlbGV0L2RldmljZS1wbHVnaW5zXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaG9zdHBhdGhcIjogXCIvZXRjL2lwcm91dGUyL3J0X3RhYmxlc1wiLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicnQtdGFibGVzXCIsXG4gICAgICAgICAgICBcInBvZHBhdGhcIjogXCIvb3B0L3J0X3RhYmxlc1wiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInBvcnRcIjogMTEwMDAsXG4gICAgICAgIFwicmVzb3VyY2VzXCI6IHtcbiAgICAgICAgICBcInJlcXVlc3RzXCI6IHtcbiAgICAgICAgICAgIFwiY3B1XCI6IFwiMTAwbVwiLFxuICAgICAgICAgICAgXCJtZW1vcnlcIjogXCI1ME1pXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic2VjdXJpdHlDb250ZXh0XCI6IHtcbiAgICAgICAgICBcInByaXZpbGVnZWRcIjogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJkZWxldGVSb3V0ZVBhdGhcIjogXCIvZGVsZXRlbDNcIixcbiAgICAgIFwiZ2V0SW50ZXJmYWNlUGF0aFwiOiBcIi9pbnRlcmZhY2VcIixcbiAgICAgIFwiaXBhbVR5cGVcIjogXCJtdWx0aS1uaWMtaXBhbVwiLFxuICAgICAgXCJqb2luUGF0aFwiOiBcIi9qb2luXCIsXG4gICAgICBcImxvZ0xldmVsXCI6IDQsXG4gICAgICBcImxvbmdSZWNvbmNpbGVNaW51dGVzXCI6IDEwLFxuICAgICAgXCJub3JtYWxSZWNvbmNpbGVNaW51dGVzXCI6IDEsXG4gICAgICBcInVyZ2VudFJlY29uY2lsZVNlY29uZHNcIjogNVxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIkRldmljZUNsYXNzXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWhpZ2hzcGVlZFwiLFxuICAgICAgXCJuYW1lc3BhY2VcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLXN5c3RlbVwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJpZHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcIjEwMTlcIixcbiAgICAgICAgICAgIFwiMTAxZFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjE1YjNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcImVmYTBcIixcbiAgICAgICAgICAgIFwiZWZhMVwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjFkMGZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiRGV2aWNlQ2xhc3NcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwibmFtZVwiOiBcImhpZ2hzcGVlZFwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJpZHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcIjEwMTlcIixcbiAgICAgICAgICAgIFwiMTAxZFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjE1YjNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcImVmYTBcIixcbiAgICAgICAgICAgIFwiZWZhMVwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjFkMGZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiSG9zdEludGVyZmFjZVwiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgIFwibm90ZVwiOiBcIlRoaXMgcmVzb3VyY2Ugd2lsbCBiZSBhdXRvLWdlbmVyYXRlZCBhbmQgY29udHJvbGxlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5EbyBub3QgY3JlYXRlL21vZGlmeS5cXG5cIlxuICAgICAgfSxcbiAgICAgIFwibmFtZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3Itbm9kZS0xXCIsXG4gICAgICBcIm5hbWVzcGFjZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3Itc3lzdGVtXCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICBcImludGVyZmFjZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4wLjAuMTY4XCIsXG4gICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMVwiLFxuICAgICAgICAgIFwibmV0QWRkcmVzc1wiOiBcIjEwLjAuMC4wLzE2XCIsXG4gICAgICAgICAgXCJwY2lBZGRyZXNzXCI6IFwiMDAwMDowMDowNC4wXCIsXG4gICAgICAgICAgXCJwcm9kdWN0XCI6IFwiMTAwMFwiLFxuICAgICAgICAgIFwidmVuZG9yXCI6IFwiMWFmNFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjEuMC4xNjhcIixcbiAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgyXCIsXG4gICAgICAgICAgXCJuZXRBZGRyZXNzXCI6IFwiMTAuMS4wLjAvMTZcIixcbiAgICAgICAgICBcInBjaUFkZHJlc3NcIjogXCIwMDAwOjAwOjA1LjBcIixcbiAgICAgICAgICBcInByb2R1Y3RcIjogXCIxMDAwXCIsXG4gICAgICAgICAgXCJ2ZW5kb3JcIjogXCIxYWY0XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIkhvc3RJbnRlcmZhY2VcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICBcIm5vdGVcIjogXCJUaGlzIHJlc291cmNlIHdpbGwgYmUgYXV0by1nZW5lcmF0ZWQgYW5kIGNvbnRyb2xsZWQgYnkgbXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIuXFxuRG8gbm90IGNyZWF0ZS9tb2RpZnkuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJub2RlLTFcIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTFcIixcbiAgICAgIFwiaW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjAuMC4xNjhcIixcbiAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgxXCIsXG4gICAgICAgICAgXCJuZXRBZGRyZXNzXCI6IFwiMTAuMC4wLjAvMTZcIixcbiAgICAgICAgICBcInBjaUFkZHJlc3NcIjogXCIwMDAwOjAwOjA0LjBcIixcbiAgICAgICAgICBcInByb2R1Y3RcIjogXCIxMDAwXCIsXG4gICAgICAgICAgXCJ2ZW5kb3JcIjogXCIxYWY0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaG9zdElQXCI6IFwiMTAuMS4wLjE2OFwiLFxuICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDJcIixcbiAgICAgICAgICBcIm5ldEFkZHJlc3NcIjogXCIxMC4xLjAuMC8xNlwiLFxuICAgICAgICAgIFwicGNpQWRkcmVzc1wiOiBcIjAwMDA6MDA6MDUuMFwiLFxuICAgICAgICAgIFwicHJvZHVjdFwiOiBcIjEwMDBcIixcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjFhZjRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiSVBQb29sXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgXCJub3RlXCI6IFwiVGhpcyByZXNvdXJjZSB3aWxsIGJlIGF1dG8tZ2VuZXJhdGVkIGFuZCBjb250cm9sbGVkIGJ5IG11bHRpLW5pYy1jbmktb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyLlxcbkRvIG5vdCBjcmVhdGUvbW9kaWZ5LlxcblwiXG4gICAgICB9LFxuICAgICAgXCJuYW1lXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sMy0xOTIuMTY4LjAuMC0yNlwiLFxuICAgICAgXCJuYW1lc3BhY2VcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLXN5c3RlbVwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJhbGxvY2F0aW9uc1wiOiBbXSxcbiAgICAgIFwiZXhjbHVkZXNcIjogW10sXG4gICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgxXCIsXG4gICAgICBcIm5ldEF0dGFjaERlZlwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDNcIixcbiAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguMC4wLzI2XCIsXG4gICAgICBcInZsYW5DSURSXCI6IFwiMTkyLjE2OC4wLjAvMThcIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIklQUG9vbFwiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgIFwibm90ZVwiOiBcIlRoaXMgcmVzb3VyY2Ugd2lsbCBiZSBhdXRvLWdlbmVyYXRlZCBhbmQgY29udHJvbGxlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5EbyBub3QgY3JlYXRlL21vZGlmeS5cXG5cIlxuICAgICAgfSxcbiAgICAgIFwibmFtZVwiOiBcImlwdmxhbmwzLTE5Mi4xNjguMC4wLTI2XCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImFsbG9jYXRpb25zXCI6IFtdLFxuICAgICAgXCJleGNsdWRlc1wiOiBbXSxcbiAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTFcIixcbiAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDFcIixcbiAgICAgIFwibmV0QXR0YWNoRGVmXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sM1wiLFxuICAgICAgXCJwb2RDSURSXCI6IFwiMTkyLjE2OC4wLjAvMjZcIixcbiAgICAgIFwidmxhbkNJRFJcIjogXCIxOTIuMTY4LjAuMC8xOFwiXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiTXVsdGlOaWNOZXR3b3JrXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzXCIsXG4gICAgICBcIm5hbWVzcGFjZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3Itc3lzdGVtXCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImlwYW1cIjogXCJ7XFxuICBcXFwidHlwZVxcXCI6IFxcXCJtdWx0aS1uaWMtaXBhbVxcXCIsXFxuICBcXFwiaG9zdEJsb2NrXFxcIjogOCwgXFxuICBcXFwiaW50ZXJmYWNlQmxvY2tcXFwiOiAyLFxcbiAgXFxcInZsYW5Nb2RlXFxcIjogXFxcImwzXFxcIlxcbn1cXG5cIixcbiAgICAgIFwibXVsdGlOSUNJUEFNXCI6IHRydWUsXG4gICAgICBcInBsdWdpblwiOiB7XG4gICAgICAgIFwiYXJnc1wiOiB7XG4gICAgICAgICAgXCJtb2RlXCI6IFwibDNcIlxuICAgICAgICB9LFxuICAgICAgICBcImNuaVZlcnNpb25cIjogXCIwLjMuMFwiLFxuICAgICAgICBcInR5cGVcIjogXCJpcHZsYW5cIlxuICAgICAgfSxcbiAgICAgIFwic3VibmV0XCI6IFwiMTkyLjE2OC4wLjAvMTZcIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIk11bHRpTmljTmV0d29ya1wiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJuYW1lXCI6IFwiaXB2bGFubDNcIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiaXBhbVwiOiBcIntcXG4gIFxcXCJ0eXBlXFxcIjogXFxcIm11bHRpLW5pYy1pcGFtXFxcIixcXG4gIFxcXCJob3N0QmxvY2tcXFwiOiA4LCBcXG4gIFxcXCJpbnRlcmZhY2VCbG9ja1xcXCI6IDIsXFxuICBcXFwidmxhbk1vZGVcXFwiOiBcXFwibDNcXFwiXFxufVxcblwiLFxuICAgICAgXCJtdWx0aU5JQ0lQQU1cIjogdHJ1ZSxcbiAgICAgIFwicGx1Z2luXCI6IHtcbiAgICAgICAgXCJhcmdzXCI6IHtcbiAgICAgICAgICBcIm1vZGVcIjogXCJsM1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY25pVmVyc2lvblwiOiBcIjAuMy4wXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImlwdmxhblwiXG4gICAgICB9LFxuICAgICAgXCJzdWJuZXRcIjogXCIxOTIuMTY4LjAuMC8xNlwiXG4gICAgfVxuICB9XG5dIiwiY2FwYWJpbGl0aWVzIjoiQmFzaWMgSW5zdGFsbCIsImNhdGVnb3JpZXMiOiJOZXR3b3JraW5nIiwiY29udGFpbmVySW1hZ2UiOiJnaGNyLmlvL2ZvdW5kYXRpb24tbW9kZWwtc3RhY2svbXVsdGktbmljLWNuaS1jb250cm9sbGVyOnYxLjIuNCIsImNyZWF0ZWRBdCI6IjIwMjQtMTItMDZUMDg6MTg6MjZaIiwib3BlcmF0b3JzLm9wZXJhdG9yZnJhbWV3b3JrLmlvL2J1aWxkZXIiOiJvcGVyYXRvci1zZGstdjEuMzYuMSIsIm9wZXJhdG9ycy5vcGVyYXRvcmZyYW1ld29yay5pby9wcm9qZWN0X2xheW91dCI6ImdvLmt1YmVidWlsZGVyLmlvL3YzIn0sIm5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLnYxLjIuNCIsIm5hbWVzcGFjZSI6InBsYWNlaG9sZGVyIn0sInNwZWMiOnsiYXBpc2VydmljZWRlZmluaXRpb25zIjp7fSwiY3VzdG9tcmVzb3VyY2VkZWZpbml0aW9ucyI6eyJvd25lZCI6W3siZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJkaXNwbGF5TmFtZSI6IkNJRFIiLCJraW5kIjoiQ0lEUiIsIm5hbWUiOiJjaWRycy5tdWx0aW5pYy5mbXMuaW8iLCJ2ZXJzaW9uIjoidjEifSx7ImRlc2NyaXB0aW9uIjoiQ29uZmlnIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjb25maWdzIEFQSSIsImRpc3BsYXlOYW1lIjoiQ29uZmlnIiwia2luZCI6IkNvbmZpZyIsIm5hbWUiOiJjb25maWdzLm11bHRpbmljLmZtcy5pbyIsInZlcnNpb24iOiJ2MSJ9LHsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzcyBpcyB0aGUgU2NoZW1hIGZvciB0aGUgZGV2aWNlY2xhc3NlcyBBUEkiLCJkaXNwbGF5TmFtZSI6IkRldmljZSBDbGFzcyIsImtpbmQiOiJEZXZpY2VDbGFzcyIsIm5hbWUiOiJkZXZpY2VjbGFzc2VzLm11bHRpbmljLmZtcy5pbyIsInZlcnNpb24iOiJ2MSJ9LHsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJkaXNwbGF5TmFtZSI6Ikhvc3QgSW50ZXJmYWNlIiwia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJuYW1lIjoiaG9zdGludGVyZmFjZXMubXVsdGluaWMuZm1zLmlvIiwidmVyc2lvbiI6InYxIn0seyJkZXNjcmlwdGlvbiI6IklQUG9vbCBpcyB0aGUgU2NoZW1hIGZvciB0aGUgaXBwb29scyBBUEkiLCJkaXNwbGF5TmFtZSI6IklQUG9vbCIsImtpbmQiOiJJUFBvb2wiLCJuYW1lIjoiaXBwb29scy5tdWx0aW5pYy5mbXMuaW8iLCJ2ZXJzaW9uIjoidjEifSx7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsImRpc3BsYXlOYW1lIjoiTXVsdGkgTmljIE5ldHdvcmsiLCJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIiwidmVyc2lvbiI6InYxIn1dfSwiZGVzY3JpcHRpb24iOiJNdWx0aS1OSUMgQ05JIE9wZXJhdG9yIGhlbHBzIHRvIGF0dGFjaGluZyBzZWNvbmRhcnkgbmV0d29yayBpbnRlcmZhY2VzIHRoYXQgaXMgbGlua2VkIHRvIFxuZGlmZmVyZW50IG5ldHdvcmsgaW50ZXJmYWNlcyBvbiBob3N0IChOSUMpIHRvIHBvZCBwcm92aWRlcyBiZW5lZml0cyBvZiBuZXR3b3JrIHNlZ21lbnRhdGlvbiBcbmFuZCB0b3AtdXAgbmV0d29yayBiYW5kd2lkdGggaW4gdGhlIGNvbnRhaW5lcml6YXRpb24gc3lzdGVtLlxuXG5NdWx0aS1OSUMgQ05JIGlzIHRoZSBDTkkgcGx1Z2luIG9wZXJhdGluZyBvbiB0b3Agb2YgTXVsdHVzIENOSS4gXG5Ib3dldmVyLCBpbnN0ZWFkIG9mIGRlZmluaW5nIGFuZCBoYW5kbGluZyBlYWNoIHNlY29uZGFyeSBuZXR3b3JrIGludGVyZmFjZSBvbmUgYnkgb25lLCBcbnRoaXMgQ05JIGF1dG9tYXRpY2FsbHkgZGlzY292ZXJzIGFsbCBhdmFpbGFibGUgc2Vjb25kYXJ5IGludGVyZmFjZXMgYW5kIGhhbmRsZXMgdGhlbSBhcyBhIE5JQyBwb29sLiBcbldpdGggdGhpcyBtYW5uZXIsIGl0IGNhbiBwcm92aWRlIHRoZSBmb2xsb3dpbmcgYmVuZWZpdHMuXG5cbmkpIENvbW1vbiBzZWNvbmRhcnkgbmV0d29yayBkZWZpbml0aW9uOiBVc2VyIGNhbiBtYW5hZ2Ugb25seSBvbmUgbmV0d29yayBkZWZpbml0aW9uIGZvciBcbiAgIG11bHRpcGxlIHNlY29uZGFyeSBpbnRlcmZhY2VzIHdpdGggYSBjb21tb24gQ05JIG1haW4gcGx1Z2luIHN1Y2ggYXMgaXB2bGFuLCBtYWN2bGFuLCBhbmQgc3ItaW92LlxuXG5paSkgQ29tbW9uIE5BVC1ieXBhc3NpbmcgbmV0d29yayBzb2x1dGlvbjogQWxsIHNlY29uZGFyeSBOSUNzIG9uIGVhY2ggaG9zdCBjYW4gYmUgYXNzaWduZWQgXG4gICAgd2l0aCBub24tY29uZmxpY3QgQ0lEUiBhbmQgbm9uLWNvbmZsaWN0IEwzIHJvdXRpbmcgY29uZmlndXJhdGlvbiB0aGF0IGNhbiBvbWl0IGFuIG92ZXJsYXkgbmV0d29ya2luZyBvdmVyaGVhZC4gXG4gICAgUGFydGljdWxhcnlseSwgdGhlIENOSSBpcyBidWlsdC1pbiB3aXRoIEwzIElQVkxBTiBzb2x1dGlvbiBjb21wb3Npbmcgb2YgdGhlIGZvbGxvd2luZyBmdW5jdGlvbmFsaXRpZXMuXG5cbiAgICAxLiBJbnRlcmZhY2UtaG9zdC1kZXZpc2lvbiBDSURSIENvbXB1dGF0aW9uOiBjb21wdXRlIGFsbG9jYXRpbmcgQ0lEUiByYW5nZSBmb3IgZWFjaCBob3N0IGFuZCBlYWNoIGludGVyZmFjZSBcbiAgICAgICBmcm9tIGEgc2luZ2xlIGdsb2JhbCBzdWJuZXQgd2l0aCB0aGUgbnVtYmVyIG9mIGJpdHMgZm9yIGhvc3RzIGFuZCBmb3IgaW50ZXJmYWNlLlxuICAgIDIuIEwzIEhvc3QgUm91dGUgQ29uZmlndXJhdGlvbjogY29uZmlndXJlIEwzIHJvdXRlcyAobmV4dCBob3AgdmlhIGRldikgaW4gaG9zdCByb3V0ZSB0YWJsZSBhY2NvcmRpbmcgdG8gdGhlIGNvbXB1dGVkIENJRFIuXG4gICAgMy4gRGlzdHJpYnV0ZWQgSVAgQWxsb2NhdGlvbiBNYW5hZ2VtZW50OiBtYW5hZ2UgSVAgYWxsb2NhdGlvbi9kZWFsbG9jYXRpb24gZGlzdHJpYnV0ZWRseSB2aWEgdGhlIGNvbW11bmljYXRpb24gXG4gICAgICAgYmV0d2VlbiBDTkkgcHJvZ3JhbSBhbmQgZGFlbW9uIGF0IGVhY2ggaG9zdC5cblxuaWlpKSBQb2xpY3ktYmFzZWQgc2Vjb25kYXJ5IG5ldHdvcmsgYXR0YWNobWVudDogSW5zdGVhZCBvZiBzdGF0aWNhbGx5IHNldCB0aGUgZGVzaXJlZCBcbiAgICAgaG9zdCdzIG1hc3RlciBpbnRlcmZhY2UgbmFtZSBvbmUgYnkgb25lLCB1c2VyIGNhbiBkZWZpbmUgYSBwb2xpY3kgb24gYXR0YWNoaW5nIG11bHRpcGxlIHNlY29uZGFyeSBuZXR3b3JrIFxuICAgICBpbnRlcmZhY2VzIHN1Y2ggYXMgc3BlY2lmeWluZyBvbmx5IHRoZSBudW1iZXIgb2YgZGVzaXJlZCBpbnRlcmZhY2VzLCBmaWx0ZXJpbmcgb25seSBoaWdoc3BlZWQgTklDcy5cblxuIyMgSW5zdHJ1Y3Rpb25zXG5cblBsZWFzZSBjaGVjayB0aGUgW1VzZXIgR3VpZGVdKGh0dHBzOi8vZm91bmRhdGlvbi1tb2RlbC1zdGFjay5naXRodWIuaW8vbXVsdGktbmljLWNuaS91c2VyX2d1aWRlLykiLCJkaXNwbGF5TmFtZSI6Im11bHRpLW5pYy1jbmktb3BlcmF0b3IiLCJpY29uIjpbeyJiYXNlNjRkYXRhIjoiaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUYwQUFBQlNDQVlBQUFBMko5Z1dBQUFBQVhOU1IwSUFyczRjNlFBQUFJUmxXRWxtVFUwQUtnQUFBQWdBQlFFU0FBTUFBQUFCQUFFQUFBRWFBQVVBQUFBQkFBQUFTZ0ViQUFVQUFBQUJBQUFBVWdFb0FBTUFBQUFCQUFJQUFJZHBBQVFBQUFBQkFBQUFXZ0FBQUFBQUFBQklBQUFBQVFBQUFFZ0FBQUFCQUFPZ0FRQURBQUFBQVFBQkFBQ2dBZ0FFQUFBQUFRQUFBRjJnQXdBRUFBQUFBUUFBQUZJQUFBQUFxcVRSUGdBQUFBbHdTRmx6QUFBTEV3QUFDeE1CQUpxY0dBQUFFaTVKUkVGVWVBSHRuQXU4VkZXOXg5ZmFlK2JNU3lPRjFKdXBnRWdwbU0rUFlYM3lnV2FKMWYya21aV1B5RThrcWZlV2hTU1lHUi9mbVpwSlZ6T1ZoMW40b3JxSXJ5dWdRbVRtSTgxVVRMeUtVQVNDR0p6Wk0yZG05dXI3M3pQN3NHZk9nOW5EM2dmeU0rdkRacSs5OW5yODEyLy8xLysxMWh5bDJxbU5RQnVCTmdKdEJOb0l0QkZvSTlCR29JMUFHNEUyQW0wRUJnU0JURGFibnBiSnBsL2xLbVJ5NlZmUzJmUkZqSndha05HM3cwRjB6RFJsTXRuTVFxM1ZtTVp4akRLUE81MkY0eWd2TnI0YndHZWR6cVZQQTRUeHlxaGhqUHMzWmN5ZGpsTzhpWHhwQU9tSWJpamg4R3d1WStEd045THA5Rmg2VHFkeXFlUDRFS3VrbkFsUGlXNjAwRDNwVENZOVcraG92RmlOQytndHRwVVlLNmNEOW5LdDlYQzNZbzRwRkFvTGZWaFMyZFFKdHJidU0wYXQxTXJNOXN2RDNjMktmTDc0czNCdE50Zm1nNCszbEo3Qml0dW9qWnJrdXVvUmFEMlVWWG05MG1vM09INWFQbC80d2VZVzBlWGlCcjNBUkZMNVRpY0x5VTZBN0ozZ3J2V0I1NWF5bGJMN29XS3h1Q3lWU24zUXR0V3hmTVNtNTZNdFBWRXBQY28xNW11RmZPRldud0JXNURHV3JSOHh4cnpwNUF0Nyt1VlIzaE5SZHRhakw2MVdVTFlQSXVXSVltZnhJZjk5TnR0eHBPU1oyQnRHcVp2OThtYnZsdGJmcE80dXRPK1FOb0IwcTlMNlkzQnA2S1NOZmpqWVNGWWtLN1FDcyt4QnVlQlREcjZQSWg4cjZIRGViSUM0eERiV2pHdzJkUmJpWUdrbTAzR0UwcllvS2xEWE54UWM1NXF3RThubTBsK0dTM2Z4MjJtbGMxNTN5dHhGbjJ2OThpM2MveFBhUHFCMTVXRHF2ZW5YVGVhU0g2WS9tK2UzdUNJSDNCK25wVHRMK2hNb3hOK0lDY2o5U2N6QTc5SFJEZzJkcFhpL3FGRlJlYy9adEhCK3NxRitVNCtBL29MMDBkSFJzYjgweUdZeno4cHpNcHNVQUp0S21WeG1rclNCOXBXSWxDT2trZlRuOTAzNTlLWTZHcWhLQUR6VkE2Nkg1ay8vQlJxR05ORFJ3UVFuVS84NXJyY0VvRXdtODIzcXRMektmR0MyQm5UR1R5RkdGdnZ6SU4vVm5jK2xYK2I5emczejJIYVBtVXh5akJBSGtXWEF2MWlVR0RMN1UzRDB5MTU1THYycnVLbUxDSFFoVXh5M3kyQ0V2OVVBWHdlSC81VHlXQUVQelcxYTIyZDZvR3B6ZmFHek9NM0xGOVV5bHVnNFpSbmhrTThqdjVkd2Q3MTNFZjFYVWVyMVlyNzRRRVRkK2QwNG1JVVg4aUNYS09VdS8wWHd6dHlHS1V1ZGdRN1lCMTJ5aHBuZDZ6ak83NEoxd3VSRGcyNjBHaTVHZ2x0V0R3WUhRdXUvQmdmK0ZhTDI0NHBjSG9wbVF5enR5V1M3bFY1dy9Banl2UU9lUzUrT0hYOEwxb3huS1hualdPbzhWdmxObUpwbjg0d0JGaTZGQnAzdVY4c1FWc0k2Q0FmKy93TEQ3WVMxc3BjWWdueVVuOFBta1hFNkp1S1hHR2RRcFZMeHJKVEFtTEZtUlRFRCtHMEFuc0NKdWd0MDc5T3VHb1UzOEMxb21wakpwSllSTXZoeFdDSkNnNjROWnBuV3A0THRSWmgvZjNXY3J0OWtNdXI5MmtyUGhNTnpFTGN3MzFrNEt5d2gvZFZIWDR6RmpCdlVYNTNHZDlDMGUxa25kMjBzRC9PY1VJbnZJVklTTU5PTk9FckMxVjVpM2s5aFZkNnR0UFVkQ3VJSEhWdjdmd0hoRHI3K3FRdzhGNFZhWkdDV0h1UXB0ZDR0bTI3aVBBcTN6WCs3S3AxZW5zUWJqbUo0cmNyZEhxdjBCNlBkZytKOVIreDhIZ2R6clpQeVpsT2ZuQzVXaVdXcDQ0M1dnN1J4LzhKQTgraFVBRlpFQjg5QXZqNmp0RGtYOElmaEdUcXk5RXpGWElCYi9scXpnOGRWRDFQeWZkQ1ZncTRDSytTbGxzZlJabStZNlQwVlpYVTdZclcrZHFUdkRIa1JvY0h3UmxORDlRYTZ6dVJTVitQWm5RZmhsckN2T0dodzlQK1hkZVZ6cGM3U2M1UzRLTFJydWN1VjVwS1BFVnFoMENiV0JDZStSdHluYVllcGtSaHgrQURnRWx2ckg2cXMrcFBLcTc5VFJ4eStHL21ZSFlqU1Izbk9ON2JiMG5NUDBIRmt6Z2ZvNzlCaEJiazlpdzVXb0RnK3p3ZllOMmtTRDVaVUNldEV2UjNvdUJESXY2dXlXQ2MvZ2RtK3d0eEhaMVQ2RlpWVHo4Q01JOERuL2RWVlZKblV5b1FiUVUvUzRSU3ZJK04rSWU5MHphMTFlaGxPdzZOd3poaSsvbjlCelBXdERCYWlqWmh2b1pkdGlQNmJyZnBQclFwSEtwTVdrL0Y0R2hFM2txYm1KY0Nma0hkS1R6ZmJVYkJlSGVqSXdnL3g4cjF3K1N2SWNCOXdxVjlFZUZ6SGdIZGlLc25HeExSZ0oxSG40U0pJMEY5Q2hOMFpkZDk5OVljT0cybFoxdnNjN2J4V0V5TmUxWHllM1NSVkdJYzE5QUZqMGlOYzExM1QxZFgxWWwvOU5GTmVCem9OY1B4SXh2UE92S3ovSHpoMElNY2tIRnVDNDJQalF1Qk93VlZZSGViRGpCMDc2QkxXMEZiaVpzYnlnbWZzWnhtVjFmY0IvdGRWWjlVbkVRd2NSNjBFZks2dFQzV2c4d1ZmVGlReXE1bjBVRno1Y3pBUEpRNGhhU2ZMVmxPOW5ER1RLUCtKbDQvaFAxRmVyT0JMWXVpNlI1YzRQd2NwWlMva2hWZ2kvNENobG5NL0VLYjZEREw4TVVjVkR1VjVJMWVreVdyb2pWMHJJM0VJTEJack9scDZBUUdobVlnVHpDNjlMMFM5aWdkMlMwT2JmOXZIaExhdmhzRXl5TEk1V0RsRGNZQStwa3hoSkt2c1JWYjFTQmpnditPWVhCMm55d0FveWR0d2IzZkUxN2tjZ3NaV0ZRZGtHUFVINDZwVHFPS2JTSmJFb1MzTDdHZU05VGJ5OXhIZU5idUJJRU1OWkxMWWhKN0puRVJuYlU3R0hBTGdKY0NlU0tGbmhTRkdWcVd5NW56TXhQbXN1SEdVWDdhNVFUUzVIcUJMdDNDeldDZTM0KzRlYmJTRmMxVEJPU3I5d1I5U2xJNmRzTzdtR2JrTFQwQWRwcFhEbDdtUXR0ZjU5YmFiZTFidENnT2QzcE1lQ0srS2ozZUM3MXpscnJZSks5S21jVk1tV0szbGZLK2cxM3BiandWemJ5ODlENUtOVzhyM1FOeThpVWMwSHhrMURBSS9DWlhYc3N2K2RxR3pNTE9YZHR1c0NQa0JndDd3NjR4YkZ1NnRKcDJZQzhQc0RuT2RHTFRXaUxsOFZTcXdDcDZ2MVl6MDFoL292UTZFOHpRUit2ZUFvbWRZbGtkUnlWTTBvbmhGRDdEUks4dHhGdGQyNDZFQ2JKVVdvMHFzMkNlaHpVdVpqSFVOTkYvTGRRZTY2eHJpb3krd0ovQnA1bmNxREZYUnFoS0xQeElhZEtLTU9BaGlPbGF1Z1BKdXpTNldEZzdVRkk5ek9ENVhtMWRUTjFaSm5yTXhueVVtdjdpcEJoRlZrckFzWU8vSCtGK2p5d3VoblZRMWk0bFBuK1YwbHA2S2FLaTZia0tEN2xGVjdhSnEwOWQxUitqQWsvR0JnSC9kK3o0Zk9wajRZYnlOQlhTTUFMcnZkV3pEenRFRURJSmZFR1U2aVFEZUxzVFBYNFVCWmhLNGU5VnZJWHV4ZHRJK2szY2pXTUJyaVkvY3l5N1dmUDk5Mkh0bzBBbXJMVVdHSDgrU1BKL0JIdUR5dUJwWmZnWXFkVStlMTJCK0RlUGV5MGVodENFaHJuNElIckdZWnY1UXNqRDlmRzkzVnRoamxNdlZJeUUyeithYjNRQ05OYjJnbGEzMFZ6R241eEJ0UFkwR1RjMHoySEdqblI1ODEyc2VrL0pHWHZ3RDFqbWNnWi9Edkx3SzRPNkNDMlo2RFl3N2pidVlsUko1Yk9ZS1RiUTNUb2ovaE5ORFZPK3VTdmo2Y0FHY0FwRTVOeXZqZnBhdk53VjV2d2tHK3lLTU5ybTdjb2hNYUU2bjczVWxWZjVrd3RqM0F2eElaV2x2WUlncGMwVHQwa0srK0Q4aHhxZXFTOVBRM3o3VUVOMmNybFVIb21Sc3M0MjFOcE1RVEpaUjdqWDV6cUlmVVp6SFdjem40ZmI1bHRHeVFxL2s2bmNsTlk3WEN1aEtZdW9TNHVWNEhKc2M5cjVzY213d3JuNkFaZnFHUHdCeWNKU2R0QzZBbkk5UzVzSnFpeXNWY3dXeWtzM3JZS3FHN0lNbFVlZFpkaVpiN1hSbnpOMEZZZnN2Ry9lT1lCdmsrZjE0NlJ2Zy85MG9IOHdscDhHYVRpMkJYdXU5SzUvditpMTV1ZXFTbklPQkMzN05Fa3dIRnZZSTRqY253MmtuOEhFZTM5d2dmazVIMkswRzlSdFJsUFVlNldZaWVzMUJ2d1RCaGlUUlZTV2xuZzFVMmhrUkk1dmtJaG8zQmNxYnltNE42SDBOc0NQZTNPMkFUYmpPM0ZFcHVXSzMyM2JDbm9ZNE9oRko4a3VlUjNEVnpNcjRPWjJ4akpOM3p1WWVLcUdySnJOQ3I4SzMraEZlK0F1czB1VjBzQU9tOGEySXJDUnkvaUdlUTVuSFFrRGtvS044UGtPL1F5UldnL04wT3ZtcXZPdFNwM0F1NWxtQUh3M1JQMElweVFUa05kdHBMZW01YXZNWS8zYzZuZW1Ja2RPZ2VYOVc2WXVjQkhzSlV2ZGl5UGVLTXVXb3RpL25RMUVST2VoR202RXNTN0EwaTZBa3FHREtlSHlQd1NHanVjUjdiU0RVWlFWdmR5bVArWHNVVnRwMEtEdVphUjBnRk1KUVQ3QmYvSTFTVittRkdzVUUxRG8reDE3eTBaZzVIWmpWVDJMbGlSNXdhdS9yYnBHRERtR3llU3VZSGxvM1V2WGhFTGxCOUZ6cXJmRGY0K1VTcEN6V0tTdi8zWFp3WDQ4OS9tWG9PSnRqMUVNVGJtbXRSQ0lEZE8xTXNPOCtWc1BoMVRJdHR0Z0V5cWF5RXNiSkhrV2dycGVOSEhTQ1hmTVljQk5FSEVzNDlRckhLWWhNdHhBcGw4TGhZOGl2Ujc2TzU5NGRRaUQvNzVBMllMWDlxWEU1SW5KbXdVQ0hzNlpYRXpxNEZrc3VqNWs1a2ZtUEpoSTdqOU9SbzVoY1YzQ0NrWU5PNTI4eCtEbXc4d3hjNnd2NEFOK0ZBRTlvU3hBSldmNTE2Z3dJNEt5b0ZLYnI2T0NFbzh6ckJML1cwT3JUR0F3YjJkUDlDTXprcjk3YkVFbWl2ejZJamlPQzZjd0pqaHNINkFwdW40MXB1RXJaNW1JR0d3UFk0aE11Z2JDTENhRXVDUklRVTk3VEpVeDY3MFRTL25OTVl3UzYxUThDckErNGxEdk0rQmV3R3R1TzVrQ2VJd085QStkb25LdXRmUzFqTnJoVjUraDFHVkVTdHZnQ2JuTDVwa2xRcVVxVjJCSnlkSGtpa2I2ZmtmZUtiUkE2QnRnY0gzWW91Y0dONDFEdWxiSHE4YzNxVTB1Y2prSTVnREFBeWxBUFIya0FLL2FLWmNxRVNTOG5haWZjSFV3REJuWmcwQUowbkJCNGppc3JTblFsQUk4bERuTTZLL3gyR1VoT0dQQkZ6dkp3TVpXSEd3ZjNNR3NzM01MejRLUktQTVJBdzVGbHk0eHJjQjZNSEpVZ0hLRy83MjFtYktHRGQ5SHI5Y3g1bXN5SEVPUnNsT3JUZklURm1JNUx3RWMydkgvRnBza1RqZk1OemVuc2tJdG50eXRpZWluT3oxanlFa2xVZkduWnlKME55MytmeDVsY21LdmhFMXlRRE44cS9oYm9LQkZWY3Rob0xlSkw5SVMzZ25HZ3JpTFMya1hnYnhwQUh5dytDdGlVZURrZFU5TUxCalpTRnhwMFFKRUFGbDI3VjNQekFKZG5XVnA4WmN4Q3ZTZGUzQ1lwZXpja09lZk8yZnNaelBnVE1oK0xYd25ieWZRcjJHRVQvQmhTYlRQK0ppeVZRd0M4ZzNLSjA3emQxL3hEZzg3Z0Zla01KZEpMVysvM2wvS2w1V040bk5EWHdQMlZveUs2c0MyWDlsZG5nTjROSW1iM0dIUGVtK244a3drOXhhejJnYkVJYVp1SHM5bmt4L1A1MGg5cnRHREFPRXVhb2FzWDRQcHZoalorSERGeUFqLzRta3JOaDdnMlNndVdHR2ZWMWU1OGpGV0luVDBvYWhsMDZXOTdTSWpTYndJd2dLcy81eFYvc2FONnpBNnJMZjF6eXM4d3ltYTFsNDRLUzJ0bzBKRmhQME9Nbk1PZ0IrRmxjaExLM00rZ1ExRW94OG5neEY0dWxKdmtCenB4WW10T01wZm9OZDdSQ2kwb3dtSFNycUxjeVlGempZUzBDK2VDd1JkNWRRU1hoT3A3bUlXVTlabENnMDVQNzdCeGU2eHQ2N3ZoYkFKQVdqeE1FU2x5MkdocXdTbk82bk8wbUY3d2hWZXcrZzVFaWUwVDVSQ2lGQ1haeG0zY3BOZ0kwOG5IN2VDU2M1Q3hnNjVxdXo4SG85RS96ckU2empoYUc0aXh5QUdrUnVJb1VrT29ONnBpVlRhVzh0NnZPRHlkSUMraVNyamZwK0R1anpSSmhGK0VLV0VTRjhGWUp3SDdCTVRJVTM3WEtNd3ZrQjhFbzczSmZaMWZ2ajNjZDBEMnpXUVpWckJtcW4vSWhsOG1RL0RKWVlrampyRk0rZ0JZYitlbjhSZlRZZnRydGo1TzRJSFFYNUt4RWFYM1lCYVBsNThHVVZiMHlqS3BsazR4dENKZW1xSFpBcWg1aUo2akVEbGRjTVNUckZRNVQ0am1WM2NSZXo2WkdNdzl6WFFVWXgzTkNqeGEyL3BnNWJvRjltOFhZSCsvRkJ4UG9vcUpUT0lyeUhiNUxlbEppQnU0bnNYRVB3eUduMklxM2hDc3YwM3p3czAxN2w0RGQrNVhJMGJEK2JVL0w1VlpTVm5UM25EVW5DNjJONXo3UkkxR2J4WEN2UzcwM1F4ZFBad3pjWXprM0x5M2NvWFR4YzNmaWhRTHAzTjA0VlBDRHNaMXI0QjdYcXpSSjZlcGZzRGtaUHRyT0NMaWVVeWR4dkIwcjFOaHBld2wzQlZSU3VDaHo2ZS9BN0N4SkFZK2gwMlVRZlRONzJMMUJQWkZPN0hRemd1T2hiUHpCcytYQnN1MkpoOEw2RXdrSnhpeFBiZW1nVGdNRFMzS2RqaDMrYmwzVTZubVdoZjRnSFdLMmlSTWt1MEJzU0NhVHF4Q2pzK3BBL2lRSy9BbjVPZU9uaUtFbTJmZzhDemkrVnl1eTduV2NzV1M0Z0hkcU9lUjNhZmduNTRKMWIvazh1ejI2czlOT0loditJdEJSaDlaMXVXbWJXck8yYXltbnpyUWt6cnhOSFo1YThCb0xUL3Q2Ylk4NE9iRmlMRkgrY0RIY0pqb3NLMDVxN2dsZ2xxa3VQOXUyWlM5QlhuSjcxSDFXQ2F5Q01SbjBXSTNJbkdUdWR1Y0JMdUpQeU8xdFA5ZStuN0xDbnFVN3lnMmVaTnJwYTR2Zm1RaHA3YU1YVmRhZmZETFBDYnA1ZjMyWGNSeVBSTGcxd2VWbFpmUHNybFFkU2kyeVFUa0J3QkNCNHAwRmI3a2YvaEVWUDllWk5vVmM1Q3l3WDU1SFBkV09DVU1IVU5RVE9OUlZQdXpYN2VKbjVYY0grZXliWkl3MlNUL1BlTHZNT3F2Ui9ITWxiOS93UDFFVmdET3A3a1NSMjlLazMyMXE0VkFZQmZFM3NMZ0tvVER5ekRJZGZUaGk1Z1EzWVdyR2plbmg2Tm1nR3RqYngrR2VEL0UxYnBBVkdzUnl2VDFBU2FoUFZ3YmdUWUNiUVRhQ0xRUmFDUFFScUNOUUJ1Qk5nSnRCTm9JdEJGb0kvRHVSdUJmS2VWblM3VTVaeEFBQUFBQVNVVk9SSzVDWUlJPSIsIm1lZGlhdHlwZSI6ImltYWdlL3BuZyJ9XSwiaW5zdGFsbCI6eyJzcGVjIjp7ImNsdXN0ZXJQZXJtaXNzaW9ucyI6W3sicnVsZXMiOlt7ImFwaUdyb3VwcyI6WyJtdWx0aW5pYy5mbXMuaW8iXSwicmVzb3VyY2VzIjpbImNpZHJzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsiY2lkcnMvZmluYWxpemVycyJdLCJ2ZXJicyI6WyJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJjaWRycy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJjb25maWdzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsiY29uZmlncy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJob3N0aW50ZXJmYWNlcyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0IiwicGF0Y2giLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJtdWx0aW5pYy5mbXMuaW8iXSwicmVzb3VyY2VzIjpbImhvc3RpbnRlcmZhY2VzL2ZpbmFsaXplcnMiXSwidmVyYnMiOlsidXBkYXRlIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsiaG9zdGludGVyZmFjZXMvc3RhdHVzIl0sInZlcmJzIjpbImdldCIsInBhdGNoIiwidXBkYXRlIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsiaXBwb29scyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0IiwicGF0Y2giLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJtdWx0aW5pYy5mbXMuaW8iXSwicmVzb3VyY2VzIjpbImlwcG9vbHMvZmluYWxpemVycyJdLCJ2ZXJicyI6WyJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJpcHBvb2xzL3N0YXR1cyJdLCJ2ZXJicyI6WyJnZXQiLCJwYXRjaCIsInVwZGF0ZSJdfSx7ImFwaUdyb3VwcyI6WyJtdWx0aW5pYy5mbXMuaW8iXSwicmVzb3VyY2VzIjpbIm11bHRpbmljbmV0d29ya3MiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsibXVsdGluaWMuZm1zLmlvIl0sInJlc291cmNlcyI6WyJtdWx0aW5pY25ldHdvcmtzL2ZpbmFsaXplcnMiXSwidmVyYnMiOlsidXBkYXRlIl19LHsiYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsibXVsdGluaWNuZXR3b3Jrcy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0IiwicGF0Y2giLCJ1cGRhdGUiXX0seyJhcGlHcm91cHMiOlsibWVsbGFub3guY29tIl0sInJlc291cmNlcyI6WyJob3N0ZGV2aWNlbmV0d29ya3MiLCJuaWNjbHVzdGVycG9saWNpZXMiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbIiJdLCJyZXNvdXJjZXMiOlsicG9kcyIsIm5vZGVzIiwibmFtZXNwYWNlcyJdLCJ2ZXJicyI6WyJnZXQiLCJ3YXRjaCIsImxpc3QiLCJwYXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJhcHBzIl0sInJlc291cmNlcyI6WyJkYWVtb25zZXRzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbIms4cy5jbmkuY25jZi5pbyJdLCJyZXNvdXJjZXMiOlsibmV0d29yay1hdHRhY2htZW50LWRlZmluaXRpb25zIl0sInZlcmJzIjpbImNyZWF0ZSIsInVwZGF0ZSIsImdldCIsIndhdGNoIiwibGlzdCIsImRlbGV0ZSJdfSx7ImFwaUdyb3VwcyI6WyJzZWN1cml0eS5vcGVuc2hpZnQuaW8iXSwicmVzb3VyY2VOYW1lcyI6WyJwcml2aWxlZ2VkIl0sInJlc291cmNlcyI6WyJzZWN1cml0eWNvbnRleHRjb25zdHJhaW50cyJdLCJ2ZXJicyI6WyJ1c2UiXX0seyJhcGlHcm91cHMiOlsiYXV0aGVudGljYXRpb24uazhzLmlvIl0sInJlc291cmNlcyI6WyJ0b2tlbnJldmlld3MiXSwidmVyYnMiOlsiY3JlYXRlIl19LHsiYXBpR3JvdXBzIjpbImF1dGhvcml6YXRpb24uazhzLmlvIl0sInJlc291cmNlcyI6WyJzdWJqZWN0YWNjZXNzcmV2aWV3cyJdLCJ2ZXJicyI6WyJjcmVhdGUiXX0seyJhcGlHcm91cHMiOlsic3Jpb3ZuZXR3b3JrLm9wZW5zaGlmdC5pbyJdLCJyZXNvdXJjZXMiOlsic3Jpb3ZuZXR3b3Jrbm9kZXN0YXRlcyJdLCJ2ZXJicyI6WyJnZXQiLCJsaXN0Iiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsic3Jpb3ZuZXR3b3JrLm9wZW5zaGlmdC5pbyJdLCJyZXNvdXJjZXMiOlsic3Jpb3ZuZXR3b3Jrbm9kZXBvbGljaWVzIiwic3Jpb3ZpYm5ldHdvcmtzIiwic3Jpb3ZuZXR3b3JrcyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0Iiwid2F0Y2giXX1dLCJzZXJ2aWNlQWNjb3VudE5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlciJ9XSwiZGVwbG95bWVudHMiOlt7ImxhYmVsIjp7ImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifSwibmFtZSI6Im11bHRpLW5pYy1jbmktb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyIiwic3BlYyI6eyJyZXBsaWNhcyI6MSwic2VsZWN0b3IiOnsibWF0Y2hMYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RyYXRlZ3kiOnt9LCJ0ZW1wbGF0ZSI6eyJtZXRhZGF0YSI6eyJhbm5vdGF0aW9ucyI6eyJrdWJlY3RsLmt1YmVybmV0ZXMuaW8vZGVmYXVsdC1jb250YWluZXIiOiJtYW5hZ2VyIn0sImxhYmVscyI6eyJjb250cm9sLXBsYW5lIjoiY29udHJvbGxlci1tYW5hZ2VyIn19LCJzcGVjIjp7ImNvbnRhaW5lcnMiOlt7ImFyZ3MiOlsiLS1zZWN1cmUtbGlzdGVuLWFkZHJlc3M9MC4wLjAuMDo4NDQzIiwiLS11cHN0cmVhbT1odHRwOi8vMTI3LjAuMC4xOjgwODAvIiwiLS1sb2d0b3N0ZGVycj10cnVlIiwiLS12PTEwIl0sImltYWdlIjoiZ2NyLmlvL2t1YmVidWlsZGVyL2t1YmUtcmJhYy1wcm94eTp2MC44LjAiLCJuYW1lIjoia3ViZS1yYmFjLXByb3h5IiwicG9ydHMiOlt7ImNvbnRhaW5lclBvcnQiOjg0NDMsIm5hbWUiOiJodHRwcyJ9XSwicmVzb3VyY2VzIjp7fX0seyJhcmdzIjpbIi0temFwLWxvZy1sZXZlbD00IiwiLS16YXAtdGltZS1lbmNvZGluZz1pc284NjAxIiwiLS1oZWFsdGgtcHJvYmUtYmluZC1hZGRyZXNzPTo4MDgzIiwiLS1tZXRyaWNzLWJpbmQtYWRkcmVzcz0xMjcuMC4wLjE6ODA4MCIsIi0tbGVhZGVyLWVsZWN0Il0sImNvbW1hbmQiOlsiL21hbmFnZXIiXSwiZW52IjpbeyJuYW1lIjoiT1BFUkFUT1JfTkFNRVNQQUNFIiwidmFsdWVGcm9tIjp7ImZpZWxkUmVmIjp7ImZpZWxkUGF0aCI6Im1ldGFkYXRhLm5hbWVzcGFjZSJ9fX0seyJuYW1lIjoiUE9EX05BTUUiLCJ2YWx1ZUZyb20iOnsiZmllbGRSZWYiOnsiZmllbGRQYXRoIjoibWV0YWRhdGEubmFtZSJ9fX1dLCJpbWFnZSI6ImdoY3IuaW8vZm91bmRhdGlvbi1tb2RlbC1zdGFjay9tdWx0aS1uaWMtY25pLWNvbnRyb2xsZXI6djEuMi40IiwibGl2ZW5lc3NQcm9iZSI6eyJodHRwR2V0Ijp7InBhdGgiOiIvaGVhbHRoeiIsInBvcnQiOjgwODN9LCJpbml0aWFsRGVsYXlTZWNvbmRzIjoxNSwicGVyaW9kU2Vjb25kcyI6MjB9LCJuYW1lIjoibWFuYWdlciIsInJlYWRpbmVzc1Byb2JlIjp7Imh0dHBHZXQiOnsicGF0aCI6Ii9yZWFkeXoiLCJwb3J0Ijo4MDgzfSwiaW5pdGlhbERlbGF5U2Vjb25kcyI6NSwicGVyaW9kU2Vjb25kcyI6MTB9LCJyZXNvdXJjZXMiOnsibGltaXRzIjp7ImNwdSI6IjEwMG0iLCJtZW1vcnkiOiI1MDBNaSJ9LCJyZXF1ZXN0cyI6eyJjcHUiOiIxMDBtIiwibWVtb3J5IjoiNTAwTWkifX0sInNlY3VyaXR5Q29udGV4dCI6eyJhbGxvd1ByaXZpbGVnZUVzY2FsYXRpb24iOmZhbHNlfX1dLCJob3N0TmV0d29yayI6dHJ1ZSwicHJpb3JpdHlDbGFzc05hbWUiOiJzeXN0ZW0tY2x1c3Rlci1jcml0aWNhbCIsInNlY3VyaXR5Q29udGV4dCI6eyJydW5Bc05vblJvb3QiOnRydWV9LCJzZXJ2aWNlQWNjb3VudE5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlciIsInRlcm1pbmF0aW9uR3JhY2VQZXJpb2RTZWNvbmRzIjoxMH19fX1dLCJwZXJtaXNzaW9ucyI6W3sicnVsZXMiOlt7ImFwaUdyb3VwcyI6WyIiLCJjb29yZGluYXRpb24uazhzLmlvIl0sInJlc291cmNlcyI6WyJjb25maWdtYXBzIiwibGVhc2VzIl0sInZlcmJzIjpbImdldCIsImxpc3QiLCJ3YXRjaCIsImNyZWF0ZSIsInVwZGF0ZSIsInBhdGNoIiwiZGVsZXRlIl19LHsiYXBpR3JvdXBzIjpbIiJdLCJyZXNvdXJjZXMiOlsiZXZlbnRzIl0sInZlcmJzIjpbImNyZWF0ZSIsInBhdGNoIl19XSwic2VydmljZUFjY291bnROYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIifV19LCJzdHJhdGVneSI6ImRlcGxveW1lbnQifSwiaW5zdGFsbE1vZGVzIjpbeyJzdXBwb3J0ZWQiOnRydWUsInR5cGUiOiJPd25OYW1lc3BhY2UifSx7InN1cHBvcnRlZCI6dHJ1ZSwidHlwZSI6IlNpbmdsZU5hbWVzcGFjZSJ9LHsic3VwcG9ydGVkIjpmYWxzZSwidHlwZSI6Ik11bHRpTmFtZXNwYWNlIn0seyJzdXBwb3J0ZWQiOnRydWUsInR5cGUiOiJBbGxOYW1lc3BhY2VzIn1dLCJrZXl3b3JkcyI6WyJtdWx0aS1uaWMiLCJjbmkiLCJuZXR3b3JrIl0sImxpbmtzIjpbeyJuYW1lIjoiTXVsdGktTklDIENOSSBPcGVyYXRvciIsInVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9mb3VuZGF0aW9uLW1vZGVsLXN0YWNrL211bHRpLW5pYy1jbmkifV0sIm1haW50YWluZXJzIjpbeyJlbWFpbCI6InN1bnlhbmFuLmNob29jaG90a2FldzFAaWJtLmNvbSIsIm5hbWUiOiJTdW55YW5hbiBDaG9vY2hvdGthZXcifSx7ImVtYWlsIjoiY2hpYmFAanAuaWJtLmNvbSIsIm5hbWUiOiJUYXRzdWhpcm8gQ2hpYmEifV0sIm1hdHVyaXR5IjoiYWxwaGEiLCJwcm92aWRlciI6eyJuYW1lIjoiRm91bmRhdGlvbiBNb2RlbCBTdGFjayJ9LCJ2ZXJzaW9uIjoiMS4yLjQifX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9tZXRyaWNzIl0sInZlcmJzIjpbImdldCJdfV19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlIn0sInNwZWMiOnsicG9ydHMiOlt7Im5hbWUiOiJodHRwcyIsInBvcnQiOjg0NDMsInRhcmdldFBvcnQiOiJodHRwcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.2.4
  name: ""
- image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator@sha256:ab62ca14df6dc776ebef248585bada4e7ed86c9ad22345880cf4a8b2a681a033
  name: ""
schema: olm.bundle
---
image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator@sha256:937ea51b1cb4924d363dc6592fc285862bb9479dbc259bea2d59b83c1a7f8250
name: multi-nic-cni-operator.v1.2.5
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.2.5
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibGlzdEtpbmQiOiJNdWx0aU5pY05ldHdvcmtMaXN0IiwicGx1cmFsIjoibXVsdGluaWNuZXR3b3JrcyIsInNpbmd1bGFyIjoibXVsdGluaWNuZXR3b3JrIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIE11bHRpTmljTmV0d29yayBNYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbCBTdWJuZXQgaXMgZ2xvYmFsIHN1Ym5ldCwgZGVmYXVsdDogMTcyLjMwLjAuMC8xNiBJUEFNIGlzIGlwYW0gc3BlY2lmaWNhdGlvbiBNYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uIFBvbGljeSBpcyBnZW5lcmFsIHBvbGljeSBvZiB0aGUgcG9vbCIsInByb3BlcnRpZXMiOnsiYXR0YWNoUG9saWN5Ijp7ImRlc2NyaXB0aW9uIjoiQXNzaWdubWVudFBvbGljeSBkZWZpbmVzIHRoZSBwb2xpY3kgdG8gc2VsZWN0IHRoZSBOSUNzIGZyb20gdGhlIHBvb2wgU3RyYXRlZ3kgaXMgb25lIG9mIE5vbmUsIENvc3RPcHQsIFBlcmZPcHQsIFFvU0NsYXNzIFRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHMgcmVxdWlyZWQgZm9yIENvc3RPcHQgYW5kIFBlcmZPcHQiLCJwcm9wZXJ0aWVzIjp7InN0cmF0ZWd5Ijp7InR5cGUiOiJzdHJpbmcifSwidGFyZ2V0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0cmF0ZWd5Il0sInR5cGUiOiJvYmplY3QifSwiaXBhbSI6eyJ0eXBlIjoic3RyaW5nIn0sIm1hc3Rlck5ldHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwibXVsdGlOSUNJUEFNIjp7InR5cGUiOiJib29sZWFuIn0sIm5hbWVzcGFjZXMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwicGx1Z2luIjp7ImRlc2NyaXB0aW9uIjoicmVmZXJlbmNlOiBnaXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvY25pL3BrZy90eXBlcyIsInByb3BlcnRpZXMiOnsiYXJncyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJvYmplY3QifSwiY2FwYWJpbGl0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJib29sZWFuIn0sInR5cGUiOiJvYmplY3QifSwiY25pVmVyc2lvbiI6eyJ0eXBlIjoic3RyaW5nIn0sImRucyI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImRvbWFpbiI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWVzZXJ2ZXJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm9wdGlvbnMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwic2VhcmNoIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY25pVmVyc2lvbiIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaXBhbSIsInBsdWdpbiJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29ya1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBNdWx0aU5pY05ldHdvcmsiLCJwcm9wZXJ0aWVzIjp7ImNvbXB1dGVSZXN1bHRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sIm51bU9mSG9zdHMiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbIm5ldEFkZHJlc3MiLCJudW1PZkhvc3RzIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZ1N0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn0sImRpc2NvdmVyeSI6eyJwcm9wZXJ0aWVzIjp7ImNpZHJQcm9jZXNzZWQiOnsidHlwZSI6ImludGVnZXIifSwiZXhpc3REYWVtb24iOnsidHlwZSI6ImludGVnZXIifSwiaW5mb0F2YWlsYWJsZSI6eyJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsiY2lkclByb2Nlc3NlZCIsImV4aXN0RGFlbW9uIiwiaW5mb0F2YWlsYWJsZSJdLCJ0eXBlIjoib2JqZWN0In0sImxhc3RTeW5jVGltZSI6eyJmb3JtYXQiOiJkYXRlLXRpbWUiLCJ0eXBlIjoic3RyaW5nIn0sIm1lc3NhZ2UiOnsidHlwZSI6InN0cmluZyJ9LCJyb3V0ZVN0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJjb21wdXRlUmVzdWx0cyIsImNvbmZpZ1N0YXR1cyIsImRpc2NvdmVyeSIsImxhc3RTeW5jVGltZSIsIm1lc3NhZ2UiLCJyb3V0ZVN0YXR1cyJdLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNpZHJzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkNJRFIiLCJsaXN0S2luZCI6IkNJRFJMaXN0IiwicGx1cmFsIjoiY2lkcnMiLCJzaW5ndWxhciI6ImNpZHIifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQ0lEUiIsInByb3BlcnRpZXMiOnsiY2lkciI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Imhvc3RzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaG9zdEluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImlwcG9vbCI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdElQIiwiaG9zdEluZGV4IiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwicG9kQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbnRlcmZhY2VJbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuZXRBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbkNJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdHMiLCJpbnRlcmZhY2VJbmRleCIsIm5ldEFkZHJlc3MiLCJ2bGFuQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWciOnsiZGVzY3JpcHRpb24iOiJJTlNFUlQgQURESVRJT05BTCBTUEVDIEZJRUxEUyAtIGRlc2lyZWQgc3RhdGUgb2YgY2x1c3RlciBJbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImRldmljZWNsYXNzZXMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiRGV2aWNlQ2xhc3MiLCJsaXN0S2luZCI6IkRldmljZUNsYXNzTGlzdCIsInBsdXJhbCI6ImRldmljZWNsYXNzZXMiLCJzaW5ndWxhciI6ImRldmljZWNsYXNzIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiRGV2aWNlQ2xhc3MgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGRldmljZWNsYXNzZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1NwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInByb3BlcnRpZXMiOnsiaWRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsicHJvZHVjdHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInByb2R1Y3RzIiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpZHMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Imhvc3RpbnRlcmZhY2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJsaXN0S2luZCI6Ikhvc3RJbnRlcmZhY2VMaXN0IiwicGx1cmFsIjoiaG9zdGludGVyZmFjZXMiLCJzaW5ndWxhciI6Imhvc3RpbnRlcmZhY2UifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwY2lBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwicHJvZHVjdCI6eyJ0eXBlIjoic3RyaW5nIn0sInZlbmRvciI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJpbnRlcmZhY2VOYW1lIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJob3N0TmFtZSIsImludGVyZmFjZXMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIEhvc3RJbnRlcmZhY2UiLCJwcm9wZXJ0aWVzIjp7InN0YXQiOnsicHJvcGVydGllcyI6eyJjb3VudCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibGFzdFJ4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RSeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFRpbWVzdGFtcCI6eyJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VHhEcm9wIjp7InR5cGUiOiJpbnRlZ2VyIn0sInJ4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwicnhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn0sInR4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJjb3VudCIsImludGVyZmFjZU5hbWUiLCJsYXN0UngiLCJsYXN0UnhEcm9wIiwibGFzdFRpbWVzdGFtcCIsImxhc3RUeCIsImxhc3RUeERyb3AiLCJyeERyb3BSYXRlIiwicnhSYXRlIiwidHhEcm9wUmF0ZSIsInR4UmF0ZSJdLCJ0eXBlIjoib2JqZWN0In19LCJyZXF1aXJlZCI6WyJzdGF0Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImlwcG9vbHMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiSVBQb29sIiwibGlzdEtpbmQiOiJJUFBvb2xMaXN0IiwicGx1cmFsIjoiaXBwb29scyIsInNpbmd1bGFyIjoiaXBwb29sIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBpcHBvb2xzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIElQUG9vbCIsInByb3BlcnRpZXMiOnsiYWxsb2NhdGlvbnMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJhZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwiaW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwibmFtZXNwYWNlIjp7InR5cGUiOiJzdHJpbmcifSwicG9kIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFkZHJlc3MiLCJpbmRleCIsIm5hbWVzcGFjZSIsInBvZCJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJleGNsdWRlcyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJuZXRBdHRhY2hEZWYiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RDSURSIjp7ImRlc2NyaXB0aW9uIjoiRm9vIGlzIGFuIGV4YW1wbGUgZmllbGQgb2YgSVBQb29sLiBFZGl0IGlwcG9vbF90eXBlcy5nbyB0byByZW1vdmUvdXBkYXRlIiwidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJhbGxvY2F0aW9ucyIsImV4Y2x1ZGVzIiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwibmV0QXR0YWNoRGVmIiwicG9kQ0lEUiIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIElQUG9vbCIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9tZXRyaWNzIl0sInZlcmJzIjpbImdldCJdfV19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlIn0sInNwZWMiOnsicG9ydHMiOlt7Im5hbWUiOiJodHRwcyIsInBvcnQiOjg0NDMsInRhcmdldFBvcnQiOiJodHRwcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.2.5
  name: ""
- image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator@sha256:937ea51b1cb4924d363dc6592fc285862bb9479dbc259bea2d59b83c1a7f8250
  name: ""
schema: olm.bundle
---
image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator:1.2.6
name: multi-nic-cni-operator.v1.2.6
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.2.6
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjUifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJjaWRycy5tdWx0aW5pYy5mbXMuaW8ifSwic3BlYyI6eyJncm91cCI6Im11bHRpbmljLmZtcy5pbyIsIm5hbWVzIjp7ImtpbmQiOiJDSURSIiwibGlzdEtpbmQiOiJDSURSTGlzdCIsInBsdXJhbCI6ImNpZHJzIiwic2luZ3VsYXIiOiJjaWRyIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiQ0lEUiBpcyB0aGUgU2NoZW1hIGZvciB0aGUgY2lkcnMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LlxuU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kXG5tYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuXG5TZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by5cbkNhbm5vdCBiZSB1cGRhdGVkLlxuSW4gQ2FtZWxDYXNlLlxuTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiQ0lEUlNwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBDSURSIiwicHJvcGVydGllcyI6eyJjaWRyIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdHMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJob3N0SVAiOnsidHlwZSI6InN0cmluZyJ9LCJob3N0SW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaXBwb29sIjp7InR5cGUiOiJzdHJpbmcifSwicG9kQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0SVAiLCJob3N0SW5kZXgiLCJob3N0TmFtZSIsImludGVyZmFjZU5hbWUiLCJwb2RDSURSIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImludGVyZmFjZUluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0cyIsImludGVyZmFjZUluZGV4IiwibmV0QWRkcmVzcyIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZyI6eyJkZXNjcmlwdGlvbiI6IklOU0VSVCBBRERJVElPTkFMIFNQRUMgRklFTERTIC0gZGVzaXJlZCBzdGF0ZSBvZiBjbHVzdGVyXG5JbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOm51bGwsInN0b3JlZFZlcnNpb25zIjpudWxsfX0=
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjUifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJkZXZpY2VjbGFzc2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkRldmljZUNsYXNzIiwibGlzdEtpbmQiOiJEZXZpY2VDbGFzc0xpc3QiLCJwbHVyYWwiOiJkZXZpY2VjbGFzc2VzIiwic2luZ3VsYXIiOiJkZXZpY2VjbGFzcyJ9LCJzY29wZSI6IkNsdXN0ZXIiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxIiwic2NoZW1hIjp7Im9wZW5BUElWM1NjaGVtYSI6eyJkZXNjcmlwdGlvbiI6IkRldmljZUNsYXNzIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBkZXZpY2VjbGFzc2VzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC5cblNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZFxubWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLlxuTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLlxuU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uXG5DYW5ub3QgYmUgdXBkYXRlZC5cbkluIENhbWVsQ2FzZS5cbk1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkRldmljZUNsYXNzU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIERldmljZUNsYXNzIiwicHJvcGVydGllcyI6eyJpZHMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJwcm9kdWN0cyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJ2ZW5kb3IiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsicHJvZHVjdHMiLCJ2ZW5kb3IiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifX0sInJlcXVpcmVkIjpbImlkcyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkRldmljZUNsYXNzU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIERldmljZUNsYXNzIiwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjUifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJob3N0aW50ZXJmYWNlcy5tdWx0aW5pYy5mbXMuaW8ifSwic3BlYyI6eyJncm91cCI6Im11bHRpbmljLmZtcy5pbyIsIm5hbWVzIjp7ImtpbmQiOiJIb3N0SW50ZXJmYWNlIiwibGlzdEtpbmQiOiJIb3N0SW50ZXJmYWNlTGlzdCIsInBsdXJhbCI6Imhvc3RpbnRlcmZhY2VzIiwic2luZ3VsYXIiOiJob3N0aW50ZXJmYWNlIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSG9zdEludGVyZmFjZSBpcyB0aGUgU2NoZW1hIGZvciB0aGUgaG9zdGludGVyZmFjZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LlxuU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kXG5tYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuXG5TZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by5cbkNhbm5vdCBiZSB1cGRhdGVkLlxuSW4gQ2FtZWxDYXNlLlxuTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSG9zdEludGVyZmFjZVNwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBIb3N0SW50ZXJmYWNlIiwicHJvcGVydGllcyI6eyJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZXMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJob3N0SVAiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sInBjaUFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwcm9kdWN0Ijp7InR5cGUiOiJzdHJpbmcifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImludGVyZmFjZU5hbWUiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifX0sInJlcXVpcmVkIjpbImhvc3ROYW1lIiwiaW50ZXJmYWNlcyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsic3RhdCI6eyJwcm9wZXJ0aWVzIjp7ImNvdW50Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJsYXN0UngiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFJ4RHJvcCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VGltZXN0YW1wIjp7ImZvcm1hdCI6ImludDY0IiwidHlwZSI6ImludGVnZXIifSwibGFzdFR4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwicnhEcm9wUmF0ZSI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJyeFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhEcm9wUmF0ZSI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJ0eFJhdGUiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbImNvdW50IiwiaW50ZXJmYWNlTmFtZSIsImxhc3RSeCIsImxhc3RSeERyb3AiLCJsYXN0VGltZXN0YW1wIiwibGFzdFR4IiwibGFzdFR4RHJvcCIsInJ4RHJvcFJhdGUiLCJyeFJhdGUiLCJ0eERyb3BSYXRlIiwidHhSYXRlIl0sInR5cGUiOiJvYmplY3QifX0sInJlcXVpcmVkIjpbInN0YXQiXSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjUifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJpcHBvb2xzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IklQUG9vbCIsImxpc3RLaW5kIjoiSVBQb29sTGlzdCIsInBsdXJhbCI6ImlwcG9vbHMiLCJzaW5ndWxhciI6ImlwcG9vbCJ9LCJzY29wZSI6IkNsdXN0ZXIiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxIiwic2NoZW1hIjp7Im9wZW5BUElWM1NjaGVtYSI6eyJkZXNjcmlwdGlvbiI6IklQUG9vbCBpcyB0aGUgU2NoZW1hIGZvciB0aGUgaXBwb29scyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuXG5TZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmRcbm1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy5cbk1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy5cblNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLlxuQ2Fubm90IGJlIHVwZGF0ZWQuXG5JbiBDYW1lbENhc2UuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJJUFBvb2xTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSVBQb29sIiwicHJvcGVydGllcyI6eyJhbGxvY2F0aW9ucyI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7ImFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJpbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuYW1lc3BhY2UiOnsidHlwZSI6InN0cmluZyJ9LCJwb2QiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiYWRkcmVzcyIsImluZGV4IiwibmFtZXNwYWNlIiwicG9kIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImV4Y2x1ZGVzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEF0dGFjaERlZiI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsiZGVzY3JpcHRpb24iOiJGb28gaXMgYW4gZXhhbXBsZSBmaWVsZCBvZiBJUFBvb2wuIEVkaXQgaXBwb29sX3R5cGVzLmdvIHRvIHJlbW92ZS91cGRhdGUiLCJ0eXBlIjoic3RyaW5nIn0sInZsYW5DSURSIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFsbG9jYXRpb25zIiwiZXhjbHVkZXMiLCJob3N0TmFtZSIsImludGVyZmFjZU5hbWUiLCJuZXRBdHRhY2hEZWYiLCJwb2RDSURSIiwidmxhbkNJRFIiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJJUFBvb2xTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgSVBQb29sIiwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjUifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJtdWx0aW5pY25ldHdvcmtzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ik11bHRpTmljTmV0d29yayIsImxpc3RLaW5kIjoiTXVsdGlOaWNOZXR3b3JrTGlzdCIsInBsdXJhbCI6Im11bHRpbmljbmV0d29ya3MiLCJzaW5ndWxhciI6Im11bHRpbmljbmV0d29yayJ9LCJzY29wZSI6IkNsdXN0ZXIiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxIiwic2NoZW1hIjp7Im9wZW5BUElWM1NjaGVtYSI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29yayBpcyB0aGUgU2NoZW1hIGZvciB0aGUgbXVsdGluaWNuZXR3b3JrcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuXG5TZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmRcbm1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy5cbk1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy5cblNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLlxuQ2Fubm90IGJlIHVwZGF0ZWQuXG5JbiBDYW1lbENhc2UuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJNdWx0aU5pY05ldHdvcmtTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgTXVsdGlOaWNOZXR3b3JrXG5NYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbFxuU3VibmV0IGlzIGdsb2JhbCBzdWJuZXQsIGRlZmF1bHQ6IDE3Mi4zMC4wLjAvMTZcbklQQU0gaXMgaXBhbSBzcGVjaWZpY2F0aW9uXG5NYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uXG5Qb2xpY3kgaXMgZ2VuZXJhbCBwb2xpY3kgb2YgdGhlIHBvb2wiLCJwcm9wZXJ0aWVzIjp7ImF0dGFjaFBvbGljeSI6eyJkZXNjcmlwdGlvbiI6IkFzc2lnbm1lbnRQb2xpY3kgZGVmaW5lcyB0aGUgcG9saWN5IHRvIHNlbGVjdCB0aGUgTklDcyBmcm9tIHRoZSBwb29sXG5TdHJhdGVneSBpcyBvbmUgb2YgTm9uZSwgQ29zdE9wdCwgUGVyZk9wdCwgUW9TQ2xhc3NcblRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHNcbnJlcXVpcmVkIGZvciBDb3N0T3B0IGFuZCBQZXJmT3B0IiwicHJvcGVydGllcyI6eyJzdHJhdGVneSI6eyJ0eXBlIjoic3RyaW5nIn0sInRhcmdldCI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJzdHJhdGVneSJdLCJ0eXBlIjoib2JqZWN0In0sImlwYW0iOnsidHlwZSI6InN0cmluZyJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm11bHRpTklDSVBBTSI6eyJ0eXBlIjoiYm9vbGVhbiJ9LCJuYW1lc3BhY2VzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sInBsdWdpbiI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImFyZ3MiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoib2JqZWN0In0sImNhcGFiaWxpdGllcyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoiYm9vbGVhbiJ9LCJ0eXBlIjoib2JqZWN0In0sImNuaVZlcnNpb24iOnsidHlwZSI6InN0cmluZyJ9LCJkbnMiOnsiZGVzY3JpcHRpb24iOiJyZWZlcmVuY2U6IGdpdGh1Yi5jb20vY29udGFpbmVybmV0d29ya2luZy9jbmkvcGtnL3R5cGVzIiwicHJvcGVydGllcyI6eyJkb21haW4iOnsidHlwZSI6InN0cmluZyJ9LCJuYW1lc2VydmVycyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJvcHRpb25zIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sInNlYXJjaCI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9fSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImNuaVZlcnNpb24iLCJ0eXBlIl0sInR5cGUiOiJvYmplY3QifSwic3VibmV0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImlwYW0iLCJwbHVnaW4iXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJNdWx0aU5pY05ldHdvcmtTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgTXVsdGlOaWNOZXR3b3JrIiwicHJvcGVydGllcyI6eyJjb21wdXRlUmVzdWx0cyI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Im5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJudW1PZkhvc3RzIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJuZXRBZGRyZXNzIiwibnVtT2ZIb3N0cyJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWdTdGF0dXMiOnsidHlwZSI6InN0cmluZyJ9LCJkaXNjb3ZlcnkiOnsicHJvcGVydGllcyI6eyJjaWRyUHJvY2Vzc2VkIjp7InR5cGUiOiJpbnRlZ2VyIn0sImV4aXN0RGFlbW9uIjp7InR5cGUiOiJpbnRlZ2VyIn0sImluZm9BdmFpbGFibGUiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbImNpZHJQcm9jZXNzZWQiLCJleGlzdERhZW1vbiIsImluZm9BdmFpbGFibGUiXSwidHlwZSI6Im9iamVjdCJ9LCJsYXN0U3luY1RpbWUiOnsiZm9ybWF0IjoiZGF0ZS10aW1lIiwidHlwZSI6InN0cmluZyJ9LCJtZXNzYWdlIjp7InR5cGUiOiJzdHJpbmcifSwicm91dGVTdGF0dXMiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY29tcHV0ZVJlc3VsdHMiLCJjb25maWdTdGF0dXMiLCJkaXNjb3ZlcnkiLCJsYXN0U3luY1RpbWUiLCJtZXNzYWdlIiwicm91dGVTdGF0dXMiXSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
relatedImages:
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.2.6
  name: ""
- image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator:1.2.6
  name: ""
schema: olm.bundle
---
image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator:1.2.7
name: multi-nic-cni-operator.v1.2.7
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.2.7
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJjaWRycy5tdWx0aW5pYy5mbXMuaW8ifSwic3BlYyI6eyJncm91cCI6Im11bHRpbmljLmZtcy5pbyIsIm5hbWVzIjp7ImtpbmQiOiJDSURSIiwibGlzdEtpbmQiOiJDSURSTGlzdCIsInBsdXJhbCI6ImNpZHJzIiwic2luZ3VsYXIiOiJjaWRyIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiQ0lEUiBpcyB0aGUgU2NoZW1hIGZvciB0aGUgY2lkcnMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LlxuU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kXG5tYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuXG5TZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by5cbkNhbm5vdCBiZSB1cGRhdGVkLlxuSW4gQ2FtZWxDYXNlLlxuTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiQ0lEUlNwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBDSURSIiwicHJvcGVydGllcyI6eyJjaWRyIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdHMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJob3N0SVAiOnsidHlwZSI6InN0cmluZyJ9LCJob3N0SW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaXBwb29sIjp7InR5cGUiOiJzdHJpbmcifSwicG9kQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0SVAiLCJob3N0SW5kZXgiLCJob3N0TmFtZSIsImludGVyZmFjZU5hbWUiLCJwb2RDSURSIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImludGVyZmFjZUluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0cyIsImludGVyZmFjZUluZGV4IiwibmV0QWRkcmVzcyIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZyI6eyJkZXNjcmlwdGlvbiI6IklOU0VSVCBBRERJVElPTkFMIFNQRUMgRklFTERTIC0gZGVzaXJlZCBzdGF0ZSBvZiBjbHVzdGVyXG5JbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOm51bGwsInN0b3JlZFZlcnNpb25zIjpudWxsfX0=
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJkZXZpY2VjbGFzc2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkRldmljZUNsYXNzIiwibGlzdEtpbmQiOiJEZXZpY2VDbGFzc0xpc3QiLCJwbHVyYWwiOiJkZXZpY2VjbGFzc2VzIiwic2luZ3VsYXIiOiJkZXZpY2VjbGFzcyJ9LCJzY29wZSI6IkNsdXN0ZXIiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxIiwic2NoZW1hIjp7Im9wZW5BUElWM1NjaGVtYSI6eyJkZXNjcmlwdGlvbiI6IkRldmljZUNsYXNzIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBkZXZpY2VjbGFzc2VzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC5cblNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZFxubWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLlxuTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLlxuU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uXG5DYW5ub3QgYmUgdXBkYXRlZC5cbkluIENhbWVsQ2FzZS5cbk1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkRldmljZUNsYXNzU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIERldmljZUNsYXNzIiwicHJvcGVydGllcyI6eyJpZHMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJwcm9kdWN0cyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJ2ZW5kb3IiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsicHJvZHVjdHMiLCJ2ZW5kb3IiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifX0sInJlcXVpcmVkIjpbImlkcyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkRldmljZUNsYXNzU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIERldmljZUNsYXNzIiwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJob3N0aW50ZXJmYWNlcy5tdWx0aW5pYy5mbXMuaW8ifSwic3BlYyI6eyJncm91cCI6Im11bHRpbmljLmZtcy5pbyIsIm5hbWVzIjp7ImtpbmQiOiJIb3N0SW50ZXJmYWNlIiwibGlzdEtpbmQiOiJIb3N0SW50ZXJmYWNlTGlzdCIsInBsdXJhbCI6Imhvc3RpbnRlcmZhY2VzIiwic2luZ3VsYXIiOiJob3N0aW50ZXJmYWNlIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSG9zdEludGVyZmFjZSBpcyB0aGUgU2NoZW1hIGZvciB0aGUgaG9zdGludGVyZmFjZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LlxuU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kXG5tYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuXG5TZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by5cbkNhbm5vdCBiZSB1cGRhdGVkLlxuSW4gQ2FtZWxDYXNlLlxuTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSG9zdEludGVyZmFjZVNwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBIb3N0SW50ZXJmYWNlIiwicHJvcGVydGllcyI6eyJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZXMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJob3N0SVAiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sInBjaUFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwcm9kdWN0Ijp7InR5cGUiOiJzdHJpbmcifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImludGVyZmFjZU5hbWUiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifX0sInJlcXVpcmVkIjpbImhvc3ROYW1lIiwiaW50ZXJmYWNlcyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsic3RhdCI6eyJwcm9wZXJ0aWVzIjp7ImNvdW50Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJsYXN0UngiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFJ4RHJvcCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VGltZXN0YW1wIjp7ImZvcm1hdCI6ImludDY0IiwidHlwZSI6ImludGVnZXIifSwibGFzdFR4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwicnhEcm9wUmF0ZSI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJyeFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhEcm9wUmF0ZSI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJ0eFJhdGUiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbImNvdW50IiwiaW50ZXJmYWNlTmFtZSIsImxhc3RSeCIsImxhc3RSeERyb3AiLCJsYXN0VGltZXN0YW1wIiwibGFzdFR4IiwibGFzdFR4RHJvcCIsInJ4RHJvcFJhdGUiLCJyeFJhdGUiLCJ0eERyb3BSYXRlIiwidHhSYXRlIl0sInR5cGUiOiJvYmplY3QifX0sInJlcXVpcmVkIjpbInN0YXQiXSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJpcHBvb2xzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IklQUG9vbCIsImxpc3RLaW5kIjoiSVBQb29sTGlzdCIsInBsdXJhbCI6ImlwcG9vbHMiLCJzaW5ndWxhciI6ImlwcG9vbCJ9LCJzY29wZSI6IkNsdXN0ZXIiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxIiwic2NoZW1hIjp7Im9wZW5BUElWM1NjaGVtYSI6eyJkZXNjcmlwdGlvbiI6IklQUG9vbCBpcyB0aGUgU2NoZW1hIGZvciB0aGUgaXBwb29scyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuXG5TZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmRcbm1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy5cbk1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy5cblNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLlxuQ2Fubm90IGJlIHVwZGF0ZWQuXG5JbiBDYW1lbENhc2UuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJJUFBvb2xTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSVBQb29sIiwicHJvcGVydGllcyI6eyJhbGxvY2F0aW9ucyI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7ImFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJpbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuYW1lc3BhY2UiOnsidHlwZSI6InN0cmluZyJ9LCJwb2QiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiYWRkcmVzcyIsImluZGV4IiwibmFtZXNwYWNlIiwicG9kIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImV4Y2x1ZGVzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEF0dGFjaERlZiI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsiZGVzY3JpcHRpb24iOiJGb28gaXMgYW4gZXhhbXBsZSBmaWVsZCBvZiBJUFBvb2wuIEVkaXQgaXBwb29sX3R5cGVzLmdvIHRvIHJlbW92ZS91cGRhdGUiLCJ0eXBlIjoic3RyaW5nIn0sInZsYW5DSURSIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFsbG9jYXRpb25zIiwiZXhjbHVkZXMiLCJob3N0TmFtZSIsImludGVyZmFjZU5hbWUiLCJuZXRBdHRhY2hEZWYiLCJwb2RDSURSIiwidmxhbkNJRFIiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJJUFBvb2xTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgSVBQb29sIiwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJtdWx0aW5pY25ldHdvcmtzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ik11bHRpTmljTmV0d29yayIsImxpc3RLaW5kIjoiTXVsdGlOaWNOZXR3b3JrTGlzdCIsInBsdXJhbCI6Im11bHRpbmljbmV0d29ya3MiLCJzaW5ndWxhciI6Im11bHRpbmljbmV0d29yayJ9LCJzY29wZSI6IkNsdXN0ZXIiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxIiwic2NoZW1hIjp7Im9wZW5BUElWM1NjaGVtYSI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29yayBpcyB0aGUgU2NoZW1hIGZvciB0aGUgbXVsdGluaWNuZXR3b3JrcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuXG5TZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmRcbm1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy5cbk1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy5cblNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLlxuQ2Fubm90IGJlIHVwZGF0ZWQuXG5JbiBDYW1lbENhc2UuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJNdWx0aU5pY05ldHdvcmtTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgTXVsdGlOaWNOZXR3b3JrXG5NYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbFxuU3VibmV0IGlzIGdsb2JhbCBzdWJuZXQsIGRlZmF1bHQ6IDE3Mi4zMC4wLjAvMTZcbklQQU0gaXMgaXBhbSBzcGVjaWZpY2F0aW9uXG5NYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uXG5Qb2xpY3kgaXMgZ2VuZXJhbCBwb2xpY3kgb2YgdGhlIHBvb2wiLCJwcm9wZXJ0aWVzIjp7ImF0dGFjaFBvbGljeSI6eyJkZXNjcmlwdGlvbiI6IkFzc2lnbm1lbnRQb2xpY3kgZGVmaW5lcyB0aGUgcG9saWN5IHRvIHNlbGVjdCB0aGUgTklDcyBmcm9tIHRoZSBwb29sXG5TdHJhdGVneSBpcyBvbmUgb2YgTm9uZSwgQ29zdE9wdCwgUGVyZk9wdCwgUW9TQ2xhc3NcblRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHNcbnJlcXVpcmVkIGZvciBDb3N0T3B0IGFuZCBQZXJmT3B0IiwicHJvcGVydGllcyI6eyJzdHJhdGVneSI6eyJ0eXBlIjoic3RyaW5nIn0sInRhcmdldCI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJzdHJhdGVneSJdLCJ0eXBlIjoib2JqZWN0In0sImlwYW0iOnsidHlwZSI6InN0cmluZyJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm11bHRpTklDSVBBTSI6eyJ0eXBlIjoiYm9vbGVhbiJ9LCJuYW1lc3BhY2VzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sInBsdWdpbiI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImFyZ3MiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoib2JqZWN0In0sImNhcGFiaWxpdGllcyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoiYm9vbGVhbiJ9LCJ0eXBlIjoib2JqZWN0In0sImNuaVZlcnNpb24iOnsidHlwZSI6InN0cmluZyJ9LCJkbnMiOnsiZGVzY3JpcHRpb24iOiJyZWZlcmVuY2U6IGdpdGh1Yi5jb20vY29udGFpbmVybmV0d29ya2luZy9jbmkvcGtnL3R5cGVzIiwicHJvcGVydGllcyI6eyJkb21haW4iOnsidHlwZSI6InN0cmluZyJ9LCJuYW1lc2VydmVycyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJvcHRpb25zIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sInNlYXJjaCI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9fSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImNuaVZlcnNpb24iLCJ0eXBlIl0sInR5cGUiOiJvYmplY3QifSwic3VibmV0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImlwYW0iLCJwbHVnaW4iXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJNdWx0aU5pY05ldHdvcmtTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgTXVsdGlOaWNOZXR3b3JrIiwicHJvcGVydGllcyI6eyJjb21wdXRlUmVzdWx0cyI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Im5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJudW1PZkhvc3RzIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJuZXRBZGRyZXNzIiwibnVtT2ZIb3N0cyJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWdTdGF0dXMiOnsidHlwZSI6InN0cmluZyJ9LCJkaXNjb3ZlcnkiOnsicHJvcGVydGllcyI6eyJjaWRyUHJvY2Vzc2VkIjp7InR5cGUiOiJpbnRlZ2VyIn0sImV4aXN0RGFlbW9uIjp7InR5cGUiOiJpbnRlZ2VyIn0sImluZm9BdmFpbGFibGUiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbImNpZHJQcm9jZXNzZWQiLCJleGlzdERhZW1vbiIsImluZm9BdmFpbGFibGUiXSwidHlwZSI6Im9iamVjdCJ9LCJsYXN0U3luY1RpbWUiOnsiZm9ybWF0IjoiZGF0ZS10aW1lIiwidHlwZSI6InN0cmluZyJ9LCJtZXNzYWdlIjp7InR5cGUiOiJzdHJpbmcifSwicm91dGVTdGF0dXMiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY29tcHV0ZVJlc3VsdHMiLCJjb25maWdTdGF0dXMiLCJkaXNjb3ZlcnkiLCJsYXN0U3luY1RpbWUiLCJtZXNzYWdlIiwicm91dGVTdGF0dXMiXSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
relatedImages:
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.2.7
  name: ""
- image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator:1.2.7
  name: ""
schema: olm.bundle
---
image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator:1.2.8
name: multi-nic-cni-operator.v1.2.8
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.2.8
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJjaWRycy5tdWx0aW5pYy5mbXMuaW8ifSwic3BlYyI6eyJncm91cCI6Im11bHRpbmljLmZtcy5pbyIsIm5hbWVzIjp7ImtpbmQiOiJDSURSIiwibGlzdEtpbmQiOiJDSURSTGlzdCIsInBsdXJhbCI6ImNpZHJzIiwic2luZ3VsYXIiOiJjaWRyIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiQ0lEUiBpcyB0aGUgU2NoZW1hIGZvciB0aGUgY2lkcnMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LlxuU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kXG5tYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuXG5TZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by5cbkNhbm5vdCBiZSB1cGRhdGVkLlxuSW4gQ2FtZWxDYXNlLlxuTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiQ0lEUlNwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBDSURSIiwicHJvcGVydGllcyI6eyJjaWRyIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdHMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJob3N0SVAiOnsidHlwZSI6InN0cmluZyJ9LCJob3N0SW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaXBwb29sIjp7InR5cGUiOiJzdHJpbmcifSwicG9kQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0SVAiLCJob3N0SW5kZXgiLCJob3N0TmFtZSIsImludGVyZmFjZU5hbWUiLCJwb2RDSURSIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImludGVyZmFjZUluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0cyIsImludGVyZmFjZUluZGV4IiwibmV0QWRkcmVzcyIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZyI6eyJkZXNjcmlwdGlvbiI6IklOU0VSVCBBRERJVElPTkFMIFNQRUMgRklFTERTIC0gZGVzaXJlZCBzdGF0ZSBvZiBjbHVzdGVyXG5JbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOm51bGwsInN0b3JlZFZlcnNpb25zIjpudWxsfX0=
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJkZXZpY2VjbGFzc2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkRldmljZUNsYXNzIiwibGlzdEtpbmQiOiJEZXZpY2VDbGFzc0xpc3QiLCJwbHVyYWwiOiJkZXZpY2VjbGFzc2VzIiwic2luZ3VsYXIiOiJkZXZpY2VjbGFzcyJ9LCJzY29wZSI6IkNsdXN0ZXIiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxIiwic2NoZW1hIjp7Im9wZW5BUElWM1NjaGVtYSI6eyJkZXNjcmlwdGlvbiI6IkRldmljZUNsYXNzIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBkZXZpY2VjbGFzc2VzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC5cblNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZFxubWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLlxuTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLlxuU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uXG5DYW5ub3QgYmUgdXBkYXRlZC5cbkluIENhbWVsQ2FzZS5cbk1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkRldmljZUNsYXNzU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIERldmljZUNsYXNzIiwicHJvcGVydGllcyI6eyJpZHMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJwcm9kdWN0cyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJ2ZW5kb3IiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsicHJvZHVjdHMiLCJ2ZW5kb3IiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifX0sInJlcXVpcmVkIjpbImlkcyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkRldmljZUNsYXNzU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIERldmljZUNsYXNzIiwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJob3N0aW50ZXJmYWNlcy5tdWx0aW5pYy5mbXMuaW8ifSwic3BlYyI6eyJncm91cCI6Im11bHRpbmljLmZtcy5pbyIsIm5hbWVzIjp7ImtpbmQiOiJIb3N0SW50ZXJmYWNlIiwibGlzdEtpbmQiOiJIb3N0SW50ZXJmYWNlTGlzdCIsInBsdXJhbCI6Imhvc3RpbnRlcmZhY2VzIiwic2luZ3VsYXIiOiJob3N0aW50ZXJmYWNlIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSG9zdEludGVyZmFjZSBpcyB0aGUgU2NoZW1hIGZvciB0aGUgaG9zdGludGVyZmFjZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LlxuU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kXG5tYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuXG5TZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by5cbkNhbm5vdCBiZSB1cGRhdGVkLlxuSW4gQ2FtZWxDYXNlLlxuTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSG9zdEludGVyZmFjZVNwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBIb3N0SW50ZXJmYWNlIiwicHJvcGVydGllcyI6eyJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZXMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJob3N0SVAiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sInBjaUFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwcm9kdWN0Ijp7InR5cGUiOiJzdHJpbmcifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImludGVyZmFjZU5hbWUiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifX0sInJlcXVpcmVkIjpbImhvc3ROYW1lIiwiaW50ZXJmYWNlcyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsic3RhdCI6eyJwcm9wZXJ0aWVzIjp7ImNvdW50Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJsYXN0UngiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFJ4RHJvcCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VGltZXN0YW1wIjp7ImZvcm1hdCI6ImludDY0IiwidHlwZSI6ImludGVnZXIifSwibGFzdFR4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwicnhEcm9wUmF0ZSI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJyeFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhEcm9wUmF0ZSI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJ0eFJhdGUiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbImNvdW50IiwiaW50ZXJmYWNlTmFtZSIsImxhc3RSeCIsImxhc3RSeERyb3AiLCJsYXN0VGltZXN0YW1wIiwibGFzdFR4IiwibGFzdFR4RHJvcCIsInJ4RHJvcFJhdGUiLCJyeFJhdGUiLCJ0eERyb3BSYXRlIiwidHhSYXRlIl0sInR5cGUiOiJvYmplY3QifX0sInJlcXVpcmVkIjpbInN0YXQiXSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJpcHBvb2xzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IklQUG9vbCIsImxpc3RLaW5kIjoiSVBQb29sTGlzdCIsInBsdXJhbCI6ImlwcG9vbHMiLCJzaW5ndWxhciI6ImlwcG9vbCJ9LCJzY29wZSI6IkNsdXN0ZXIiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxIiwic2NoZW1hIjp7Im9wZW5BUElWM1NjaGVtYSI6eyJkZXNjcmlwdGlvbiI6IklQUG9vbCBpcyB0aGUgU2NoZW1hIGZvciB0aGUgaXBwb29scyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuXG5TZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmRcbm1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy5cbk1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy5cblNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLlxuQ2Fubm90IGJlIHVwZGF0ZWQuXG5JbiBDYW1lbENhc2UuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJJUFBvb2xTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSVBQb29sIiwicHJvcGVydGllcyI6eyJhbGxvY2F0aW9ucyI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7ImFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJpbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuYW1lc3BhY2UiOnsidHlwZSI6InN0cmluZyJ9LCJwb2QiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiYWRkcmVzcyIsImluZGV4IiwibmFtZXNwYWNlIiwicG9kIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImV4Y2x1ZGVzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEF0dGFjaERlZiI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsiZGVzY3JpcHRpb24iOiJGb28gaXMgYW4gZXhhbXBsZSBmaWVsZCBvZiBJUFBvb2wuIEVkaXQgaXBwb29sX3R5cGVzLmdvIHRvIHJlbW92ZS91cGRhdGUiLCJ0eXBlIjoic3RyaW5nIn0sInZsYW5DSURSIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFsbG9jYXRpb25zIiwiZXhjbHVkZXMiLCJob3N0TmFtZSIsImludGVyZmFjZU5hbWUiLCJuZXRBdHRhY2hEZWYiLCJwb2RDSURSIiwidmxhbkNJRFIiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJJUFBvb2xTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgSVBQb29sIiwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJtdWx0aW5pY25ldHdvcmtzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ik11bHRpTmljTmV0d29yayIsImxpc3RLaW5kIjoiTXVsdGlOaWNOZXR3b3JrTGlzdCIsInBsdXJhbCI6Im11bHRpbmljbmV0d29ya3MiLCJzaW5ndWxhciI6Im11bHRpbmljbmV0d29yayJ9LCJzY29wZSI6IkNsdXN0ZXIiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxIiwic2NoZW1hIjp7Im9wZW5BUElWM1NjaGVtYSI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29yayBpcyB0aGUgU2NoZW1hIGZvciB0aGUgbXVsdGluaWNuZXR3b3JrcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuXG5TZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmRcbm1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy5cbk1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy5cblNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLlxuQ2Fubm90IGJlIHVwZGF0ZWQuXG5JbiBDYW1lbENhc2UuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJNdWx0aU5pY05ldHdvcmtTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgTXVsdGlOaWNOZXR3b3JrXG5NYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbFxuU3VibmV0IGlzIGdsb2JhbCBzdWJuZXQsIGRlZmF1bHQ6IDE3Mi4zMC4wLjAvMTZcbklQQU0gaXMgaXBhbSBzcGVjaWZpY2F0aW9uXG5NYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uXG5Qb2xpY3kgaXMgZ2VuZXJhbCBwb2xpY3kgb2YgdGhlIHBvb2wiLCJwcm9wZXJ0aWVzIjp7ImF0dGFjaFBvbGljeSI6eyJkZXNjcmlwdGlvbiI6IkFzc2lnbm1lbnRQb2xpY3kgZGVmaW5lcyB0aGUgcG9saWN5IHRvIHNlbGVjdCB0aGUgTklDcyBmcm9tIHRoZSBwb29sXG5TdHJhdGVneSBpcyBvbmUgb2YgTm9uZSwgQ29zdE9wdCwgUGVyZk9wdCwgUW9TQ2xhc3NcblRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHNcbnJlcXVpcmVkIGZvciBDb3N0T3B0IGFuZCBQZXJmT3B0IiwicHJvcGVydGllcyI6eyJzdHJhdGVneSI6eyJ0eXBlIjoic3RyaW5nIn0sInRhcmdldCI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJzdHJhdGVneSJdLCJ0eXBlIjoib2JqZWN0In0sImlwYW0iOnsidHlwZSI6InN0cmluZyJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm11bHRpTklDSVBBTSI6eyJ0eXBlIjoiYm9vbGVhbiJ9LCJuYW1lc3BhY2VzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sInBsdWdpbiI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImFyZ3MiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoib2JqZWN0In0sImNhcGFiaWxpdGllcyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoiYm9vbGVhbiJ9LCJ0eXBlIjoib2JqZWN0In0sImNuaVZlcnNpb24iOnsidHlwZSI6InN0cmluZyJ9LCJkbnMiOnsiZGVzY3JpcHRpb24iOiJyZWZlcmVuY2U6IGdpdGh1Yi5jb20vY29udGFpbmVybmV0d29ya2luZy9jbmkvcGtnL3R5cGVzIiwicHJvcGVydGllcyI6eyJkb21haW4iOnsidHlwZSI6InN0cmluZyJ9LCJuYW1lc2VydmVycyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJvcHRpb25zIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sInNlYXJjaCI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9fSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImNuaVZlcnNpb24iLCJ0eXBlIl0sInR5cGUiOiJvYmplY3QifSwic3VibmV0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImlwYW0iLCJwbHVnaW4iXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJNdWx0aU5pY05ldHdvcmtTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgTXVsdGlOaWNOZXR3b3JrIiwicHJvcGVydGllcyI6eyJjb21wdXRlUmVzdWx0cyI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Im5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJudW1PZkhvc3RzIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJuZXRBZGRyZXNzIiwibnVtT2ZIb3N0cyJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWdTdGF0dXMiOnsidHlwZSI6InN0cmluZyJ9LCJkaXNjb3ZlcnkiOnsicHJvcGVydGllcyI6eyJjaWRyUHJvY2Vzc2VkIjp7InR5cGUiOiJpbnRlZ2VyIn0sImV4aXN0RGFlbW9uIjp7InR5cGUiOiJpbnRlZ2VyIn0sImluZm9BdmFpbGFibGUiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbImNpZHJQcm9jZXNzZWQiLCJleGlzdERhZW1vbiIsImluZm9BdmFpbGFibGUiXSwidHlwZSI6Im9iamVjdCJ9LCJsYXN0U3luY1RpbWUiOnsiZm9ybWF0IjoiZGF0ZS10aW1lIiwidHlwZSI6InN0cmluZyJ9LCJtZXNzYWdlIjp7InR5cGUiOiJzdHJpbmcifSwicm91dGVTdGF0dXMiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY29tcHV0ZVJlc3VsdHMiLCJjb25maWdTdGF0dXMiLCJkaXNjb3ZlcnkiLCJsYXN0U3luY1RpbWUiLCJtZXNzYWdlIiwicm91dGVTdGF0dXMiXSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
relatedImages:
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.2.8
  name: ""
- image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator:1.2.8
  name: ""
schema: olm.bundle
---
image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator:1.2.9
name: multi-nic-cni-operator.v1.2.9
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.2.9
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJjaWRycy5tdWx0aW5pYy5mbXMuaW8ifSwic3BlYyI6eyJncm91cCI6Im11bHRpbmljLmZtcy5pbyIsIm5hbWVzIjp7ImtpbmQiOiJDSURSIiwibGlzdEtpbmQiOiJDSURSTGlzdCIsInBsdXJhbCI6ImNpZHJzIiwic2luZ3VsYXIiOiJjaWRyIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiQ0lEUiBpcyB0aGUgU2NoZW1hIGZvciB0aGUgY2lkcnMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LlxuU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kXG5tYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuXG5TZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by5cbkNhbm5vdCBiZSB1cGRhdGVkLlxuSW4gQ2FtZWxDYXNlLlxuTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiQ0lEUlNwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBDSURSIiwicHJvcGVydGllcyI6eyJjaWRyIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdHMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJob3N0SVAiOnsidHlwZSI6InN0cmluZyJ9LCJob3N0SW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaXBwb29sIjp7InR5cGUiOiJzdHJpbmcifSwicG9kQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0SVAiLCJob3N0SW5kZXgiLCJob3N0TmFtZSIsImludGVyZmFjZU5hbWUiLCJwb2RDSURSIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImludGVyZmFjZUluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJob3N0cyIsImludGVyZmFjZUluZGV4IiwibmV0QWRkcmVzcyIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZyI6eyJkZXNjcmlwdGlvbiI6IklOU0VSVCBBRERJVElPTkFMIFNQRUMgRklFTERTIC0gZGVzaXJlZCBzdGF0ZSBvZiBjbHVzdGVyXG5JbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOm51bGwsInN0b3JlZFZlcnNpb25zIjpudWxsfX0=
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJkZXZpY2VjbGFzc2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkRldmljZUNsYXNzIiwibGlzdEtpbmQiOiJEZXZpY2VDbGFzc0xpc3QiLCJwbHVyYWwiOiJkZXZpY2VjbGFzc2VzIiwic2luZ3VsYXIiOiJkZXZpY2VjbGFzcyJ9LCJzY29wZSI6IkNsdXN0ZXIiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxIiwic2NoZW1hIjp7Im9wZW5BUElWM1NjaGVtYSI6eyJkZXNjcmlwdGlvbiI6IkRldmljZUNsYXNzIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBkZXZpY2VjbGFzc2VzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC5cblNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZFxubWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLlxuTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLlxuU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uXG5DYW5ub3QgYmUgdXBkYXRlZC5cbkluIENhbWVsQ2FzZS5cbk1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkRldmljZUNsYXNzU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIERldmljZUNsYXNzIiwicHJvcGVydGllcyI6eyJpZHMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJwcm9kdWN0cyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJ2ZW5kb3IiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsicHJvZHVjdHMiLCJ2ZW5kb3IiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifX0sInJlcXVpcmVkIjpbImlkcyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkRldmljZUNsYXNzU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIERldmljZUNsYXNzIiwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJob3N0aW50ZXJmYWNlcy5tdWx0aW5pYy5mbXMuaW8ifSwic3BlYyI6eyJncm91cCI6Im11bHRpbmljLmZtcy5pbyIsIm5hbWVzIjp7ImtpbmQiOiJIb3N0SW50ZXJmYWNlIiwibGlzdEtpbmQiOiJIb3N0SW50ZXJmYWNlTGlzdCIsInBsdXJhbCI6Imhvc3RpbnRlcmZhY2VzIiwic2luZ3VsYXIiOiJob3N0aW50ZXJmYWNlIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSG9zdEludGVyZmFjZSBpcyB0aGUgU2NoZW1hIGZvciB0aGUgaG9zdGludGVyZmFjZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LlxuU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kXG5tYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuXG5TZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by5cbkNhbm5vdCBiZSB1cGRhdGVkLlxuSW4gQ2FtZWxDYXNlLlxuTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSG9zdEludGVyZmFjZVNwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBIb3N0SW50ZXJmYWNlIiwicHJvcGVydGllcyI6eyJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZXMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJob3N0SVAiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sInBjaUFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwcm9kdWN0Ijp7InR5cGUiOiJzdHJpbmcifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImludGVyZmFjZU5hbWUiXSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjoiYXJyYXkifX0sInJlcXVpcmVkIjpbImhvc3ROYW1lIiwiaW50ZXJmYWNlcyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsic3RhdCI6eyJwcm9wZXJ0aWVzIjp7ImNvdW50Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJsYXN0UngiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFJ4RHJvcCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VGltZXN0YW1wIjp7ImZvcm1hdCI6ImludDY0IiwidHlwZSI6ImludGVnZXIifSwibGFzdFR4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwicnhEcm9wUmF0ZSI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJyeFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhEcm9wUmF0ZSI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJ0eFJhdGUiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbImNvdW50IiwiaW50ZXJmYWNlTmFtZSIsImxhc3RSeCIsImxhc3RSeERyb3AiLCJsYXN0VGltZXN0YW1wIiwibGFzdFR4IiwibGFzdFR4RHJvcCIsInJ4RHJvcFJhdGUiLCJyeFJhdGUiLCJ0eERyb3BSYXRlIiwidHhSYXRlIl0sInR5cGUiOiJvYmplY3QifX0sInJlcXVpcmVkIjpbInN0YXQiXSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJpcHBvb2xzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IklQUG9vbCIsImxpc3RLaW5kIjoiSVBQb29sTGlzdCIsInBsdXJhbCI6ImlwcG9vbHMiLCJzaW5ndWxhciI6ImlwcG9vbCJ9LCJzY29wZSI6IkNsdXN0ZXIiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxIiwic2NoZW1hIjp7Im9wZW5BUElWM1NjaGVtYSI6eyJkZXNjcmlwdGlvbiI6IklQUG9vbCBpcyB0aGUgU2NoZW1hIGZvciB0aGUgaXBwb29scyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuXG5TZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmRcbm1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy5cbk1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy5cblNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLlxuQ2Fubm90IGJlIHVwZGF0ZWQuXG5JbiBDYW1lbENhc2UuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJJUFBvb2xTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSVBQb29sIiwicHJvcGVydGllcyI6eyJhbGxvY2F0aW9ucyI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7ImFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJpbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuYW1lc3BhY2UiOnsidHlwZSI6InN0cmluZyJ9LCJwb2QiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiYWRkcmVzcyIsImluZGV4IiwibmFtZXNwYWNlIiwicG9kIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImV4Y2x1ZGVzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEF0dGFjaERlZiI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsiZGVzY3JpcHRpb24iOiJGb28gaXMgYW4gZXhhbXBsZSBmaWVsZCBvZiBJUFBvb2wuIEVkaXQgaXBwb29sX3R5cGVzLmdvIHRvIHJlbW92ZS91cGRhdGUiLCJ0eXBlIjoic3RyaW5nIn0sInZsYW5DSURSIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFsbG9jYXRpb25zIiwiZXhjbHVkZXMiLCJob3N0TmFtZSIsImludGVyZmFjZU5hbWUiLCJuZXRBdHRhY2hEZWYiLCJwb2RDSURSIiwidmxhbkNJRFIiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJJUFBvb2xTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgSVBQb29sIiwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjE2LjEifSwiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJtdWx0aW5pY25ldHdvcmtzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ik11bHRpTmljTmV0d29yayIsImxpc3RLaW5kIjoiTXVsdGlOaWNOZXR3b3JrTGlzdCIsInBsdXJhbCI6Im11bHRpbmljbmV0d29ya3MiLCJzaW5ndWxhciI6Im11bHRpbmljbmV0d29yayJ9LCJzY29wZSI6IkNsdXN0ZXIiLCJ2ZXJzaW9ucyI6W3sibmFtZSI6InYxIiwic2NoZW1hIjp7Im9wZW5BUElWM1NjaGVtYSI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29yayBpcyB0aGUgU2NoZW1hIGZvciB0aGUgbXVsdGluaWNuZXR3b3JrcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuXG5TZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmRcbm1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy5cbk1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy5cblNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLlxuQ2Fubm90IGJlIHVwZGF0ZWQuXG5JbiBDYW1lbENhc2UuXG5Nb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJNdWx0aU5pY05ldHdvcmtTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgTXVsdGlOaWNOZXR3b3JrXG5NYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbFxuU3VibmV0IGlzIGdsb2JhbCBzdWJuZXQsIGRlZmF1bHQ6IDE3Mi4zMC4wLjAvMTZcbklQQU0gaXMgaXBhbSBzcGVjaWZpY2F0aW9uXG5NYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uXG5Qb2xpY3kgaXMgZ2VuZXJhbCBwb2xpY3kgb2YgdGhlIHBvb2wiLCJwcm9wZXJ0aWVzIjp7ImF0dGFjaFBvbGljeSI6eyJkZXNjcmlwdGlvbiI6IkFzc2lnbm1lbnRQb2xpY3kgZGVmaW5lcyB0aGUgcG9saWN5IHRvIHNlbGVjdCB0aGUgTklDcyBmcm9tIHRoZSBwb29sXG5TdHJhdGVneSBpcyBvbmUgb2YgTm9uZSwgQ29zdE9wdCwgUGVyZk9wdCwgUW9TQ2xhc3NcblRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHNcbnJlcXVpcmVkIGZvciBDb3N0T3B0IGFuZCBQZXJmT3B0IiwicHJvcGVydGllcyI6eyJzdHJhdGVneSI6eyJ0eXBlIjoic3RyaW5nIn0sInRhcmdldCI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJzdHJhdGVneSJdLCJ0eXBlIjoib2JqZWN0In0sImlwYW0iOnsidHlwZSI6InN0cmluZyJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm11bHRpTklDSVBBTSI6eyJ0eXBlIjoiYm9vbGVhbiJ9LCJuYW1lc3BhY2VzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sInBsdWdpbiI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImFyZ3MiOnsiYWRkaXRpb25hbFByb3BlcnRpZXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoib2JqZWN0In0sImNhcGFiaWxpdGllcyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoiYm9vbGVhbiJ9LCJ0eXBlIjoib2JqZWN0In0sImNuaVZlcnNpb24iOnsidHlwZSI6InN0cmluZyJ9LCJkbnMiOnsiZGVzY3JpcHRpb24iOiJyZWZlcmVuY2U6IGdpdGh1Yi5jb20vY29udGFpbmVybmV0d29ya2luZy9jbmkvcGtnL3R5cGVzIiwicHJvcGVydGllcyI6eyJkb21haW4iOnsidHlwZSI6InN0cmluZyJ9LCJuYW1lc2VydmVycyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJvcHRpb25zIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sInNlYXJjaCI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9fSwidHlwZSI6Im9iamVjdCJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImNuaVZlcnNpb24iLCJ0eXBlIl0sInR5cGUiOiJvYmplY3QifSwic3VibmV0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImlwYW0iLCJwbHVnaW4iXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJNdWx0aU5pY05ldHdvcmtTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgTXVsdGlOaWNOZXR3b3JrIiwicHJvcGVydGllcyI6eyJjb21wdXRlUmVzdWx0cyI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Im5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJudW1PZkhvc3RzIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJuZXRBZGRyZXNzIiwibnVtT2ZIb3N0cyJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWdTdGF0dXMiOnsidHlwZSI6InN0cmluZyJ9LCJkaXNjb3ZlcnkiOnsicHJvcGVydGllcyI6eyJjaWRyUHJvY2Vzc2VkIjp7InR5cGUiOiJpbnRlZ2VyIn0sImV4aXN0RGFlbW9uIjp7InR5cGUiOiJpbnRlZ2VyIn0sImluZm9BdmFpbGFibGUiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbImNpZHJQcm9jZXNzZWQiLCJleGlzdERhZW1vbiIsImluZm9BdmFpbGFibGUiXSwidHlwZSI6Im9iamVjdCJ9LCJsYXN0U3luY1RpbWUiOnsiZm9ybWF0IjoiZGF0ZS10aW1lIiwidHlwZSI6InN0cmluZyJ9LCJtZXNzYWdlIjp7InR5cGUiOiJzdHJpbmcifSwicm91dGVTdGF0dXMiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY29tcHV0ZVJlc3VsdHMiLCJjb25maWdTdGF0dXMiLCJkaXNjb3ZlcnkiLCJsYXN0U3luY1RpbWUiLCJtZXNzYWdlIiwicm91dGVTdGF0dXMiXSwidHlwZSI6Im9iamVjdCJ9fSwidHlwZSI6Im9iamVjdCJ9fSwic2VydmVkIjp0cnVlLCJzdG9yYWdlIjp0cnVlLCJzdWJyZXNvdXJjZXMiOnsic3RhdHVzIjp7fX19XX0sInN0YXR1cyI6eyJhY2NlcHRlZE5hbWVzIjp7ImtpbmQiOiIiLCJwbHVyYWwiOiIifSwiY29uZGl0aW9ucyI6bnVsbCwic3RvcmVkVmVyc2lvbnMiOm51bGx9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoib3BlcmF0b3JzLmNvcmVvcy5jb20vdjFhbHBoYTEiLCJraW5kIjoiQ2x1c3RlclNlcnZpY2VWZXJzaW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiYWxtLWV4YW1wbGVzIjoiW1xuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiQ0lEUlwiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgIFwibm90ZVwiOiBcIlRoaXMgcmVzb3VyY2Ugd2lsbCBiZSBhdXRvLWdlbmVyYXRlZCBhbmQgY29udHJvbGxlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5EbyBub3QgY3JlYXRlL21vZGlmeS5cXG5cIlxuICAgICAgfSxcbiAgICAgIFwibmFtZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDNcIixcbiAgICAgIFwibmFtZXNwYWNlXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1zeXN0ZW1cIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiY2lkclwiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4yNDQuMC4xNjhcIixcbiAgICAgICAgICAgICAgXCJob3N0SW5kZXhcIjogMCxcbiAgICAgICAgICAgICAgXCJob3N0TmFtZVwiOiBcIm5vZGUtMVwiLFxuICAgICAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgxXCIsXG4gICAgICAgICAgICAgIFwiaXBwb29sXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sMy0xOTIuMTY4LjAuMC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjAuMC8yNlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjI0NC4wLjE2N1wiLFxuICAgICAgICAgICAgICBcImhvc3RJbmRleFwiOiAxLFxuICAgICAgICAgICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0yXCIsXG4gICAgICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDFcIixcbiAgICAgICAgICAgICAgXCJpcHBvb2xcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzLTE5Mi4xNjguMC42NC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjAuNjQvMjZcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJpbnRlcmZhY2VJbmRleFwiOiAwLFxuICAgICAgICAgIFwibmV0QWRkcmVzc1wiOiBcIjEwLjI0NC4wLjAvMTZcIixcbiAgICAgICAgICBcInZsYW5DSURSXCI6IFwiMTkyLjE2OC4wLjAvMThcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJob3N0c1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiaG9zdElQXCI6IFwiMTAuMC4wLjE2OFwiLFxuICAgICAgICAgICAgICBcImhvc3RJbmRleFwiOiAwLFxuICAgICAgICAgICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDJcIixcbiAgICAgICAgICAgICAgXCJpcHBvb2xcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzLTE5Mi4xNjguNjQuMC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjY0LjAvMjZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4wLjAuMTY3XCIsXG4gICAgICAgICAgICAgIFwiaG9zdEluZGV4XCI6IDEsXG4gICAgICAgICAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTJcIixcbiAgICAgICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMlwiLFxuICAgICAgICAgICAgICBcImlwcG9vbFwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDMtMTkyLjE2OC42NC42NC0yNlwiLFxuICAgICAgICAgICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjY0LjY0LzI2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiaW50ZXJmYWNlSW5kZXhcIjogMSxcbiAgICAgICAgICBcIm5ldEFkZHJlc3NcIjogXCIxMC4wLjAuMC8xNlwiLFxuICAgICAgICAgIFwidmxhbkNJRFJcIjogXCIxOTIuMTY4LjY0LjAvMThcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJjb25maWdcIjoge1xuICAgICAgICBcImhvc3RCbG9ja1wiOiA4LFxuICAgICAgICBcImludGVyZmFjZUJsb2NrXCI6IDIsXG4gICAgICAgIFwibWFzdGVyTmV0c1wiOiBbXSxcbiAgICAgICAgXCJuYW1lXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sM1wiLFxuICAgICAgICBcInN1Ym5ldFwiOiBcIjE5Mi4xNjguMC4wLzE2XCIsXG4gICAgICAgIFwidHlwZVwiOiBcImlwdmxhblwiLFxuICAgICAgICBcInZsYW5Nb2RlXCI6IFwibDNcIlxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIkNJRFJcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICBcIm5vdGVcIjogXCJUaGlzIHJlc291cmNlIHdpbGwgYmUgYXV0by1nZW5lcmF0ZWQgYW5kIGNvbnRyb2xsZWQgYnkgbXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIuXFxuRG8gbm90IGNyZWF0ZS9tb2RpZnkuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJpcHZsYW5sM1wiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJjaWRyXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiaG9zdHNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjI0NC4wLjE2OFwiLFxuICAgICAgICAgICAgICBcImhvc3RJbmRleFwiOiAwLFxuICAgICAgICAgICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDFcIixcbiAgICAgICAgICAgICAgXCJpcHBvb2xcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzLTE5Mi4xNjguMC4wLTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguMC4wLzI2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiaG9zdElQXCI6IFwiMTAuMjQ0LjAuMTY3XCIsXG4gICAgICAgICAgICAgIFwiaG9zdEluZGV4XCI6IDEsXG4gICAgICAgICAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTJcIixcbiAgICAgICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMVwiLFxuICAgICAgICAgICAgICBcImlwcG9vbFwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDMtMTkyLjE2OC4wLjY0LTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguMC42NC8yNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImludGVyZmFjZUluZGV4XCI6IDAsXG4gICAgICAgICAgXCJuZXRBZGRyZXNzXCI6IFwiMTAuMjQ0LjAuMC8xNlwiLFxuICAgICAgICAgIFwidmxhbkNJRFJcIjogXCIxOTIuMTY4LjAuMC8xOFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4wLjAuMTY4XCIsXG4gICAgICAgICAgICAgIFwiaG9zdEluZGV4XCI6IDAsXG4gICAgICAgICAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTFcIixcbiAgICAgICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMlwiLFxuICAgICAgICAgICAgICBcImlwcG9vbFwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDMtMTkyLjE2OC42NC4wLTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguNjQuMC8yNlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjAuMC4xNjdcIixcbiAgICAgICAgICAgICAgXCJob3N0SW5kZXhcIjogMSxcbiAgICAgICAgICAgICAgXCJob3N0TmFtZVwiOiBcIm5vZGUtMlwiLFxuICAgICAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgyXCIsXG4gICAgICAgICAgICAgIFwiaXBwb29sXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sMy0xOTIuMTY4LjY0LjY0LTI2XCIsXG4gICAgICAgICAgICAgIFwicG9kQ0lEUlwiOiBcIjE5Mi4xNjguNjQuNjQvMjZcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJpbnRlcmZhY2VJbmRleFwiOiAxLFxuICAgICAgICAgIFwibmV0QWRkcmVzc1wiOiBcIjEwLjAuMC4wLzE2XCIsXG4gICAgICAgICAgXCJ2bGFuQ0lEUlwiOiBcIjE5Mi4xNjguNjQuMC8xOFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImNvbmZpZ1wiOiB7XG4gICAgICAgIFwiaG9zdEJsb2NrXCI6IDgsXG4gICAgICAgIFwiaW50ZXJmYWNlQmxvY2tcIjogMixcbiAgICAgICAgXCJtYXN0ZXJOZXRzXCI6IFtdLFxuICAgICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWlwdmxhbmwzXCIsXG4gICAgICAgIFwic3VibmV0XCI6IFwiMTkyLjE2OC4wLjAvMTZcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiaXB2bGFuXCIsXG4gICAgICAgIFwidmxhbk1vZGVcIjogXCJsM1wiXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiQ29uZmlnXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgXCJub3RlXCI6IFwiVGhlIHJlc291cmNlIHdpdGggZGVmYXVsdCBzZXR0aW5ncyB3aWxsIGJlIGF1dG8tY3JlYXRlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5QbGVhc2UgbW9kaWZ5IGlmIG5lZWQuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW11bHRpLW5pY2RcIixcbiAgICAgIFwibmFtZXNwYWNlXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1zeXN0ZW1cIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiYWRkUm91dGVQYXRoXCI6IFwiL2FkZGwzXCIsXG4gICAgICBcImNuaVR5cGVcIjogXCJtdWx0aS1uaWNcIixcbiAgICAgIFwiY29udGV4dFRpbWVvdXRNaW51dGVzXCI6IDIsXG4gICAgICBcImRhZW1vblwiOiB7XG4gICAgICAgIFwiZW52XCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJEQUVNT05fUE9SVFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjExMDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlJUX1RBQkxFX1BBVEhcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIvb3B0L3J0X3RhYmxlc1wiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImltYWdlXCI6IFwiZ2hjci5pby9mb3VuZGF0aW9uLW1vZGVsLXN0YWNrL211bHRpLW5pYy1jbmktZGFlbW9uOnYxLjIuOVwiLFxuICAgICAgICBcIm1vdW50c1wiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJob3N0cGF0aFwiOiBcIi92YXIvbGliL2NuaS9iaW5cIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNuaWJpblwiLFxuICAgICAgICAgICAgXCJwb2RwYXRoXCI6IFwiL2hvc3Qvb3B0L2NuaS9iaW5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJob3N0cGF0aFwiOiBcIi92YXIvbGliL2t1YmVsZXQvZGV2aWNlLXBsdWdpbnNcIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImRldmljZS1wbHVnaW5cIixcbiAgICAgICAgICAgIFwicG9kcGF0aFwiOiBcIi92YXIvbGliL2t1YmVsZXQvZGV2aWNlLXBsdWdpbnNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJob3N0cGF0aFwiOiBcIi9ldGMvaXByb3V0ZTIvcnRfdGFibGVzXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJydC10YWJsZXNcIixcbiAgICAgICAgICAgIFwicG9kcGF0aFwiOiBcIi9vcHQvcnRfdGFibGVzXCJcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwicG9ydFwiOiAxMTAwMCxcbiAgICAgICAgXCJyZXNvdXJjZXNcIjoge1xuICAgICAgICAgIFwicmVxdWVzdHNcIjoge1xuICAgICAgICAgICAgXCJjcHVcIjogXCIxMDBtXCIsXG4gICAgICAgICAgICBcIm1lbW9yeVwiOiBcIjUwTWlcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzZWN1cml0eUNvbnRleHRcIjoge1xuICAgICAgICAgIFwicHJpdmlsZWdlZFwiOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImRlbGV0ZVJvdXRlUGF0aFwiOiBcIi9kZWxldGVsM1wiLFxuICAgICAgXCJnZXRJbnRlcmZhY2VQYXRoXCI6IFwiL2ludGVyZmFjZVwiLFxuICAgICAgXCJpcGFtVHlwZVwiOiBcIm11bHRpLW5pYy1pcGFtXCIsXG4gICAgICBcImpvaW5QYXRoXCI6IFwiL2pvaW5cIixcbiAgICAgIFwibG9nTGV2ZWxcIjogNCxcbiAgICAgIFwibG9uZ1JlY29uY2lsZU1pbnV0ZXNcIjogMTAsXG4gICAgICBcIm5vcm1hbFJlY29uY2lsZU1pbnV0ZXNcIjogMSxcbiAgICAgIFwidXJnZW50UmVjb25jaWxlU2Vjb25kc1wiOiA1XG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiQ29uZmlnXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgXCJub3RlXCI6IFwiVGhlIHJlc291cmNlIHdpdGggZGVmYXVsdCBzZXR0aW5ncyB3aWxsIGJlIGF1dG8tY3JlYXRlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5QbGVhc2UgbW9kaWZ5IGlmIG5lZWQuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWNkXCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImFkZFJvdXRlUGF0aFwiOiBcIi9hZGRsM1wiLFxuICAgICAgXCJjbmlUeXBlXCI6IFwibXVsdGktbmljXCIsXG4gICAgICBcImNvbnRleHRUaW1lb3V0TWludXRlc1wiOiAyLFxuICAgICAgXCJkYWVtb25cIjoge1xuICAgICAgICBcImVudlwiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiREFFTU9OX1BPUlRcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCIxMTAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJSVF9UQUJMRV9QQVRIXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiL29wdC9ydF90YWJsZXNcIlxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJpbWFnZVwiOiBcImdoY3IuaW8vZm91bmRhdGlvbi1tb2RlbC1zdGFjay9tdWx0aS1uaWMtY25pLWRhZW1vbjp2MS4yLjlcIixcbiAgICAgICAgXCJtb3VudHNcIjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaG9zdHBhdGhcIjogXCIvdmFyL2xpYi9jbmkvYmluXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjbmliaW5cIixcbiAgICAgICAgICAgIFwicG9kcGF0aFwiOiBcIi9ob3N0L29wdC9jbmkvYmluXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaG9zdHBhdGhcIjogXCIvdmFyL2xpYi9rdWJlbGV0L2RldmljZS1wbHVnaW5zXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJkZXZpY2UtcGx1Z2luXCIsXG4gICAgICAgICAgICBcInBvZHBhdGhcIjogXCIvdmFyL2xpYi9rdWJlbGV0L2RldmljZS1wbHVnaW5zXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaG9zdHBhdGhcIjogXCIvZXRjL2lwcm91dGUyL3J0X3RhYmxlc1wiLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicnQtdGFibGVzXCIsXG4gICAgICAgICAgICBcInBvZHBhdGhcIjogXCIvb3B0L3J0X3RhYmxlc1wiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInBvcnRcIjogMTEwMDAsXG4gICAgICAgIFwicmVzb3VyY2VzXCI6IHtcbiAgICAgICAgICBcInJlcXVlc3RzXCI6IHtcbiAgICAgICAgICAgIFwiY3B1XCI6IFwiMTAwbVwiLFxuICAgICAgICAgICAgXCJtZW1vcnlcIjogXCI1ME1pXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic2VjdXJpdHlDb250ZXh0XCI6IHtcbiAgICAgICAgICBcInByaXZpbGVnZWRcIjogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJkZWxldGVSb3V0ZVBhdGhcIjogXCIvZGVsZXRlbDNcIixcbiAgICAgIFwiZ2V0SW50ZXJmYWNlUGF0aFwiOiBcIi9pbnRlcmZhY2VcIixcbiAgICAgIFwiaXBhbVR5cGVcIjogXCJtdWx0aS1uaWMtaXBhbVwiLFxuICAgICAgXCJqb2luUGF0aFwiOiBcIi9qb2luXCIsXG4gICAgICBcImxvZ0xldmVsXCI6IDQsXG4gICAgICBcImxvbmdSZWNvbmNpbGVNaW51dGVzXCI6IDEwLFxuICAgICAgXCJub3JtYWxSZWNvbmNpbGVNaW51dGVzXCI6IDEsXG4gICAgICBcInVyZ2VudFJlY29uY2lsZVNlY29uZHNcIjogNVxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIkRldmljZUNsYXNzXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWhpZ2hzcGVlZFwiLFxuICAgICAgXCJuYW1lc3BhY2VcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLXN5c3RlbVwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJpZHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcIjEwMTlcIixcbiAgICAgICAgICAgIFwiMTAxZFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjE1YjNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcImVmYTBcIixcbiAgICAgICAgICAgIFwiZWZhMVwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjFkMGZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiRGV2aWNlQ2xhc3NcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwibmFtZVwiOiBcImhpZ2hzcGVlZFwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJpZHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcIjEwMTlcIixcbiAgICAgICAgICAgIFwiMTAxZFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjE1YjNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcm9kdWN0c1wiOiBbXG4gICAgICAgICAgICBcImVmYTBcIixcbiAgICAgICAgICAgIFwiZWZhMVwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjFkMGZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiSG9zdEludGVyZmFjZVwiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJhbm5vdGF0aW9uc1wiOiB7XG4gICAgICAgIFwibm90ZVwiOiBcIlRoaXMgcmVzb3VyY2Ugd2lsbCBiZSBhdXRvLWdlbmVyYXRlZCBhbmQgY29udHJvbGxlZCBieSBtdWx0aS1uaWMtY25pLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci5cXG5EbyBub3QgY3JlYXRlL21vZGlmeS5cXG5cIlxuICAgICAgfSxcbiAgICAgIFwibmFtZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3Itbm9kZS0xXCIsXG4gICAgICBcIm5hbWVzcGFjZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3Itc3lzdGVtXCJcbiAgICB9LFxuICAgIFwic3BlY1wiOiB7XG4gICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICBcImludGVyZmFjZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJob3N0SVBcIjogXCIxMC4wLjAuMTY4XCIsXG4gICAgICAgICAgXCJpbnRlcmZhY2VOYW1lXCI6IFwiZXRoMVwiLFxuICAgICAgICAgIFwibmV0QWRkcmVzc1wiOiBcIjEwLjAuMC4wLzE2XCIsXG4gICAgICAgICAgXCJwY2lBZGRyZXNzXCI6IFwiMDAwMDowMDowNC4wXCIsXG4gICAgICAgICAgXCJwcm9kdWN0XCI6IFwiMTAwMFwiLFxuICAgICAgICAgIFwidmVuZG9yXCI6IFwiMWFmNFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjEuMC4xNjhcIixcbiAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgyXCIsXG4gICAgICAgICAgXCJuZXRBZGRyZXNzXCI6IFwiMTAuMS4wLjAvMTZcIixcbiAgICAgICAgICBcInBjaUFkZHJlc3NcIjogXCIwMDAwOjAwOjA1LjBcIixcbiAgICAgICAgICBcInByb2R1Y3RcIjogXCIxMDAwXCIsXG4gICAgICAgICAgXCJ2ZW5kb3JcIjogXCIxYWY0XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiYXBpVmVyc2lvblwiOiBcIm11bHRpbmljLmZtcy5pby92MVwiLFxuICAgIFwia2luZFwiOiBcIkhvc3RJbnRlcmZhY2VcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICBcIm5vdGVcIjogXCJUaGlzIHJlc291cmNlIHdpbGwgYmUgYXV0by1nZW5lcmF0ZWQgYW5kIGNvbnRyb2xsZWQgYnkgbXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIuXFxuRG8gbm90IGNyZWF0ZS9tb2RpZnkuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJub2RlLTFcIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiaG9zdE5hbWVcIjogXCJub2RlLTFcIixcbiAgICAgIFwiaW50ZXJmYWNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImhvc3RJUFwiOiBcIjEwLjAuMC4xNjhcIixcbiAgICAgICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgxXCIsXG4gICAgICAgICAgXCJuZXRBZGRyZXNzXCI6IFwiMTAuMC4wLjAvMTZcIixcbiAgICAgICAgICBcInBjaUFkZHJlc3NcIjogXCIwMDAwOjAwOjA0LjBcIixcbiAgICAgICAgICBcInByb2R1Y3RcIjogXCIxMDAwXCIsXG4gICAgICAgICAgXCJ2ZW5kb3JcIjogXCIxYWY0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaG9zdElQXCI6IFwiMTAuMS4wLjE2OFwiLFxuICAgICAgICAgIFwiaW50ZXJmYWNlTmFtZVwiOiBcImV0aDJcIixcbiAgICAgICAgICBcIm5ldEFkZHJlc3NcIjogXCIxMC4xLjAuMC8xNlwiLFxuICAgICAgICAgIFwicGNpQWRkcmVzc1wiOiBcIjAwMDA6MDA6MDUuMFwiLFxuICAgICAgICAgIFwicHJvZHVjdFwiOiBcIjEwMDBcIixcbiAgICAgICAgICBcInZlbmRvclwiOiBcIjFhZjRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiSVBQb29sXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcImFubm90YXRpb25zXCI6IHtcbiAgICAgICAgXCJub3RlXCI6IFwiVGhpcyByZXNvdXJjZSB3aWxsIGJlIGF1dG8tZ2VuZXJhdGVkIGFuZCBjb250cm9sbGVkIGJ5IG11bHRpLW5pYy1jbmktb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyLlxcbkRvIG5vdCBjcmVhdGUvbW9kaWZ5LlxcblwiXG4gICAgICB9LFxuICAgICAgXCJuYW1lXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1pcHZsYW5sMy0xOTIuMTY4LjAuMC0yNlwiLFxuICAgICAgXCJuYW1lc3BhY2VcIjogXCJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLXN5c3RlbVwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJhbGxvY2F0aW9uc1wiOiBbXSxcbiAgICAgIFwiZXhjbHVkZXNcIjogW10sXG4gICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgxXCIsXG4gICAgICBcIm5ldEF0dGFjaERlZlwiOiBcImlwdmxhbmwzXCIsXG4gICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjAuMC8yNlwiLFxuICAgICAgXCJ2bGFuQ0lEUlwiOiBcIjE5Mi4xNjguMC4wLzE4XCJcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcImFwaVZlcnNpb25cIjogXCJtdWx0aW5pYy5mbXMuaW8vdjFcIixcbiAgICBcImtpbmRcIjogXCJJUFBvb2xcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwiYW5ub3RhdGlvbnNcIjoge1xuICAgICAgICBcIm5vdGVcIjogXCJUaGlzIHJlc291cmNlIHdpbGwgYmUgYXV0by1nZW5lcmF0ZWQgYW5kIGNvbnRyb2xsZWQgYnkgbXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIuXFxuRG8gbm90IGNyZWF0ZS9tb2RpZnkuXFxuXCJcbiAgICAgIH0sXG4gICAgICBcIm5hbWVcIjogXCJpcHZsYW5sMy0xOTIuMTY4LjAuMC0yNlwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJhbGxvY2F0aW9uc1wiOiBbXSxcbiAgICAgIFwiZXhjbHVkZXNcIjogW10sXG4gICAgICBcImhvc3ROYW1lXCI6IFwibm9kZS0xXCIsXG4gICAgICBcImludGVyZmFjZU5hbWVcIjogXCJldGgxXCIsXG4gICAgICBcIm5ldEF0dGFjaERlZlwiOiBcImlwdmxhbmwzXCIsXG4gICAgICBcInBvZENJRFJcIjogXCIxOTIuMTY4LjAuMC8yNlwiLFxuICAgICAgXCJ2bGFuQ0lEUlwiOiBcIjE5Mi4xNjguMC4wLzE4XCJcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcImFwaVZlcnNpb25cIjogXCJtdWx0aW5pYy5mbXMuaW8vdjFcIixcbiAgICBcImtpbmRcIjogXCJNdWx0aU5pY05ldHdvcmtcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwibmFtZVwiOiBcIm11bHRpLW5pYy1jbmktb3BlcmF0b3ItaXB2bGFubDNcIixcbiAgICAgIFwibmFtZXNwYWNlXCI6IFwibXVsdGktbmljLWNuaS1vcGVyYXRvci1zeXN0ZW1cIlxuICAgIH0sXG4gICAgXCJzcGVjXCI6IHtcbiAgICAgIFwiaXBhbVwiOiBcIntcXG4gIFxcXCJ0eXBlXFxcIjogXFxcIm11bHRpLW5pYy1pcGFtXFxcIixcXG4gIFxcXCJob3N0QmxvY2tcXFwiOiA4LCBcXG4gIFxcXCJpbnRlcmZhY2VCbG9ja1xcXCI6IDIsXFxuICBcXFwidmxhbk1vZGVcXFwiOiBcXFwibDNcXFwiXFxufVxcblwiLFxuICAgICAgXCJtdWx0aU5JQ0lQQU1cIjogdHJ1ZSxcbiAgICAgIFwicGx1Z2luXCI6IHtcbiAgICAgICAgXCJhcmdzXCI6IHtcbiAgICAgICAgICBcIm1vZGVcIjogXCJsM1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY25pVmVyc2lvblwiOiBcIjAuMy4wXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImlwdmxhblwiXG4gICAgICB9LFxuICAgICAgXCJzdWJuZXRcIjogXCIxOTIuMTY4LjAuMC8xNlwiXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwibXVsdGluaWMuZm1zLmlvL3YxXCIsXG4gICAgXCJraW5kXCI6IFwiTXVsdGlOaWNOZXR3b3JrXCIsXG4gICAgXCJtZXRhZGF0YVwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJpcHZsYW5sM1wiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJpcGFtXCI6IFwie1xcbiAgXFxcInR5cGVcXFwiOiBcXFwibXVsdGktbmljLWlwYW1cXFwiLFxcbiAgXFxcImhvc3RCbG9ja1xcXCI6IDgsIFxcbiAgXFxcImludGVyZmFjZUJsb2NrXFxcIjogMixcXG4gIFxcXCJ2bGFuTW9kZVxcXCI6IFxcXCJsM1xcXCJcXG59XFxuXCIsXG4gICAgICBcIm11bHRpTklDSVBBTVwiOiB0cnVlLFxuICAgICAgXCJwbHVnaW5cIjoge1xuICAgICAgICBcImFyZ3NcIjoge1xuICAgICAgICAgIFwibW9kZVwiOiBcImwzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjbmlWZXJzaW9uXCI6IFwiMC4zLjBcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiaXB2bGFuXCJcbiAgICAgIH0sXG4gICAgICBcInN1Ym5ldFwiOiBcIjE5Mi4xNjguMC4wLzE2XCJcbiAgICB9XG4gIH1cbl0iLCJjYXBhYmlsaXRpZXMiOiJCYXNpYyBJbnN0YWxsIiwiY2F0ZWdvcmllcyI6Ik5ldHdvcmtpbmciLCJjb250YWluZXJJbWFnZSI6ImdoY3IuaW8vZm91bmRhdGlvbi1tb2RlbC1zdGFjay9tdWx0aS1uaWMtY25pLWNvbnRyb2xsZXI6djEuMi45IiwiY3JlYXRlZEF0IjoiMjAyNS0wOC0yNVQxNDo0MjowMVoiLCJvcGVyYXRvcnMub3BlcmF0b3JmcmFtZXdvcmsuaW8vYnVpbGRlciI6Im9wZXJhdG9yLXNkay12MS40MS4xIiwib3BlcmF0b3JzLm9wZXJhdG9yZnJhbWV3b3JrLmlvL3Byb2plY3RfbGF5b3V0IjoiZ28ua3ViZWJ1aWxkZXIuaW8vdjQifSwibmFtZSI6Im11bHRpLW5pYy1jbmktb3BlcmF0b3IudjEuMi45IiwibmFtZXNwYWNlIjoicGxhY2Vob2xkZXIifSwic3BlYyI6eyJhcGlzZXJ2aWNlZGVmaW5pdGlvbnMiOnt9LCJjdXN0b21yZXNvdXJjZWRlZmluaXRpb25zIjp7Im93bmVkIjpbeyJkZXNjcmlwdGlvbiI6IkNJRFIgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGNpZHJzIEFQSSIsImRpc3BsYXlOYW1lIjoiQ0lEUiIsImtpbmQiOiJDSURSIiwibmFtZSI6ImNpZHJzLm11bHRpbmljLmZtcy5pbyIsInZlcnNpb24iOiJ2MSJ9LHsiZGVzY3JpcHRpb24iOiJDb25maWcgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGNvbmZpZ3MgQVBJIiwiZGlzcGxheU5hbWUiOiJDb25maWciLCJraW5kIjoiQ29uZmlnIiwibmFtZSI6ImNvbmZpZ3MubXVsdGluaWMuZm1zLmlvIiwidmVyc2lvbiI6InYxIn0seyJkZXNjcmlwdGlvbiI6IkRldmljZUNsYXNzIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBkZXZpY2VjbGFzc2VzIEFQSSIsImRpc3BsYXlOYW1lIjoiRGV2aWNlIENsYXNzIiwia2luZCI6IkRldmljZUNsYXNzIiwibmFtZSI6ImRldmljZWNsYXNzZXMubXVsdGluaWMuZm1zLmlvIiwidmVyc2lvbiI6InYxIn0seyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2UgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGhvc3RpbnRlcmZhY2VzIEFQSSIsImRpc3BsYXlOYW1lIjoiSG9zdCBJbnRlcmZhY2UiLCJraW5kIjoiSG9zdEludGVyZmFjZSIsIm5hbWUiOiJob3N0aW50ZXJmYWNlcy5tdWx0aW5pYy5mbXMuaW8iLCJ2ZXJzaW9uIjoidjEifSx7ImRlc2NyaXB0aW9uIjoiSVBQb29sIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBpcHBvb2xzIEFQSSIsImRpc3BsYXlOYW1lIjoiSVBQb29sIiwia2luZCI6IklQUG9vbCIsIm5hbWUiOiJpcHBvb2xzLm11bHRpbmljLmZtcy5pbyIsInZlcnNpb24iOiJ2MSJ9LHsiZGVzY3JpcHRpb24iOiJNdWx0aU5pY05ldHdvcmsgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIG11bHRpbmljbmV0d29ya3MgQVBJIiwiZGlzcGxheU5hbWUiOiJNdWx0aSBOaWMgTmV0d29yayIsImtpbmQiOiJNdWx0aU5pY05ldHdvcmsiLCJuYW1lIjoibXVsdGluaWNuZXR3b3Jrcy5tdWx0aW5pYy5mbXMuaW8iLCJ2ZXJzaW9uIjoidjEifV19LCJkZXNjcmlwdGlvbiI6Ik11bHRpLU5JQyBDTkkgT3BlcmF0b3IgaGVscHMgdG8gYXR0YWNoaW5nIHNlY29uZGFyeSBuZXR3b3JrIGludGVyZmFjZXMgdGhhdCBpcyBsaW5rZWQgdG8gXG5kaWZmZXJlbnQgbmV0d29yayBpbnRlcmZhY2VzIG9uIGhvc3QgKE5JQykgdG8gcG9kIHByb3ZpZGVzIGJlbmVmaXRzIG9mIG5ldHdvcmsgc2VnbWVudGF0aW9uIFxuYW5kIHRvcC11cCBuZXR3b3JrIGJhbmR3aWR0aCBpbiB0aGUgY29udGFpbmVyaXphdGlvbiBzeXN0ZW0uXG5cbk11bHRpLU5JQyBDTkkgaXMgdGhlIENOSSBwbHVnaW4gb3BlcmF0aW5nIG9uIHRvcCBvZiBNdWx0dXMgQ05JLiBcbkhvd2V2ZXIsIGluc3RlYWQgb2YgZGVmaW5pbmcgYW5kIGhhbmRsaW5nIGVhY2ggc2Vjb25kYXJ5IG5ldHdvcmsgaW50ZXJmYWNlIG9uZSBieSBvbmUsIFxudGhpcyBDTkkgYXV0b21hdGljYWxseSBkaXNjb3ZlcnMgYWxsIGF2YWlsYWJsZSBzZWNvbmRhcnkgaW50ZXJmYWNlcyBhbmQgaGFuZGxlcyB0aGVtIGFzIGEgTklDIHBvb2wuIFxuV2l0aCB0aGlzIG1hbm5lciwgaXQgY2FuIHByb3ZpZGUgdGhlIGZvbGxvd2luZyBiZW5lZml0cy5cblxuaSkgQ29tbW9uIHNlY29uZGFyeSBuZXR3b3JrIGRlZmluaXRpb246IFVzZXIgY2FuIG1hbmFnZSBvbmx5IG9uZSBuZXR3b3JrIGRlZmluaXRpb24gZm9yIFxuICAgbXVsdGlwbGUgc2Vjb25kYXJ5IGludGVyZmFjZXMgd2l0aCBhIGNvbW1vbiBDTkkgbWFpbiBwbHVnaW4gc3VjaCBhcyBpcHZsYW4sIG1hY3ZsYW4sIGFuZCBzci1pb3YuXG5cbmlpKSBDb21tb24gTkFULWJ5cGFzc2luZyBuZXR3b3JrIHNvbHV0aW9uOiBBbGwgc2Vjb25kYXJ5IE5JQ3Mgb24gZWFjaCBob3N0IGNhbiBiZSBhc3NpZ25lZCBcbiAgICB3aXRoIG5vbi1jb25mbGljdCBDSURSIGFuZCBub24tY29uZmxpY3QgTDMgcm91dGluZyBjb25maWd1cmF0aW9uIHRoYXQgY2FuIG9taXQgYW4gb3ZlcmxheSBuZXR3b3JraW5nIG92ZXJoZWFkLiBcbiAgICBQYXJ0aWN1bGFyeWx5LCB0aGUgQ05JIGlzIGJ1aWx0LWluIHdpdGggTDMgSVBWTEFOIHNvbHV0aW9uIGNvbXBvc2luZyBvZiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uYWxpdGllcy5cblxuICAgIDEuIEludGVyZmFjZS1ob3N0LWRldmlzaW9uIENJRFIgQ29tcHV0YXRpb246IGNvbXB1dGUgYWxsb2NhdGluZyBDSURSIHJhbmdlIGZvciBlYWNoIGhvc3QgYW5kIGVhY2ggaW50ZXJmYWNlIFxuICAgICAgIGZyb20gYSBzaW5nbGUgZ2xvYmFsIHN1Ym5ldCB3aXRoIHRoZSBudW1iZXIgb2YgYml0cyBmb3IgaG9zdHMgYW5kIGZvciBpbnRlcmZhY2UuXG4gICAgMi4gTDMgSG9zdCBSb3V0ZSBDb25maWd1cmF0aW9uOiBjb25maWd1cmUgTDMgcm91dGVzIChuZXh0IGhvcCB2aWEgZGV2KSBpbiBob3N0IHJvdXRlIHRhYmxlIGFjY29yZGluZyB0byB0aGUgY29tcHV0ZWQgQ0lEUi5cbiAgICAzLiBEaXN0cmlidXRlZCBJUCBBbGxvY2F0aW9uIE1hbmFnZW1lbnQ6IG1hbmFnZSBJUCBhbGxvY2F0aW9uL2RlYWxsb2NhdGlvbiBkaXN0cmlidXRlZGx5IHZpYSB0aGUgY29tbXVuaWNhdGlvbiBcbiAgICAgICBiZXR3ZWVuIENOSSBwcm9ncmFtIGFuZCBkYWVtb24gYXQgZWFjaCBob3N0LlxuXG5paWkpIFBvbGljeS1iYXNlZCBzZWNvbmRhcnkgbmV0d29yayBhdHRhY2htZW50OiBJbnN0ZWFkIG9mIHN0YXRpY2FsbHkgc2V0IHRoZSBkZXNpcmVkIFxuICAgICBob3N0J3MgbWFzdGVyIGludGVyZmFjZSBuYW1lIG9uZSBieSBvbmUsIHVzZXIgY2FuIGRlZmluZSBhIHBvbGljeSBvbiBhdHRhY2hpbmcgbXVsdGlwbGUgc2Vjb25kYXJ5IG5ldHdvcmsgXG4gICAgIGludGVyZmFjZXMgc3VjaCBhcyBzcGVjaWZ5aW5nIG9ubHkgdGhlIG51bWJlciBvZiBkZXNpcmVkIGludGVyZmFjZXMsIGZpbHRlcmluZyBvbmx5IGhpZ2hzcGVlZCBOSUNzLlxuXG4jIyBJbnN0cnVjdGlvbnNcblxuUGxlYXNlIGNoZWNrIHRoZSBbVXNlciBHdWlkZV0oaHR0cHM6Ly9mb3VuZGF0aW9uLW1vZGVsLXN0YWNrLmdpdGh1Yi5pby9tdWx0aS1uaWMtY25pL3VzZXJfZ3VpZGUvKSIsImRpc3BsYXlOYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvciIsImljb24iOlt7ImJhc2U2NGRhdGEiOiJpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBRjBBQUFCU0NBWUFBQUEySjlnV0FBQUFBWE5TUjBJQXJzNGM2UUFBQUlSbFdFbG1UVTBBS2dBQUFBZ0FCUUVTQUFNQUFBQUJBQUVBQUFFYUFBVUFBQUFCQUFBQVNnRWJBQVVBQUFBQkFBQUFVZ0VvQUFNQUFBQUJBQUlBQUlkcEFBUUFBQUFCQUFBQVdnQUFBQUFBQUFCSUFBQUFBUUFBQUVnQUFBQUJBQU9nQVFBREFBQUFBUUFCQUFDZ0FnQUVBQUFBQVFBQUFGMmdBd0FFQUFBQUFRQUFBRklBQUFBQXFxVFJQZ0FBQUFsd1NGbHpBQUFMRXdBQUN4TUJBSnFjR0FBQUVpNUpSRUZVZUFIdG5BdThWRlc5eDlmYWUrYk1TeU9GMUp1cGdFZ3BtTStQWVgzeWdXYUoxZjJrbVpXUHlFOGtxZmVXaFNTWUdSL2ZtWnBKVnpPVmgxbjRvcnFJcnl1Z1FtVG1JODFVVEx5S1VBU0NHSnpaTTJkbTl1cjczelA3c0dmT2c5bkQzZ2Z5TSt2RFpxKzk5bnI4MTIvLzEvKzExaHlsMnFtTlFCdUJOZ0p0Qk5vSXRCRm9JOUJHb0kxQUc0RTJBbTBFQmdTQlREYWJucGJKcGwvbEttUnk2VmZTMmZSRmpKd2FrTkczdzBGMHpEUmxNdG5NUXEzVm1NWnhqREtQTzUyRjR5Z3ZOcjRid0dlZHpxVlBBNFR4eXFoaGpQczNaY3lkamxPOGlYeHBBT21JYmlqaDhHd3VZK0R3TjlMcDlGaDZUcWR5cWVQNEVLdWtuQWxQaVc2MDBEM3BUQ1k5Vytob3ZGaU5DK2d0dHBVWUs2Y0Q5bkt0OVhDM1lvNHBGQW9MZlZoUzJkUUp0cmJ1TTBhdDFNck05c3ZEM2MyS2ZMNzRzM0J0TnRmbWc0KzNsSjdCaXR1b2pacmt1dW9SYUQyVVZYbTkwbW8zT0g1YVBsLzR3ZVlXMGVYaUJyM0FSRkw1VGljTHlVNkE3SjNncnZXQjU1YXlsYkw3b1dLeHVDeVZTbjNRdHRXeGZNU201Nk10UFZFcFBjbzE1bXVGZk9GV253Qlc1REdXclI4eHhyenA1QXQ3K3VWUjNoTlJkdGFqTDYxV1VMWVBJdVdJWW1meElmOTlOdHR4cE9TWjJCdEdxWnY5OG1idmx0YmZwTzR1dE8rUU5vQjBxOUw2WTNCcDZLU05mampZU0ZZa0s3UUNzK3hCdWVCVERyNlBJaDhyNkhEZWJJQzR4RGJXakd3MmRSYmlZR2ttMDNHRTByWW9LbERYTnhRYzU1cXdFOG5tMGwrR1MzZngyMm1sYzE1M3l0eEZuMnY5OGkzYy94UGFQcUIxNVdEcXZlblhUZWFTSDZZL20rZTN1Q0lIM0IrbnBUdEwraE1veE4rSUNjajlTY3pBNzlIUkRnMmRwWGkvcUZGUmVjL1p0SEIrc3FGK1U0K0Evb0wwMGRIUnNiODB5R1l6ejhwek1wc1VBSnRLbVZ4bWtyU0I5cFdJbENPa2tmVG45MDM1OUtZNkdxaEtBRHpWQTY2SDVrLy9CUnFHTk5EUndRUW5VLzg1cnJjRW9Fd204MjNxdEx6S2ZHQzJCblRHVHlGR0Z2dnpJTi9WbmMrbFgrYjl6ZzN6MkhhUG1VeHlqQkFIa1dYQXYxaVVHREw3VTNEMHkxNTVMdjJydUttTENIUWhVeHkzeTJDRXY5VUFYd2VILzVUeVdBRVB6VzFhMjJkNm9HcHpmYUd6T00zTEY5VXlsdWc0WlJuaGtNOGp2NWR3ZDcxM0VmMVhVZXIxWXI3NFFFVGQrZDA0bUlVWDhpQ1hLT1V1LzBYd3p0eUdLVXVkZ1E3WUIxMnlocG5kNnpqTzc0SjF3dVJEZzI2MEdpNUdnbHRXRHdZSFF1dS9CZ2YrRmFMMjQ0cGNIb3BtUXl6dHlXUzdsVjV3L0FqeXZRT2VTNStPSFg4TDFveG5LWG5qV09vOFZ2bE5tSnBuODR3QkZpNkZCcDN1VjhzUVZzSTZDQWYrL3dMRDdZUzFzcGNZZ255VW44UG1rWEU2SnVLWEdHZFFwVkx4ckpUQW1MRm1SVEVEK0cwQW5zQ0p1Z3QwNzlPdUdvVTM4QzFvbXBqSnBKWVJNdmh4V0NKQ2c2NE5acG5XcDRMdFJaaC9mM1djcnQ5a011cjkya3JQaE1OekVMY3czMWs0S3l3aC9kVkhYNHpGakJ2VVg1M0dkOUMwZTFrbmQyMHNEL09jVUludklWSVNNTk9OT0VyQzFWNWkzazloVmQ2dHRQVWRDdUlISFZ2N2Z3SGhEcjcrcVF3OEY0VmFaR0NXSHVRcHRkNHRtMjdpUEFxM3pYKzdLcDFlbnNRYmptSjRyY3JkSHF2MEI2UGRnK0o5Uit4OEhnZHpyWlB5WmxPZm5DNVdpV1dwNDQzV2c3UngvOEpBOCtoVUFGWkVCODlBdmo2anREa1g4SWZoR1RxeTlFekZYSUJiL2xxemc4ZFZEMVB5ZmRDVmdxNENLK1NsbHNmUlptK1k2VDBWWlhVN1lyVytkcVR2REhrUm9jSHdSbE5EOVFhNnp1UlNWK1BablFmaGxyQ3ZPR2h3OVArWGRlVnpwYzdTYzVTNEtMUnJ1Y3VWNXBLUEVWcWgwQ2JXQkNlK1J0eW5hWWVwa1JoeCtBRGdFbHZySDZxcytwUEtxNzlUUnh5K0cvbVlIWWpTUjNuT043YmIwbk1QMEhGa3pnZm83OUJoQmJrOWl3NVdvRGcrendmWU4ya1NENVpVQ2V0RXZSM291QkRJdjZ1eVdDYy9nZG0rd3R4SFoxVDZGWlZUejhDTUk4RG4vZFZWVkpuVXlvUWJRVS9TNFJTdkkrTitJZTkwemExMWVobE93Nk53emhpKy9uOUJ6UFd0REJhaWpaaHZvWmR0aVA2YnJmcFByUXBIS3BNV2svRjRHaEUza3FibUpjQ2ZrSGRLVHpmYlViQmVIZWpJd2cveDhyMXcrU3ZJY0I5d3FWOUVlRnpIZ0hkaUtzbkd4TFJnSjFIbjRTSkkwRjlDaE4wWmRkOTk5WWNPRzJsWjF2c2M3YnhXRXlOZTFYeWUzU1JWR0ljMTlBRmowaU5jMTEzVDFkWDFZbC85TkZOZUJ6b05jUHhJeHZQT3ZLei9IemgwSU1ja0hGdUM0MlBqUXVCT3dWVllIZWJEakIwNzZCTFcwRmJpWnNieWdtZnNaeG1WMWZjQi90ZFZaOVVuRVF3Y1I2MEVmSzZ0VDNXZzh3VmZUaVF5cTVuMFVGejVjekFQSlE0aGFTZkxWbE85bkRHVEtQK0psNC9oUDFGZXJPQkxZdWk2UjVjNFB3Y3BaUy9raFZnaS80Q2hsbk0vRUtiNkRETDhNVWNWRHVWNUkxZWt5V3JvalYwckkzRUlMQlpyT2xwNkFRR2htWWdUekM2OUwwUzlpZ2QyUzBPYmY5dkhoTGF2aHNFeXlMSTVXRGxEY1lBK3BreGhKS3ZzUlZiMVNCamd2K09ZWEIybnl3QW95ZHR3YjNmRTE3a2Nnc1pXRlFka0dQVUg0NnBUcU9LYlNKYkVvUzNMN0dlTTlUYnk5eEhlTmJ1QklFTU5aTExZaEo3Sm5FUm5iVTdHSEFMZ0pjQ2VTS0ZuaFNGR1ZxV3k1bnpNeFBtc3VIR1VYN2E1UVRTNUhxQkx0M0N6V0NlMzQrNGViYlNGYzFUQk9Tcjl3UjlTbEk2ZHNPN21HYmtMVDBBZHBwWERsN21RdHRmNTliYWJlMWJ0Q2dPZDNwTWVDSytLajNlQzcxemxycllKSzlLbWNWTW1XSzNsZksrZzEzcGJqd1Z6Ynk4OUQ1S05XOHIzUU55OGlVYzBIeGsxREFJL0NaWFhzc3YrZHFHek1MT1hkdHVzQ1BrQmd0N3c2NHhiRnU2dEpwMllDOFBzRG5PZEdMVFdpTGw4VlNxd0NwNnYxWXowMWgvb3ZRNkU4elFSK3ZlQW9tZFlsa2RSeVZNMG9uaEZEN0RSSzh0eEZ0ZDI0NkVDYkpVV28wcXMyQ2VoelV1WmpIVU5ORi9MZFFlNjZ4cmlveSt3Si9CcDVuY3FERlhScWhLTFB4SWFkS0tNT0FoaU9sYXVnUEp1elM2V0RnN1VGSTl6T0Q1WG0xZFROMVpKbnJNeG55VW12N2lwQmhGVmtyQXNZTy9IK0Yranl3dWhuVlExaTRsUG4rVjBscDZLYUtpNmJrS0Q3bEZWN2FKcTA5ZDFSK2pBay9HQmdIL2QrejRmT3BqNFlieU5CWFNNQUxydmRXekR6dEVFRElKZkVHVTZpUURlTHNUUFg0VUJaaEs0ZTlWdklYdXhkdEkrazNjaldNQnJpWS9jeXk3V2ZQOTkySHRvMEFtckxVV0dIOCtTUEovQkh1RHl1QnBaZmdZcWRVK2UxMkIrRGVQZXkwZWh0Q0Vocm40SUhyR1ladjVRc2pEOWZHOTNWdGhqbE12Vkl5RTJ6K2FiM1FDTk5iMmdsYTMwVnpHbjV4QnRQWTBHVGMwejJIR2puUjU4MTJzZWsvSkdYdndEMWptY2daL0R2THdLNE82Q0MyWjZEWXc3amJ1WWxSSjViT1lLVGJRM1Rvai9oTk5EVk8rdVN2ajZjQUdjQXBFNU55dmpmcGF2TndWNXZ3a0creUtNTnJtN2NvaE1hRTZuNzNVbFZmNWt3dGozQXZ4SVpXbHZZSWdwYzBUdDBrSysrRDhoeHFlcVM5UFEzejdVRU4yY3JsVUhvbVJzczQyMU5wTVFUSlpSN2pYNXpxSWZVWnpIV2N6bjRmYjVsdEd5UXEvazZuY2xOWTdYQ3VoS1l1b1M0dVY0SEpzYzlyNXNjbXd3cm42QVpmcUdQd0J5Y0pTZHRDNkFuSTlTNXNKcWl5c1Zjd1d5a3MzcllLcUc3SU1sVWVkWmRpWmI3WFJuek4wRllmc3ZHL2VPWUJ2aytmMTQ2UnZnLzkwb0g4d2xwOEdhVGkyQlh1dTlLNS92K2kxNXVlcVNuSU9CQzM3TkVrd0hGdllJNGpjbncya244SEVlMzl3Z2ZrNUgySzBHOVJ0UmxQVWU2V1lpZXMxQnZ3VEJoaVRSVlNXbG5nMVUyaGtSSTV2a0lobzNCY3FieW00TjZIME5zQ1BlM08yQVRiak8zRkVwdVdLMzIzYkNub1k0T2hGSjhrdWVSM0RWek1yNE9aMnhqSk4zenVZZUtxR3JKck5DcjhLMytoRmUrQXVzMHVWMHNBT204YTJJckNSeS9pR2VRNW5IUWtEa29LTjhQa08vUXlSV2cvTjBPdm1xdk90U3AzQXU1bG1BSHczUlAwSXB5UVRrTmR0cExlbTVhdk1ZLzNjNm5lbUlrZE9nZVg5VzZZdWNCSHNKVXZkaXlQZUtNdVdvdGkvblExRVJPZWhHbTZFc1M3QTBpNkFrcUdES2VIeVB3U0dqdWNSN2JTRFVaUVZ2ZHltUCtYc1VWdHAwS0R1WmFSMGdGTUpRVDdCZi9JMVNWK21GR3NVRTFEbyt4MTd5MFpnNUhaalZUMkxsaVI1d2F1L3JicEdERG1HeWVTdVlIbG8zVXZYaEVMbEI5RnpxcmZEZjQrVVNwQ3pXS1N2LzNYWndYNDg5L21Yb09KdGoxRU1UYm1tdFJDSURkTzFNc084K1ZzUGgxVEl0dHRnRXlxYXlFc2JKSGtXZ3JwZU5ISFNDWGZNWWNCTkVIRXM0OVFySEtZaE10eEFwbDhMaFk4aXZSNzZPNTk0ZFFpRC83NUEyWUxYOXFYRTVJbkptd1VDSHM2WlhFenE0RmtzdWo1azVrZm1QSmhJN2o5T1JvNWhjVjNDQ2tZTk81Mjh4K0Rtdzh3eGM2d3Y0QU4rRkFFOW9TeEFKV2Y1MTZnd0k0S3lvRkticjZPQ0VvOHpyQkwvVzBPclRHQXdiMmRQOUNNemtyOTdiRUVtaXZ6NklqaU9DNmN3Smpoc0g2QXB1bjQxcHVFclo1bUlHR3dQWTRoTXVnYkNMQ2FFdUNSSVFVOTdUSlV4NjcwVFMvbk5NWXdTNjFROENyQSs0bER2TStCZXdHdHVPNWtDZUl3TzlBK2Rvbkt1dGZTMWpOcmhWNStoMUdWRVN0dmdDYm5MNXBrbFFxVXFWMkJKeWRIa2lrYjZma2ZlS2JSQTZCdGdjSDNZb3VjR040MUR1bGJIcThjM3FVMHVjamtJNWdEQUF5bEFQUjJrQUsvYUtaY3FFU1M4bmFpZmNIVXdEQm5aZzBBSjBuQkI0amlzclNuUWxBSThsRG5NNksveDJHVWhPR1BCRnp2SndNWldIR3dmM01Hc3MzTUx6NEtSS1BNUkF3NUZseTR4cmNCNk1ISlVnSEtHLzcyMW1iS0dEZDlIcjljeDVtc3lIRU9Sc2xPclRmSVRGbUk1THdFYzJ2SC9GcHNrVGpmTU56ZW5za0l0bnR5dGllaW5PejFqeUVrbFVmR25aeUowTnkzK2Z4NWxjbUt2aEUxeVFETjhxL2hib0tCRlZjdGhvTGVKTDlJUzNnbkdncmlMUzJrWGdieHBBSHl3K0N0aVVlRGtkVTlNTEJqWlNGeHAwUUpFQUZsMjdWM1B6QUpkbldWcDhaY3hDdlNkZTNDWXBlemNrT2VmTzJmc1p6UGdUTWgrTFh3bmJ5ZlFyMkdFVC9CaFNiVFArSml5VlF3QzhnM0tKMDd6ZDEveERnODdnRmVrTUpkSkxXKy8zbC9LbDVXTjRuTkRYd1AyVm95SzZzQzJYOWxkbmdONE5JbWIzR0hQZW0rbjhrd2s5eGF6MmdiRUlhWnVIczlua3gvUDUwaDlydEdEQU9FdWFvYXNYNFBwdmhqWitIREZ5QWovNG1rck5oN2cyU2d1V0dHZlYxZTU4akZXSW5UMG9haGwwNlc5N1NJalNid0l3Z0tzLzV4Vi9zYU42ekE2ckxmMXp5czh3eW1hMWw0NEtTMnRvMEpGaFAwT01uTU9nQitGbGNoTEszTStnUTFFb3g4bmd4RjR1bEp2a0J6cHhZbXRPTXBmb05kN1JDaTBvd21IU3JxTGN5WUZ6allTMEMrZUN3UmQ1ZFFTWGhPcDdtSVdVOVpsQ2cwNVA3N0J4ZTZ4dDY3dmhiQUpBV2p4TUVTbHkyR2hxd1NuTzZuTzBtRjd3aFZldytnNUVpZTBUNVJDaUZDWFp4bTNjcE5nSTA4bkg3ZUNTYzVDeGc2NXF1ejhIbzlFL3pyRTZ6amhhRzRpeHlBR2tSdUlvVWtPb042cGlWVGFXOHQ2dk9EeWRJQytpU3JqZnArRHVqelJKaEYrRUtXRVNGOEZZSndIN0JNVElVMzdYS013dmtCOEVvNzNKZloxZnZqM2NkMEQyeldRWlZyQm1xbi9JaGw4bVEvREpZWWtqanJGTStnQlliK2VuOFJmVFlmdHJ0ajVPNElIUVg1S3hFYVgzWUJhUGw1OEdVVmIweWpLcGxrNHh0Q0plbXFIWkFxaDVpSjZqRURsZGNNU1RyRlE1VDRqbVYzY1JlejZaR013OXpYUVVZeDNOQ2p4YTIvcGc1Ym9GOW04WFlIKy9GQnhQb29xSlRPSXJ5SGI1TGVsSmlCdTRuc1hFUHd5R24ySXEzaENzdjAzendzMDE3bDREZCs1WEkwYkQrYlUvTDVWWlNWblQzbkRVbkM2Mk41ejdSSTFHYnhYQ3ZTNzAzUXhkUFp3emNZemszTHkzY29YVHhjM2ZpaFFMcDNOMDRWUENEc1oxcjRCN1hxelJKNmVwZnNEa1pQdHJPQ0xpZVV5ZHh2QjByMU5ocGV3bDNCVlJTdUNoejZlL0E3Q3hKQVkraDAyVVFmVE43MkwxQlBaRk83SFF6Z3VPaGJQekJzK1hCc3UySmg4TDZFd2tKeGl4UGJlbWdUZ01EUzNLZGpoMytibDNVNm5tV2hmNGdIV0syaVJNa3UwQnNTQ2FUcXhDanMrcEEvaVFLL0FuNU9lT25pS0VtMmZnOEN6aStWeXV5N25XY3NXUzRnSGRxT2VSM2FmZ241NEoxYi9rOHV6MjZzOU5PSWh2K0l0QlJoOVoxdVdtYldyTzJheW1uenJRa3pyeE5IWjVhOEJvTFQvdDZiWTg0T2JGaUxGSCtjREhjSmpvc0swNXE3Z2xnbHFrdVA5dTJaUzlCWG5KNzFIMVdDYXlDTVJuMFdJM0luR1R1ZHVjQkx1SlB5TzF0UDllK243TENucVU3eWcyZVpOcnBhNHZmbVFocDdhTVhWZGFmZkRMUENicDVmMzJYY1J5UFJMZzF3ZVZsWmZQc3JsUWRTaTJ5UVRrQndCQ0I0cDBGYjdrZi9oRVZQOWVaTm9WYzVDeXdYNTVIUGRXT0NVTUhVTlFUT05SVlB1elg3ZUpuNVhjSCtleWJaSXcyU1QvUGVMdk1PcXZSL0hNbGI5L3dQMUVWZ0RPcDdrU1IyOUtrMzIxcTRWQVlCZkUzc0xnS29URHl6RElkZlRoaTVnUTNZV3JHamVuaDZObWdHdGpieCtHZUQvRTFicEFWR3NSeXZUMUFTYWhQVndiZ1RZQ2JRVGFDTFFSYUNQUVJxQ05RQnVCTmdKdEJOb0l0QkZvSS9EdVJ1QmZLZVZuUzdVNVp4QUFBQUFBU1VWT1JLNUNZSUk9IiwibWVkaWF0eXBlIjoiaW1hZ2UvcG5nIn1dLCJpbnN0YWxsIjp7InNwZWMiOnsiY2x1c3RlclBlcm1pc3Npb25zIjpbeyJydWxlcyI6W3siYXBpR3JvdXBzIjpbIm11bHRpbmljLmZtcy5pbyJdLCJyZXNvdXJjZXMiOlsiY2lkcnMiLCJjb25maWdzIiwiaG9zdGludGVyZmFjZXMiLCJpcHBvb2xzIiwibXVsdGluaWNuZXR3b3JrcyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0IiwicGF0Y2giLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJtdWx0aW5pYy5mbXMuaW8iXSwicmVzb3VyY2VzIjpbImNpZHJzL2ZpbmFsaXplcnMiLCJob3N0aW50ZXJmYWNlcy9maW5hbGl6ZXJzIiwiaXBwb29scy9maW5hbGl6ZXJzIiwibXVsdGluaWNuZXR3b3Jrcy9maW5hbGl6ZXJzIl0sInZlcmJzIjpbInVwZGF0ZSJdfSx7ImFwaUdyb3VwcyI6WyJtdWx0aW5pYy5mbXMuaW8iXSwicmVzb3VyY2VzIjpbImNpZHJzL3N0YXR1cyIsImNvbmZpZ3Mvc3RhdHVzIiwiaG9zdGludGVyZmFjZXMvc3RhdHVzIiwiaXBwb29scy9zdGF0dXMiLCJtdWx0aW5pY25ldHdvcmtzL3N0YXR1cyJdLCJ2ZXJicyI6WyJnZXQiLCJwYXRjaCIsInVwZGF0ZSJdfSx7ImFwaUdyb3VwcyI6WyJtZWxsYW5veC5jb20iXSwicmVzb3VyY2VzIjpbImhvc3RkZXZpY2VuZXR3b3JrcyIsIm5pY2NsdXN0ZXJwb2xpY2llcyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0Iiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJwb2RzIiwibm9kZXMiLCJuYW1lc3BhY2VzIl0sInZlcmJzIjpbImdldCIsIndhdGNoIiwibGlzdCIsInBhdGNoIl19LHsiYXBpR3JvdXBzIjpbImFwcHMiXSwicmVzb3VyY2VzIjpbImRhZW1vbnNldHMiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiazhzLmNuaS5jbmNmLmlvIl0sInJlc291cmNlcyI6WyJuZXR3b3JrLWF0dGFjaG1lbnQtZGVmaW5pdGlvbnMiXSwidmVyYnMiOlsiY3JlYXRlIiwidXBkYXRlIiwiZ2V0Iiwid2F0Y2giLCJsaXN0IiwiZGVsZXRlIl19LHsiYXBpR3JvdXBzIjpbInNlY3VyaXR5Lm9wZW5zaGlmdC5pbyJdLCJyZXNvdXJjZU5hbWVzIjpbInByaXZpbGVnZWQiXSwicmVzb3VyY2VzIjpbInNlY3VyaXR5Y29udGV4dGNvbnN0cmFpbnRzIl0sInZlcmJzIjpbInVzZSJdfSx7ImFwaUdyb3VwcyI6WyJzcmlvdm5ldHdvcmsub3BlbnNoaWZ0LmlvIl0sInJlc291cmNlcyI6WyJzcmlvdm5ldHdvcmtub2Rlc3RhdGVzIl0sInZlcmJzIjpbImdldCIsImxpc3QiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJzcmlvdm5ldHdvcmsub3BlbnNoaWZ0LmlvIl0sInJlc291cmNlcyI6WyJzcmlvdm5ldHdvcmtub2RlcG9saWNpZXMiLCJzcmlvdmlibmV0d29ya3MiLCJzcmlvdm5ldHdvcmtzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJ3YXRjaCJdfV0sInNlcnZpY2VBY2NvdW50TmFtZSI6Im11bHRpLW5pYy1jbmktb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyIn1dLCJkZXBsb3ltZW50cyI6W3sibGFiZWwiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIiLCJzcGVjIjp7InJlcGxpY2FzIjoxLCJzZWxlY3RvciI6eyJtYXRjaExhYmVscyI6eyJjb250cm9sLXBsYW5lIjoiY29udHJvbGxlci1tYW5hZ2VyIn19LCJzdHJhdGVneSI6eyJ0eXBlIjoiUmVjcmVhdGUifSwidGVtcGxhdGUiOnsibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsia3ViZWN0bC5rdWJlcm5ldGVzLmlvL2RlZmF1bHQtY29udGFpbmVyIjoibWFuYWdlciJ9LCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3BlYyI6eyJjb250YWluZXJzIjpbeyJhcmdzIjpbIi0temFwLWxvZy1sZXZlbD00IiwiLS16YXAtdGltZS1lbmNvZGluZz1pc284NjAxIiwiLS1tZXRyaWNzLXNlY3VyZSIsIi0taGVhbHRoLXByb2JlLWJpbmQtYWRkcmVzcz06ODA4MyIsIi0tbWV0cmljcy1iaW5kLWFkZHJlc3M9Ojg0NDMiLCItLWxlYWRlci1lbGVjdCJdLCJjb21tYW5kIjpbIi9tYW5hZ2VyIl0sImVudiI6W3sibmFtZSI6Ik9QRVJBVE9SX05BTUVTUEFDRSIsInZhbHVlRnJvbSI6eyJmaWVsZFJlZiI6eyJmaWVsZFBhdGgiOiJtZXRhZGF0YS5uYW1lc3BhY2UifX19LHsibmFtZSI6IlBPRF9OQU1FIiwidmFsdWVGcm9tIjp7ImZpZWxkUmVmIjp7ImZpZWxkUGF0aCI6Im1ldGFkYXRhLm5hbWUifX19XSwiaW1hZ2UiOiJnaGNyLmlvL2ZvdW5kYXRpb24tbW9kZWwtc3RhY2svbXVsdGktbmljLWNuaS1jb250cm9sbGVyOnYxLjIuOSIsImltYWdlUHVsbFBvbGljeSI6IkFsd2F5cyIsImxpdmVuZXNzUHJvYmUiOnsiaHR0cEdldCI6eyJwYXRoIjoiL2hlYWx0aHoiLCJwb3J0Ijo4MDgzfSwiaW5pdGlhbERlbGF5U2Vjb25kcyI6MTUsInBlcmlvZFNlY29uZHMiOjIwfSwibmFtZSI6Im1hbmFnZXIiLCJyZWFkaW5lc3NQcm9iZSI6eyJodHRwR2V0Ijp7InBhdGgiOiIvcmVhZHl6IiwicG9ydCI6ODA4M30sImluaXRpYWxEZWxheVNlY29uZHMiOjUsInBlcmlvZFNlY29uZHMiOjEwfSwicmVzb3VyY2VzIjp7ImxpbWl0cyI6eyJjcHUiOiIxMDBtIiwibWVtb3J5IjoiNTAwTWkifSwicmVxdWVzdHMiOnsiY3B1IjoiMTAwbSIsIm1lbW9yeSI6IjUwME1pIn19LCJzZWN1cml0eUNvbnRleHQiOnsiYWxsb3dQcml2aWxlZ2VFc2NhbGF0aW9uIjpmYWxzZX19XSwiaG9zdE5ldHdvcmsiOnRydWUsInByaW9yaXR5Q2xhc3NOYW1lIjoic3lzdGVtLWNsdXN0ZXItY3JpdGljYWwiLCJzZWN1cml0eUNvbnRleHQiOnsicnVuQXNOb25Sb290Ijp0cnVlfSwic2VydmljZUFjY291bnROYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIiLCJ0ZXJtaW5hdGlvbkdyYWNlUGVyaW9kU2Vjb25kcyI6MTB9fX19XSwicGVybWlzc2lvbnMiOlt7InJ1bGVzIjpbeyJhcGlHcm91cHMiOlsiIiwiY29vcmRpbmF0aW9uLms4cy5pbyJdLCJyZXNvdXJjZXMiOlsiY29uZmlnbWFwcyIsImxlYXNlcyJdLCJ2ZXJicyI6WyJnZXQiLCJsaXN0Iiwid2F0Y2giLCJjcmVhdGUiLCJ1cGRhdGUiLCJwYXRjaCIsImRlbGV0ZSJdfSx7ImFwaUdyb3VwcyI6WyIiXSwicmVzb3VyY2VzIjpbImV2ZW50cyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJwYXRjaCJdfV0sInNlcnZpY2VBY2NvdW50TmFtZSI6Im11bHRpLW5pYy1jbmktb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyIn1dfSwic3RyYXRlZ3kiOiJkZXBsb3ltZW50In0sImluc3RhbGxNb2RlcyI6W3sic3VwcG9ydGVkIjp0cnVlLCJ0eXBlIjoiT3duTmFtZXNwYWNlIn0seyJzdXBwb3J0ZWQiOnRydWUsInR5cGUiOiJTaW5nbGVOYW1lc3BhY2UifSx7InN1cHBvcnRlZCI6ZmFsc2UsInR5cGUiOiJNdWx0aU5hbWVzcGFjZSJ9LHsic3VwcG9ydGVkIjp0cnVlLCJ0eXBlIjoiQWxsTmFtZXNwYWNlcyJ9XSwia2V5d29yZHMiOlsibXVsdGktbmljIiwiY25pIiwibmV0d29yayJdLCJsaW5rcyI6W3sibmFtZSI6Ik11bHRpLU5JQyBDTkkgT3BlcmF0b3IiLCJ1cmwiOiJodHRwczovL2dpdGh1Yi5jb20vZm91bmRhdGlvbi1tb2RlbC1zdGFjay9tdWx0aS1uaWMtY25pIn1dLCJtYWludGFpbmVycyI6W3siZW1haWwiOiJzdW55YW5hbi5jaG9vY2hvdGthZXcxQGlibS5jb20iLCJuYW1lIjoiU3VueWFuYW4gQ2hvb2Nob3RrYWV3In0seyJlbWFpbCI6ImNoaWJhQGpwLmlibS5jb20iLCJuYW1lIjoiVGF0c3VoaXJvIENoaWJhIn0seyJlbWFpbCI6Im1pbnpoYW5nQHJlZGhhdC5jb20iLCJuYW1lIjoiTWluIFpoYW5nIn0seyJlbWFpbCI6ImViZW5kcm9yQHJlZGhhdC5jb20iLCJuYW1lIjoiRXJhbiBCZW4gRHJvciJ9XSwibWF0dXJpdHkiOiJhbHBoYSIsInByb3ZpZGVyIjp7Im5hbWUiOiJGb3VuZGF0aW9uIE1vZGVsIFN0YWNrIn0sInZlcnNpb24iOiIxLjIuOSJ9fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
relatedImages:
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.2.9
  name: ""
- image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator:1.2.9
  name: ""
schema: olm.bundle
---
image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator@sha256:6b7a1e34c33b16c464745f70658a10d6ea3d96099c1e2ab008e96589ef73e7eb
name: multi-nic-cni-operator.v1.3.0
package: multi-nic-cni-operator
properties:
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: CIDR
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: Config
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: DeviceClass
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: HostInterface
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: IPPool
    version: v1
- type: olm.gvk
  value:
    group: multinic.fms.io
    kind: MultiNicNetwork
    version: v1
- type: olm.package
  value:
    packageName: multi-nic-cni-operator
    version: 1.3.0
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Im11bHRpbmljbmV0d29ya3MubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiTXVsdGlOaWNOZXR3b3JrIiwibGlzdEtpbmQiOiJNdWx0aU5pY05ldHdvcmtMaXN0IiwicGx1cmFsIjoibXVsdGluaWNuZXR3b3JrcyIsInNpbmd1bGFyIjoibXVsdGluaWNuZXR3b3JrIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBtdWx0aW5pY25ldHdvcmtzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiTXVsdGlOaWNOZXR3b3JrU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIE11bHRpTmljTmV0d29yayBNYXN0ZXJOZXRBZGRycyBpcyBuZXR3b3JrIGFkZHJlc3NlcyBvZiBOSUMgbWVtYmVycyBpbiB0aGUgcG9vbCBTdWJuZXQgaXMgZ2xvYmFsIHN1Ym5ldCwgZGVmYXVsdDogMTcyLjMwLjAuMC8xNiBJUEFNIGlzIGlwYW0gc3BlY2lmaWNhdGlvbiBNYWluUGx1Z2luIGlzIHBsdWdpbiBzcGVjaWZpY2F0aW9uIFBvbGljeSBpcyBnZW5lcmFsIHBvbGljeSBvZiB0aGUgcG9vbCIsInByb3BlcnRpZXMiOnsiYXR0YWNoUG9saWN5Ijp7ImRlc2NyaXB0aW9uIjoiQXNzaWdubWVudFBvbGljeSBkZWZpbmVzIHRoZSBwb2xpY3kgdG8gc2VsZWN0IHRoZSBOSUNzIGZyb20gdGhlIHBvb2wgU3RyYXRlZ3kgaXMgb25lIG9mIE5vbmUsIENvc3RPcHQsIFBlcmZPcHQsIFFvU0NsYXNzIFRhcmdldCBpcyB0YXJnZXQgYmFuZHdpZHRoIGluIGEgZm9ybWF0IChkKylHYnBzLCAoZCspTWJwcywgKGQrKUticHMgcmVxdWlyZWQgZm9yIENvc3RPcHQgYW5kIFBlcmZPcHQiLCJwcm9wZXJ0aWVzIjp7InN0cmF0ZWd5Ijp7InR5cGUiOiJzdHJpbmcifSwidGFyZ2V0Ijp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInN0cmF0ZWd5Il0sInR5cGUiOiJvYmplY3QifSwiaXBhbSI6eyJ0eXBlIjoic3RyaW5nIn0sIm1hc3Rlck5ldHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwibXVsdGlOSUNJUEFNIjp7InR5cGUiOiJib29sZWFuIn0sIm5hbWVzcGFjZXMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwicGx1Z2luIjp7ImRlc2NyaXB0aW9uIjoicmVmZXJlbmNlOiBnaXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvY25pL3BrZy90eXBlcyIsInByb3BlcnRpZXMiOnsiYXJncyI6eyJhZGRpdGlvbmFsUHJvcGVydGllcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJvYmplY3QifSwiY2FwYWJpbGl0aWVzIjp7ImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjp7InR5cGUiOiJib29sZWFuIn0sInR5cGUiOiJvYmplY3QifSwiY25pVmVyc2lvbiI6eyJ0eXBlIjoic3RyaW5nIn0sImRucyI6eyJkZXNjcmlwdGlvbiI6InJlZmVyZW5jZTogZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL2NuaS9wa2cvdHlwZXMiLCJwcm9wZXJ0aWVzIjp7ImRvbWFpbiI6eyJ0eXBlIjoic3RyaW5nIn0sIm5hbWVzZXJ2ZXJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm9wdGlvbnMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwic2VhcmNoIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In19LCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiY25pVmVyc2lvbiIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaXBhbSIsInBsdWdpbiJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6Ik11bHRpTmljTmV0d29ya1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBNdWx0aU5pY05ldHdvcmsiLCJwcm9wZXJ0aWVzIjp7ImNvbXB1dGVSZXN1bHRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsibmV0QWRkcmVzcyI6eyJ0eXBlIjoic3RyaW5nIn0sIm51bU9mSG9zdHMiOnsidHlwZSI6ImludGVnZXIifX0sInJlcXVpcmVkIjpbIm5ldEFkZHJlc3MiLCJudW1PZkhvc3RzIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In0sImNvbmZpZ1N0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn0sImRpc2NvdmVyeSI6eyJwcm9wZXJ0aWVzIjp7ImNpZHJQcm9jZXNzZWQiOnsidHlwZSI6ImludGVnZXIifSwiZXhpc3REYWVtb24iOnsidHlwZSI6ImludGVnZXIifSwiaW5mb0F2YWlsYWJsZSI6eyJ0eXBlIjoiaW50ZWdlciJ9fSwicmVxdWlyZWQiOlsiY2lkclByb2Nlc3NlZCIsImV4aXN0RGFlbW9uIiwiaW5mb0F2YWlsYWJsZSJdLCJ0eXBlIjoib2JqZWN0In0sImxhc3RTeW5jVGltZSI6eyJmb3JtYXQiOiJkYXRlLXRpbWUiLCJ0eXBlIjoic3RyaW5nIn0sIm1lc3NhZ2UiOnsidHlwZSI6InN0cmluZyJ9LCJyb3V0ZVN0YXR1cyI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJjb21wdXRlUmVzdWx0cyIsImNvbmZpZ1N0YXR1cyIsImRpc2NvdmVyeSIsImxhc3RTeW5jVGltZSIsIm1lc3NhZ2UiLCJyb3V0ZVN0YXR1cyJdLCJ0eXBlIjoib2JqZWN0In19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpbXSwic3RvcmVkVmVyc2lvbnMiOltdfX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImNpZHJzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6IkNJRFIiLCJsaXN0S2luZCI6IkNJRFJMaXN0IiwicGx1cmFsIjoiY2lkcnMiLCJzaW5ndWxhciI6ImNpZHIifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJDSURSIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjaWRycyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgQ0lEUiIsInByb3BlcnRpZXMiOnsiY2lkciI6eyJpdGVtcyI6eyJwcm9wZXJ0aWVzIjp7Imhvc3RzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaG9zdEluZGV4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImhvc3ROYW1lIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImlwcG9vbCI6eyJ0eXBlIjoic3RyaW5nIn0sInBvZENJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdElQIiwiaG9zdEluZGV4IiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwicG9kQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJpbnRlcmZhY2VJbmRleCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJuZXRBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbkNJRFIiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdHMiLCJpbnRlcmZhY2VJbmRleCIsIm5ldEFkZHJlc3MiLCJ2bGFuQ0lEUiJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJjb25maWciOnsiZGVzY3JpcHRpb24iOiJJTlNFUlQgQURESVRJT05BTCBTUEVDIEZJRUxEUyAtIGRlc2lyZWQgc3RhdGUgb2YgY2x1c3RlciBJbXBvcnRhbnQ6IFJ1biBcIm1ha2VcIiB0byByZWdlbmVyYXRlIGNvZGUgYWZ0ZXIgbW9kaWZ5aW5nIHRoaXMgZmlsZSIsInByb3BlcnRpZXMiOnsiZXhjbHVkZUNJRFJzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sImhvc3RCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VCbG9jayI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJtYXN0ZXJOZXRzIjp7Iml0ZW1zIjp7InR5cGUiOiJzdHJpbmcifSwidHlwZSI6ImFycmF5In0sIm5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJzdWJuZXQiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjp7InR5cGUiOiJzdHJpbmcifSwidmxhbk1vZGUiOnsidHlwZSI6InN0cmluZyJ9fSwicmVxdWlyZWQiOlsiaG9zdEJsb2NrIiwiaW50ZXJmYWNlQmxvY2siLCJtYXN0ZXJOZXRzIiwibmFtZSIsInN1Ym5ldCIsInR5cGUiXSwidHlwZSI6Im9iamVjdCJ9fSwicmVxdWlyZWQiOlsiY2lkciIsImNvbmZpZyJdLCJ0eXBlIjoib2JqZWN0In0sInN0YXR1cyI6eyJkZXNjcmlwdGlvbiI6IkNJRFJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ0lEUiIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImRldmljZWNsYXNzZXMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiRGV2aWNlQ2xhc3MiLCJsaXN0S2luZCI6IkRldmljZUNsYXNzTGlzdCIsInBsdXJhbCI6ImRldmljZWNsYXNzZXMiLCJzaW5ndWxhciI6ImRldmljZWNsYXNzIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiRGV2aWNlQ2xhc3MgaXMgdGhlIFNjaGVtYSBmb3IgdGhlIGRldmljZWNsYXNzZXMgQVBJIiwicHJvcGVydGllcyI6eyJhcGlWZXJzaW9uIjp7ImRlc2NyaXB0aW9uIjoiQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0IGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcyIsInR5cGUiOiJzdHJpbmcifSwia2luZCI6eyJkZXNjcmlwdGlvbiI6IktpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudCBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzIiwidHlwZSI6InN0cmluZyJ9LCJtZXRhZGF0YSI6eyJ0eXBlIjoib2JqZWN0In0sInNwZWMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1NwZWMgZGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInByb3BlcnRpZXMiOnsiaWRzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsicHJvZHVjdHMiOnsiaXRlbXMiOnsidHlwZSI6InN0cmluZyJ9LCJ0eXBlIjoiYXJyYXkifSwidmVuZG9yIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbInByb2R1Y3RzIiwidmVuZG9yIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJpZHMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJEZXZpY2VDbGFzc1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBEZXZpY2VDbGFzcyIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6Imhvc3RpbnRlcmZhY2VzLm11bHRpbmljLmZtcy5pbyJ9LCJzcGVjIjp7Imdyb3VwIjoibXVsdGluaWMuZm1zLmlvIiwibmFtZXMiOnsia2luZCI6Ikhvc3RJbnRlcmZhY2UiLCJsaXN0S2luZCI6Ikhvc3RJbnRlcmZhY2VMaXN0IiwicGx1cmFsIjoiaG9zdGludGVyZmFjZXMiLCJzaW5ndWxhciI6Imhvc3RpbnRlcmZhY2UifSwic2NvcGUiOiJDbHVzdGVyIiwidmVyc2lvbnMiOlt7Im5hbWUiOiJ2MSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBob3N0aW50ZXJmYWNlcyBBUEkiLCJwcm9wZXJ0aWVzIjp7ImFwaVZlcnNpb24iOnsiZGVzY3JpcHRpb24iOiJBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzIiwidHlwZSI6InN0cmluZyJ9LCJraW5kIjp7ImRlc2NyaXB0aW9uIjoiS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcyBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50IHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMiLCJ0eXBlIjoic3RyaW5nIn0sIm1ldGFkYXRhIjp7InR5cGUiOiJvYmplY3QifSwic3BlYyI6eyJkZXNjcmlwdGlvbiI6Ikhvc3RJbnRlcmZhY2VTcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgSG9zdEludGVyZmFjZSIsInByb3BlcnRpZXMiOnsiaG9zdE5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJpbnRlcmZhY2VzIjp7Iml0ZW1zIjp7InByb3BlcnRpZXMiOnsiaG9zdElQIjp7InR5cGUiOiJzdHJpbmcifSwiaW50ZXJmYWNlTmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sIm5ldEFkZHJlc3MiOnsidHlwZSI6InN0cmluZyJ9LCJwY2lBZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwicHJvZHVjdCI6eyJ0eXBlIjoic3RyaW5nIn0sInZlbmRvciI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJpbnRlcmZhY2VOYW1lIl0sInR5cGUiOiJvYmplY3QifSwidHlwZSI6ImFycmF5In19LCJyZXF1aXJlZCI6WyJob3N0TmFtZSIsImludGVyZmFjZXMiXSwidHlwZSI6Im9iamVjdCJ9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJIb3N0SW50ZXJmYWNlU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIEhvc3RJbnRlcmZhY2UiLCJwcm9wZXJ0aWVzIjp7InN0YXQiOnsicHJvcGVydGllcyI6eyJjb3VudCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJpbnRlcmZhY2VOYW1lIjp7InR5cGUiOiJzdHJpbmcifSwibGFzdFJ4Ijp7InR5cGUiOiJpbnRlZ2VyIn0sImxhc3RSeERyb3AiOnsidHlwZSI6ImludGVnZXIifSwibGFzdFRpbWVzdGFtcCI6eyJmb3JtYXQiOiJpbnQ2NCIsInR5cGUiOiJpbnRlZ2VyIn0sImxhc3RUeCI6eyJ0eXBlIjoiaW50ZWdlciJ9LCJsYXN0VHhEcm9wIjp7InR5cGUiOiJpbnRlZ2VyIn0sInJ4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwicnhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn0sInR4RHJvcFJhdGUiOnsidHlwZSI6ImludGVnZXIifSwidHhSYXRlIjp7InR5cGUiOiJpbnRlZ2VyIn19LCJyZXF1aXJlZCI6WyJjb3VudCIsImludGVyZmFjZU5hbWUiLCJsYXN0UngiLCJsYXN0UnhEcm9wIiwibGFzdFRpbWVzdGFtcCIsImxhc3RUeCIsImxhc3RUeERyb3AiLCJyeERyb3BSYXRlIiwicnhSYXRlIiwidHhEcm9wUmF0ZSIsInR4UmF0ZSJdLCJ0eXBlIjoib2JqZWN0In19LCJyZXF1aXJlZCI6WyJzdGF0Il0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiY29udHJvbGxlci1nZW4ua3ViZWJ1aWxkZXIuaW8vdmVyc2lvbiI6InYwLjQuMSJ9LCJjcmVhdGlvblRpbWVzdGFtcCI6bnVsbCwibmFtZSI6ImlwcG9vbHMubXVsdGluaWMuZm1zLmlvIn0sInNwZWMiOnsiZ3JvdXAiOiJtdWx0aW5pYy5mbXMuaW8iLCJuYW1lcyI6eyJraW5kIjoiSVBQb29sIiwibGlzdEtpbmQiOiJJUFBvb2xMaXN0IiwicGx1cmFsIjoiaXBwb29scyIsInNpbmd1bGFyIjoiaXBwb29sIn0sInNjb3BlIjoiQ2x1c3RlciIsInZlcnNpb25zIjpbeyJuYW1lIjoidjEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBpcHBvb2xzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIElQUG9vbCIsInByb3BlcnRpZXMiOnsiYWxsb2NhdGlvbnMiOnsiaXRlbXMiOnsicHJvcGVydGllcyI6eyJhZGRyZXNzIjp7InR5cGUiOiJzdHJpbmcifSwiaW5kZXgiOnsidHlwZSI6ImludGVnZXIifSwibmFtZXNwYWNlIjp7InR5cGUiOiJzdHJpbmcifSwicG9kIjp7InR5cGUiOiJzdHJpbmcifX0sInJlcXVpcmVkIjpbImFkZHJlc3MiLCJpbmRleCIsIm5hbWVzcGFjZSIsInBvZCJdLCJ0eXBlIjoib2JqZWN0In0sInR5cGUiOiJhcnJheSJ9LCJleGNsdWRlcyI6eyJpdGVtcyI6eyJ0eXBlIjoic3RyaW5nIn0sInR5cGUiOiJhcnJheSJ9LCJob3N0TmFtZSI6eyJ0eXBlIjoic3RyaW5nIn0sImludGVyZmFjZU5hbWUiOnsidHlwZSI6InN0cmluZyJ9LCJuZXRBdHRhY2hEZWYiOnsidHlwZSI6InN0cmluZyJ9LCJwb2RDSURSIjp7ImRlc2NyaXB0aW9uIjoiRm9vIGlzIGFuIGV4YW1wbGUgZmllbGQgb2YgSVBQb29sLiBFZGl0IGlwcG9vbF90eXBlcy5nbyB0byByZW1vdmUvdXBkYXRlIiwidHlwZSI6InN0cmluZyJ9LCJ2bGFuQ0lEUiI6eyJ0eXBlIjoic3RyaW5nIn19LCJyZXF1aXJlZCI6WyJhbGxvY2F0aW9ucyIsImV4Y2x1ZGVzIiwiaG9zdE5hbWUiLCJpbnRlcmZhY2VOYW1lIiwibmV0QXR0YWNoRGVmIiwicG9kQ0lEUiIsInZsYW5DSURSIl0sInR5cGUiOiJvYmplY3QifSwic3RhdHVzIjp7ImRlc2NyaXB0aW9uIjoiSVBQb29sU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIElQUG9vbCIsInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7InN0YXR1cyI6e319fV19LCJzdGF0dXMiOnsiYWNjZXB0ZWROYW1lcyI6eyJraW5kIjoiIiwicGx1cmFsIjoiIn0sImNvbmRpdGlvbnMiOltdLCJzdG9yZWRWZXJzaW9ucyI6W119fQ==
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1tZXRyaWNzLXJlYWRlciJ9LCJydWxlcyI6W3sibm9uUmVzb3VyY2VVUkxzIjpbIi9tZXRyaWNzIl0sInZlcmJzIjpbImdldCJdfV19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJkYXRhIjp7ImNvbnRyb2xsZXJfbWFuYWdlcl9jb25maWcueWFtbCI6ImFwaVZlcnNpb246IGNvbnRyb2xsZXItcnVudGltZS5zaWdzLms4cy5pby92MWFscGhhMVxua2luZDogQ29udHJvbGxlck1hbmFnZXJDb25maWdcbmhlYWx0aDpcbiAgaGVhbHRoUHJvYmVCaW5kQWRkcmVzczogOjgwODNcbm1ldHJpY3M6XG4gIGJpbmRBZGRyZXNzOiAxMjcuMC4wLjE6ODA4MFxud2ViaG9vazpcbiAgcG9ydDogOTQ0M1xubGVhZGVyRWxlY3Rpb246XG4gIGxlYWRlckVsZWN0OiB0cnVlXG4gIHJlc291cmNlTmFtZTogNWFhZjY3ZmQubXVsdGluaWMuZm1zLmlvXG4ifSwia2luZCI6IkNvbmZpZ01hcCIsIm1ldGFkYXRhIjp7Im5hbWUiOiJtdWx0aS1uaWMtY25pLW9wZXJhdG9yLW1hbmFnZXItY29uZmlnIn19
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9LCJuYW1lIjoibXVsdGktbmljLWNuaS1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXItbWV0cmljcy1zZXJ2aWNlIn0sInNwZWMiOnsicG9ydHMiOlt7Im5hbWUiOiJodHRwcyIsInBvcnQiOjg0NDMsInRhcmdldFBvcnQiOiJodHRwcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: ghcr.io/foundation-model-stack/multi-nic-cni-controller:v1.3.0
  name: ""
- image: quay.io/community-operator-pipeline-prod/multi-nic-cni-operator@sha256:6b7a1e34c33b16c464745f70658a10d6ea3d96099c1e2ab008e96589ef73e7eb
  name: ""
schema: olm.bundle
