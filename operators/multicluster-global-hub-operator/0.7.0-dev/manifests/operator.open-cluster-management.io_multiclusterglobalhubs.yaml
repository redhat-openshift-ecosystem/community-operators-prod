apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: multiclusterglobalhubs.operator.open-cluster-management.io
spec:
  group: operator.open-cluster-management.io
  names:
    kind: MulticlusterGlobalHub
    listKind: MulticlusterGlobalHubList
    plural: multiclusterglobalhubs
    shortNames:
    - mgh
    - mcgh
    singular: multiclusterglobalhub
  scope: Namespaced
  versions:
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: MulticlusterGlobalHub is the Schema for the multiclusterglobalhubs
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MulticlusterGlobalHubSpec defines the desired state of MulticlusterGlobalHub
            properties:
              aggregationLevel:
                default: full
                description: AggregationLevel specifies the level of aggregation leaf
                  hubs should do before sending the information
                enum:
                - full
                - minimal
                type: string
              dataLayer:
                description: 'DataLayer can be configured to use a different data
                  layer. native: use the native data layer (default). largeScale:
                  large scale data layer served by kafka and postgres.'
                properties:
                  largeScale:
                    description: LargeScale is to use kafka as transport layer and
                      use postgres as data layer This is for a large scale environment.
                    properties:
                      kafka:
                        description: KafkaConfig defines the desired state of kafka
                        properties:
                          name:
                            type: string
                          transportFormat:
                            default: cloudEvents
                            description: TransportFormat defines the transport format
                              for kafka, which is either cloudEvents or kafka message
                            enum:
                            - message
                            - cloudEvents
                            type: string
                        type: object
                      postgres:
                        description: LocalObjectReference contains enough information
                          to let you locate the referenced object inside the same
                          namespace.
                        properties:
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                        type: object
                    type: object
                  native:
                    description: Native may use a syncer to sync data from the regional
                      hub cluster to the global hub cluster. The data is stored in
                      the global hub kubernetes api server backed by etcd. This is
                      not for a large scale environment.
                    type: object
                  type:
                    description: DataLayerType specifies the type of data layer that
                      global hub stores and transports the data.
                    enum:
                    - native
                    - largeScale
                    type: string
                required:
                - type
                type: object
              enableLocalPolicies:
                default: true
                type: boolean
              imagePullPolicy:
                description: Pull policy of the multicluster global hub images
                type: string
              imagePullSecret:
                description: Pull secret of the multicluster global hub images
                type: string
              messageCompressionType:
                default: gzip
                description: MessageCompressionType specifies the compression type
                  of transport message between global hub and regional hubs
                enum:
                - gzip
                - no-op
                type: string
              nodeSelector:
                additionalProperties:
                  type: string
                description: Spec of NodeSelector
                type: object
              tolerations:
                description: Tolerations causes all components to tolerate any taints.
                items:
                  description: The pod this Toleration is attached to tolerates any
                    taint that matches the triple <key,value,effect> using the matching
                    operator <operator>.
                  properties:
                    effect:
                      description: Effect indicates the taint effect to match. Empty
                        means match all taint effects. When specified, allowed values
                        are NoSchedule, PreferNoSchedule and NoExecute.
                      type: string
                    key:
                      description: Key is the taint key that the toleration applies
                        to. Empty means match all taint keys. If the key is empty,
                        operator must be Exists; this combination means to match all
                        values and all keys.
                      type: string
                    operator:
                      description: Operator represents a key's relationship to the
                        value. Valid operators are Exists and Equal. Defaults to Equal.
                        Exists is equivalent to wildcard for value, so that a pod
                        can tolerate all taints of a particular category.
                      type: string
                    tolerationSeconds:
                      description: TolerationSeconds represents the period of time
                        the toleration (which must be of effect NoExecute, otherwise
                        this field is ignored) tolerates the taint. By default, it
                        is not set, which means tolerate the taint forever (do not
                        evict). Zero and negative values will be treated as 0 (evict
                        immediately) by the system.
                      format: int64
                      type: integer
                    value:
                      description: Value is the taint value the toleration matches
                        to. If the operator is Exists, the value should be empty,
                        otherwise just a regular string.
                      type: string
                  type: object
                type: array
            required:
            - dataLayer
            type: object
          status:
            description: MulticlusterGlobalHubStatus defines the observed state of
              MulticlusterGlobalHub
            properties:
              conditions:
                description: MulticlusterGlobalHubStatus defines the observed state
                  of MulticlusterGlobalHub
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
