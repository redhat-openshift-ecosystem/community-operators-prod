---
defaultChannel: community
icon:
  base64data: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPCEtLSBHZW5lcmF0b3I6IEFkb2JlIElsbHVzdHJhdG9yIDI2LjAuMiwgU1ZHIEV4cG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNpb246IDYuMDAgQnVpbGQgMCkgIC0tPgo8c3ZnIHZlcnNpb249IjEuMSIgaWQ9IkxheWVyXzEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHg9IjBweCIgeT0iMHB4IgoJIHZpZXdCb3g9IjAgMCAxMDAgMTAwIiBzdHlsZT0iZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxMDAgMTAwOyIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSI+CjxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+Cgkuc3Qwe2ZpbGw6dXJsKCNTVkdJRF8xXyk7fQoJLnN0MXtmaWxsOiNGRkZGRkY7fQoJLnN0MntvcGFjaXR5OjAuNjt9Cgkuc3Qze29wYWNpdHk6MC41O30KCS5zdDR7b3BhY2l0eTowLjQ7fQo8L3N0eWxlPgo8Zz4KCTxnPgoJCTxnPgoJCQk8cmFkaWFsR3JhZGllbnQgaWQ9IlNWR0lEXzFfIiBjeD0iMTQuNzc1OCIgY3k9Ii0yLjk3NzEiIHI9IjkxLjYyNyIgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiPgoJCQkJPHN0b3AgIG9mZnNldD0iMCIgc3R5bGU9InN0b3AtY29sb3I6IzNDM0ZBNiIvPgoJCQkJPHN0b3AgIG9mZnNldD0iMSIgc3R5bGU9InN0b3AtY29sb3I6IzNCMDM0MCIvPgoJCQk8L3JhZGlhbEdyYWRpZW50PgoJCQk8cGF0aCBjbGFzcz0ic3QwIiBkPSJNNTAsOTljLTEzLjMsMC0yNS40LTUuMy0zNC4yLTEzLjlDNi43LDc2LjIsMSw2My43LDEsNTBDMSwyMi45LDIyLjksMSw1MCwxYzEzLjcsMCwyNi4yLDUuNywzNS4xLDE0LjgKCQkJCUM5My43LDI0LjYsOTksMzYuNyw5OSw1MEM5OSw3Ny4xLDc3LjEsOTksNTAsOTl6Ii8+CgkJPC9nPgoJCTxnPgoJCQk8Y2lyY2xlIGNsYXNzPSJzdDEiIGN4PSIzNy41IiBjeT0iODEuOSIgcj0iNSIvPgoJCTwvZz4KCQk8cGF0aCBjbGFzcz0ic3QxIiBkPSJNNDguNiw5MS45bDE4LjgtNDMuM2MtMi41LTAuMS01LTAuNy03LjItMkwzMy4yLDY4LjJsMS40LTEuOGwyMC0yNS4xYy0xLjUtMi40LTIuMy01LjEtMi4zLTcuOUw5LDUyLjIKCQkJbDQ3LjYtMjkuOWwwLDBjMC4xLTAuMSwwLjItMC4yLDAuMi0wLjJjNi4xLTYuMSwxNS45LTYuMSwyMiwwbDAuMSwwLjFjNiw2LjEsNiwxNS45LTAuMSwyMS45Yy0wLjEsMC4xLTAuMiwwLjItMC4yLDAuMmwwLDAKCQkJTDQ4LjYsOTEuOXoiLz4KCQk8ZyBjbGFzcz0ic3QyIj4KCQkJPGNpcmNsZSBjbGFzcz0ic3QxIiBjeD0iNTAuMyIgY3k9IjE0LjciIHI9IjMuMSIvPgoJCTwvZz4KCQk8ZyBjbGFzcz0ic3QzIj4KCQkJPGNpcmNsZSBjbGFzcz0ic3QxIiBjeD0iMjcuNyIgY3k9IjU4IiByPSIxLjciLz4KCQk8L2c+CgkJPGc+CgkJCTxjaXJjbGUgY2xhc3M9InN0MSIgY3g9Ijc3LjQiIGN5PSI2OS4zIiByPSIxLjciLz4KCQk8L2c+CgkJPGc+CgkJCTxjaXJjbGUgY2xhc3M9InN0MSIgY3g9IjE2LjMiIGN5PSIzNi42IiByPSIxLjciLz4KCQk8L2c+CgkJPGcgY2xhc3M9InN0NCI+CgkJCTxjaXJjbGUgY2xhc3M9InN0MSIgY3g9IjYzLjciIGN5PSI4NS45IiByPSIyLjIiLz4KCQk8L2c+CgkJPGc+CgkJCTxjaXJjbGUgY2xhc3M9InN0MSIgY3g9IjI5LjQiIGN5PSIxOS42IiByPSI0LjgiLz4KCQk8L2c+CgkJPGcgY2xhc3M9InN0MyI+CgkJCTxjaXJjbGUgY2xhc3M9InN0MSIgY3g9Ijg4IiBjeT0iNTAiIHI9IjQuOCIvPgoJCTwvZz4KCTwvZz4KPC9nPgo8L3N2Zz4K
  mediatype: image/svg+xml
name: netobserv-operator
schema: olm.package
---
entries:
- name: netobserv-operator.v1.5.0-community
- name: netobserv-operator.v1.6.0-community
  replaces: netobserv-operator.v1.5.0-community
- name: netobserv-operator.v1.6.1-community
  replaces: netobserv-operator.v1.6.0-community
- name: netobserv-operator.v1.6.2-community
  replaces: netobserv-operator.v1.6.1-community
- name: netobserv-operator.v1.6.3-community
  replaces: netobserv-operator.v1.6.2-community
name: community
package: netobserv-operator
schema: olm.channel
---
entries:
- name: netobserv-operator.v0.1.0
- name: netobserv-operator.v0.1.1
  replaces: netobserv-operator.v0.1.0
- name: netobserv-operator.v0.1.2
  replaces: netobserv-operator.v0.1.1
- name: netobserv-operator.v0.1.3
  replaces: netobserv-operator.v0.1.2
- name: netobserv-operator.v0.1.4
  replaces: netobserv-operator.v0.1.3
- name: netobserv-operator.v0.2.0
  replaces: netobserv-operator.v0.1.4
- name: netobserv-operator.v0.2.1
  replaces: netobserv-operator.v0.2.0
name: latest
package: netobserv-operator
schema: olm.channel
---
entries:
- name: netobserv-operator.v0.1.0
- name: netobserv-operator.v0.1.1
  replaces: netobserv-operator.v0.1.0
- name: netobserv-operator.v0.1.2
  replaces: netobserv-operator.v0.1.1
- name: netobserv-operator.v0.1.3
  replaces: netobserv-operator.v0.1.2
- name: netobserv-operator.v0.1.4
  replaces: netobserv-operator.v0.1.3
- name: netobserv-operator.v0.2.0
  replaces: netobserv-operator.v0.1.4
- name: netobserv-operator.v0.2.1
  replaces: netobserv-operator.v0.2.0
name: v0.2.x
package: netobserv-operator
schema: olm.channel
---
image: quay.io/openshift-community-operators/netobserv-operator@sha256:92302dcaf2f7ea6e2fa4d48f22047bae94d1d0ba3e6d9c67dda88ecf6b70efb6
name: netobserv-operator.v0.1.0
package: netobserv-operator
properties:
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1alpha1
- type: olm.package
  value:
    packageName: netobserv-operator
    version: 0.1.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "cno": {
                "namespace": "openshift-network-operator"
              },
              "consolePlugin": {
                "image": "quay.io/netobserv/network-observability-console-plugin:v0.1.0",
                "imagePullPolicy": "IfNotPresent",
                "port": 9001
              },
              "goflowkube": {
                "image": "quay.io/netobserv/goflow2-kube:v0.1.0",
                "imagePullPolicy": "IfNotPresent",
                "kind": "Deployment",
                "logLevel": "info",
                "port": 2055,
                "printOutput": false,
                "replicas": 1
              },
              "ipfix": {
                "cacheActiveTimeout": "60s",
                "cacheMaxFlows": 400,
                "sampling": 100
              },
              "loki": {
                "batchSize": 102400,
                "batchWait": "1s",
                "maxBackoff": "300s",
                "maxRetries": 10,
                "minBackoff": "1s",
                "staticLabels": {
                  "app": "netobserv-flowcollector"
                },
                "url": "http://loki:3100/"
              },
              "namespace": "network-observability"
            }
          }
        ]
      capabilities: Basic Install
      categories: Monitoring
      containerImage: quay.io/netobserv/network-observability-operator:0.1.0
      description: A network observability operator based on netflows (IPFIX) for
        OVN
      operators.operatorframework.io/builder: operator-sdk-v1.14.0+git
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: FlowCollector is the Schema for the flowcollectors API, which
          pilots and configures netflow collection.
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1alpha1
    description: |-
      This is an OpenShift / Kubernetes operator for network observability. It deploys
      a netflow (IPFIX) collector, a console plugin, and configures OVS for netflow exports. This is an early release ("dev preview") and is not considered production-ready yet.

      ## Pre-requisite

      - Your CNI should be [ovn-kubernetes](https://github.com/ovn-org/ovn-kubernetes/). Other [OvS](https://www.openvswitch.org/)-based CNIs might work if they can export IPFIX flows, but would necessitate manual configuration and they haven't been tested. Future releases will include CNI independent features.

      - [Loki](https://grafana.com/oss/loki/) installed: all collected flows are stored via Loki. Several installation options are [available here](https://grafana.com/docs/loki/latest/installation/). For a quick install, you can simply run:

      ```
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/main/examples/zero-click-loki/1-storage.yaml) -n network-observability
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/main/examples/zero-click-loki/2-loki.yaml) -n network-observability
      ```

      - [Grafana](https://grafana.com/oss/grafana/) installed (optional): [a dashboard](https://github.com/netobserv/network-observability-operator/blob/main/config/samples/dashboards/Network%20Observability.json) can be imported to show flow logs and metrics.

      ## Post-installation
      Because the installed workloads operate cluster-wide, there is only one `FlowCollector` that can be installed, named `cluster`. The custom resource is [documented here](https://github.com/netobserv/network-observability-operator/blob/main/docs/FlowCollector.md). Make sure that Loki is reachable and its URL is properly configured in the operand resource.

      ### Enabling IPFIX export

      #### Generic Kubernetes with ovn-kubernetes
      You need to explicitly turn on IPFIX export in ovn-kubernetes:

      ```
      GF_IP=`kubectl get svc goflow-kube -n network-observability -ojsonpath='{.spec.clusterIP}'` && echo $GF_IP
      kubectl set env daemonset/ovnkube-node -c ovnkube-node -n ovn-kubernetes OVN_IPFIX_TARGETS="$GF_IP:2055"
      ```

      To turn it off, remove the `OVN_IPFIX_TARGETS` env from `daemonset/ovnkube-node`.

      #### OpenShift 4.10 and above
      No further action is required to enable IPFIX exports. Do not configure manually the goflow-kube IP in OVS, as it would conflict with the operator action (you can, however, set an additional target IP if you run another flow collector). If you want to turn off the exports, remove the `FlowCollector` cluster resource.

      #### OpenShift 4.8 or 4.9
      You need to explicitly turn on IPFIX export for the `ClusterNetworkOperator`:

      ```
      GF_IP=`oc get svc goflow-kube -n network-observability -ojsonpath='{.spec.clusterIP}'` && echo $GF_IP
      oc patch networks.operator.openshift.io cluster --type='json' -p "[{'op': 'add', 'path': '/spec', 'value': {'exportNetworkFlows': {'ipfix': { 'collectors': ['$GF_IP:2055']}}}}]"
      ```
      To turn it off, remove the `exportNetworkFlows` from `networks.operator.openshift.io/cluster`.

      ### OpenShift Console
      OpenShift 4.10 or above is required to use the Console plugin. It needs to be enabled explicitly, either via the Console itself, or via this command:

      ```
      oc patch console.operator.openshift.io cluster --type='json' -p '[{"op": "add", "path": "/spec/plugins", "value": ["network-observability-plugin"]}]'
      ```
    displayName: Netobserv Operator
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - network observability
    - ipfix
    - flow tracing
    - flows
    - network
    - observability
    links:
    - name: Project page
      url: https://github.com/netobserv/network-observability-operator
    - name: Issue tracker
      url: https://github.com/netobserv/network-observability-operator/issues
    - name: Discussion board
      url: https://github.com/netobserv/network-observability-operator/discussions
    maintainers:
    - email: jtakvori@redhat.com
      name: Joel Takvorian
    - email: jpinsonn@redhat.com
      name: Julien Pinsonneau
    - email: mmaciasl@redhat.com
      name: Mario Macias
    - email: ocazade@redhat.com
      name: Olivier Cazade
    maturity: alpha
    provider:
      name: Red Hat
      url: https://www.redhat.com
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: quay.io/netobserv/network-observability-operator:0.1.0
  name: ""
- image: quay.io/openshift-community-operators/netobserv-operator@sha256:92302dcaf2f7ea6e2fa4d48f22047bae94d1d0ba3e6d9c67dda88ecf6b70efb6
  name: ""
schema: olm.bundle
---
image: quay.io/openshift-community-operators/netobserv-operator@sha256:441e232839fc9547d1142f50a933cc156578a17e0d552947d82f1ee28ccddb0d
name: netobserv-operator.v0.1.1
package: netobserv-operator
properties:
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1alpha1
- type: olm.package
  value:
    packageName: netobserv-operator
    version: 0.1.1
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "cno": {
                "namespace": "openshift-network-operator"
              },
              "consolePlugin": {
                "image": "quay.io/netobserv/network-observability-console-plugin:v0.1.1",
                "imagePullPolicy": "IfNotPresent",
                "port": 9001
              },
              "goflowkube": {
                "healthPort": 8080,
                "image": "quay.io/netobserv/goflow2-kube:v0.1.1",
                "imagePullPolicy": "IfNotPresent",
                "kind": "Deployment",
                "logLevel": "info",
                "port": 2055,
                "printOutput": false,
                "replicas": 1
              },
              "ipfix": {
                "cacheActiveTimeout": "60s",
                "cacheMaxFlows": 400,
                "sampling": 100
              },
              "loki": {
                "batchSize": 102400,
                "batchWait": "1s",
                "maxBackoff": "300s",
                "maxRetries": 10,
                "minBackoff": "1s",
                "staticLabels": {
                  "app": "netobserv-flowcollector"
                },
                "timestampLabel": "TimeFlowEnd",
                "url": "http://loki:3100/"
              },
              "namespace": "network-observability"
            }
          }
        ]
      capabilities: Basic Install
      categories: Monitoring
      containerImage: quay.io/netobserv/network-observability-operator:0.1.1
      createdAt: "2022-03-07T09:18:29Z"
      description: A network observability operator based on netflows (IPFIX) for
        OVN
      operators.operatorframework.io/builder: operator-sdk-v1.16.0+git
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      repository: https://github.com/netobserv/network-observability-operator
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: FlowCollector is the Schema for the flowcollectors API, which
          pilots and configures netflow collection.
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1alpha1
    description: |-
      This is an OpenShift / Kubernetes operator for network observability. It deploys
      a netflow (IPFIX) collector, a console plugin, and configures OVS for netflow exports. This is an early release ("dev preview") and is not considered production-ready yet.

      ## Pre-requisite

      - Your CNI should be [ovn-kubernetes](https://github.com/ovn-org/ovn-kubernetes/). Other [OvS](https://www.openvswitch.org/)-based CNIs might work if they can export IPFIX flows, but would necessitate manual configuration and they haven't been tested. Future releases will include CNI independent features.

      - [Loki](https://grafana.com/oss/loki/) installed: all collected flows are stored via Loki. Several installation options are [available here](https://grafana.com/docs/loki/latest/installation/). For a quick install, you can simply run:

      ```
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/main/examples/zero-click-loki/1-storage.yaml) -n network-observability
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/main/examples/zero-click-loki/2-loki.yaml) -n network-observability
      ```

      - [Grafana](https://grafana.com/oss/grafana/) installed (optional): [a dashboard](https://github.com/netobserv/network-observability-operator/blob/main/config/samples/dashboards/Network%20Observability.json) can be imported to show flow logs and metrics.

      ## Post-installation
      Because the installed workloads operate cluster-wide, there is only one `FlowCollector` that can be installed, named `cluster`. The custom resource is [documented here](https://github.com/netobserv/network-observability-operator/blob/main/docs/FlowCollector.md). Make sure that Loki is reachable and its URL is properly configured in the operand resource.

      ### Enabling IPFIX export

      #### Generic Kubernetes with ovn-kubernetes
      You need to explicitly turn on IPFIX export in ovn-kubernetes:

      ```
      GF_IP=`kubectl get svc goflow-kube -n network-observability -ojsonpath='{.spec.clusterIP}'` && echo $GF_IP
      kubectl set env daemonset/ovnkube-node -c ovnkube-node -n ovn-kubernetes OVN_IPFIX_TARGETS="$GF_IP:2055"
      ```

      To turn it off, remove the `OVN_IPFIX_TARGETS` env from `daemonset/ovnkube-node`.

      #### OpenShift 4.10 and above
      No further action is required to enable IPFIX exports. Do not configure manually the goflow-kube IP in OVS, as it would conflict with the operator action (you can, however, set an additional target IP if you run another flow collector). If you want to turn off the exports, remove the `FlowCollector` cluster resource.

      #### OpenShift 4.8 or 4.9
      You need to explicitly turn on IPFIX export for the `ClusterNetworkOperator`:

      ```
      GF_IP=`oc get svc goflow-kube -n network-observability -ojsonpath='{.spec.clusterIP}'` && echo $GF_IP
      oc patch networks.operator.openshift.io cluster --type='json' -p "[{'op': 'add', 'path': '/spec', 'value': {'exportNetworkFlows': {'ipfix': { 'collectors': ['$GF_IP:2055']}}}}]"
      ```
      To turn it off, remove the `exportNetworkFlows` from `networks.operator.openshift.io/cluster`.

      ### OpenShift Console
      OpenShift 4.10 or above is required to use the Console plugin. It needs to be enabled explicitly, either via the Console itself, or via this command:

      ```
      oc patch console.operator.openshift.io cluster --type='json' -p '[{"op": "add", "path": "/spec/plugins", "value": ["network-observability-plugin"]}]'
      ```
    displayName: Netobserv Operator
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - network observability
    - ipfix
    - flow tracing
    - flows
    - network
    - observability
    links:
    - name: Project page
      url: https://github.com/netobserv/network-observability-operator
    - name: Issue tracker
      url: https://github.com/netobserv/network-observability-operator/issues
    - name: Discussion board
      url: https://github.com/netobserv/network-observability-operator/discussions
    maintainers:
    - email: jtakvori@redhat.com
      name: Joel Takvorian
    - email: jpinsonn@redhat.com
      name: Julien Pinsonneau
    - email: mmaciasl@redhat.com
      name: Mario Macias
    - email: ocazade@redhat.com
      name: Olivier Cazade
    maturity: alpha
    provider:
      name: Red Hat
      url: https://www.redhat.com
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: quay.io/netobserv/network-observability-operator:0.1.1
  name: ""
- image: quay.io/openshift-community-operators/netobserv-operator@sha256:441e232839fc9547d1142f50a933cc156578a17e0d552947d82f1ee28ccddb0d
  name: ""
schema: olm.bundle
---
image: quay.io/openshift-community-operators/netobserv-operator@sha256:517a8aba77b9f644210859a3f98861d63c024e96c4b0516a7b631a84e48b21c3
name: netobserv-operator.v0.1.2
package: netobserv-operator
properties:
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1alpha1
- type: olm.package
  value:
    packageName: netobserv-operator
    version: 0.1.2
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": "ipfix",
              "clusterNetworkOperator": {
                "namespace": "openshift-network-operator"
              },
              "consolePlugin": {
                "image": "quay.io/netobserv/network-observability-console-plugin:v0.1.2",
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "port": 9001,
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "register": true
              },
              "ebpf": {
                "cacheActiveTimeout": "5s",
                "cacheMaxFlows": 1000,
                "excludeInterfaces": [
                  "lo"
                ],
                "image": "quay.io/netobserv/netobserv-ebpf-agent:v0.1.0",
                "imagePullPolicy": "IfNotPresent",
                "interfaces": [],
                "logLevel": "info",
                "sampling": 0
              },
              "flowlogsPipeline": {
                "enableKubeProbes": true,
                "healthPort": 8080,
                "image": "quay.io/netobserv/flowlogs-pipeline:v0.1.1",
                "imagePullPolicy": "IfNotPresent",
                "kind": "DaemonSet",
                "logLevel": "info",
                "port": 2055,
                "prometheusPort": 9090
              },
              "ipfix": {
                "cacheActiveTimeout": "60s",
                "cacheMaxFlows": 100,
                "sampling": 400
              },
              "loki": {
                "batchSize": 102400,
                "batchWait": "1s",
                "maxBackoff": "300s",
                "maxRetries": 10,
                "minBackoff": "1s",
                "staticLabels": {
                  "app": "netobserv-flowcollector"
                },
                "timestampLabel": "TimeFlowEnd",
                "url": "http://loki:3100/"
              },
              "namespace": "network-observability"
            }
          }
        ]
      capabilities: Basic Install
      categories: Monitoring
      containerImage: quay.io/netobserv/network-observability-operator:0.1.2
      createdAt: "2022-05-03T09:32:35Z"
      description: A network observability operator based on netflows (IPFIX) for
        OVN
      operators.operatorframework.io/builder: operator-sdk-v1.16.0+git
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      repository: https://github.com/netobserv/network-observability-operator
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: FlowCollector is the Schema for the flowcollectors API, which
          pilots and configures netflow collection.
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1alpha1
    description: |-
      This is an OpenShift / Kubernetes operator for network observability. It deploys an IPFIX network flow collector, a console plugin, and configures OVS for IPFIX exports.
      This is an early release ("dev preview") and is not considered production-ready yet.

      ## Pre-requisite

      - Your CNI should be [ovn-kubernetes](https://github.com/ovn-org/ovn-kubernetes/). Other [OvS](https://www.openvswitch.org/)-based CNIs might work if they can export IPFIX flows, but would necessitate manual configuration and they haven't been tested. Future releases will include CNI independent features.

      - [Loki](https://grafana.com/oss/loki/) installed: all collected flows are stored via Loki. Several installation options are [available here](https://grafana.com/docs/loki/latest/installation/). For a quick install, you can simply run:

      ```
      kubectl create namespace network-observability
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/main/examples/zero-click-loki/1-storage.yaml) -n network-observability
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/main/examples/zero-click-loki/2-loki.yaml) -n network-observability
      ```

      - [Grafana](https://grafana.com/oss/grafana/) installed (optional): [a dashboard](https://github.com/netobserv/network-observability-operator/blob/v0.1.2-rc0/config/samples/dashboards/Network%20Observability.json) can be imported to show flow logs and metrics.

      ## Post-installation
      Because the installed workloads operate cluster-wide, there is only one `FlowCollector` that can be installed, named `cluster`. The custom resource is [documented here](https://github.com/netobserv/network-observability-operator/blob/main/docs/FlowCollector.md). Make sure that Loki is reachable and its URL is properly configured in the operand resource.

      ### Enabling IPFIX export

      #### OpenShift 4.10 and above
      No further action is required to enable IPFIX exports. Do not configure manually the flowlogs-pipeline IP in OVS, as it would conflict with the operator action (you can, however, set an additional target IP if you run another flow collector). If you want to turn off the exports, remove the `FlowCollector` cluster resource.

      #### OpenShift 4.8 or 4.9
      You need to explicitly turn on IPFIX export for the `ClusterNetworkOperator`:

      ```
      GF_IP=`oc get svc flowlogs-pipeline -n network-observability -ojsonpath='{.spec.clusterIP}'` && echo $GF_IP
      oc patch networks.operator.openshift.io cluster --type='json' -p "[{'op': 'add', 'path': '/spec', 'value': {'exportNetworkFlows': {'ipfix': { 'collectors': ['$GF_IP:2055']}}}}]"
      ```
      To turn it off, remove the `exportNetworkFlows` from `networks.operator.openshift.io/cluster`.

      #### Generic Kubernetes with ovn-kubernetes
      You need to explicitly turn on IPFIX export in ovn-kubernetes:

      ```
      GF_IP=`kubectl get svc flowlogs-pipeline -n network-observability -ojsonpath='{.spec.clusterIP}'` && echo $GF_IP
      kubectl set env daemonset/ovnkube-node -c ovnkube-node -n ovn-kubernetes OVN_IPFIX_TARGETS="$GF_IP:2055"
      ```

      To turn it off, remove the `OVN_IPFIX_TARGETS` env from `daemonset/ovnkube-node`.

      ### OpenShift Console
      OpenShift 4.10 or above is required to use the Console plugin. The operator should register this plugin automatically if `spec.consolePlugin.register` is set to `true` (default).

      Otherwise, you can still do it manually, either via the Console itself or via this command:

      ```
      oc patch console.operator.openshift.io cluster --type='json' -p '[{"op": "add", "path": "/spec/plugins/-", "value": "network-observability-plugin"}]'
      ```
    displayName: NetObserv Operator
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - network observability
    - ipfix
    - flow tracing
    - flows
    - network
    - observability
    links:
    - name: Project page
      url: https://github.com/netobserv/network-observability-operator
    - name: Issue tracker
      url: https://github.com/netobserv/network-observability-operator/issues
    - name: Discussion board
      url: https://github.com/netobserv/network-observability-operator/discussions
    maintainers:
    - email: jtakvori@redhat.com
      name: Joel Takvorian
    - email: jpinsonn@redhat.com
      name: Julien Pinsonneau
    - email: mmaciasl@redhat.com
      name: Mario Macias
    - email: ocazade@redhat.com
      name: Olivier Cazade
    maturity: alpha
    provider:
      name: Red Hat
      url: https://www.redhat.com
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: quay.io/netobserv/network-observability-operator:0.1.2
  name: ""
- image: quay.io/openshift-community-operators/netobserv-operator@sha256:517a8aba77b9f644210859a3f98861d63c024e96c4b0516a7b631a84e48b21c3
  name: ""
schema: olm.bundle
---
image: quay.io/openshift-community-operators/netobserv-operator@sha256:844447ba37406e4a4a3cdd206b2ef17555a29d690dba3c033b42fcdd1f67770f
name: netobserv-operator.v0.1.3
package: netobserv-operator
properties:
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1alpha1
- type: olm.package
  value:
    packageName: netobserv-operator
    version: 0.1.3
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": "ipfix",
              "clusterNetworkOperator": {
                "namespace": "openshift-network-operator"
              },
              "consolePlugin": {
                "image": "quay.io/netobserv/network-observability-console-plugin:v0.1.3",
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "port": 9001,
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "register": true
              },
              "ebpf": {
                "cacheActiveTimeout": "5s",
                "cacheMaxFlows": 1000,
                "excludeInterfaces": [
                  "lo"
                ],
                "image": "quay.io/netobserv/netobserv-ebpf-agent:v0.1.1",
                "imagePullPolicy": "IfNotPresent",
                "interfaces": [],
                "logLevel": "info",
                "privileged": false,
                "sampling": 0
              },
              "flowlogsPipeline": {
                "enableKubeProbes": true,
                "healthPort": 8080,
                "image": "quay.io/netobserv/flowlogs-pipeline:v0.1.2",
                "imagePullPolicy": "IfNotPresent",
                "kind": "DaemonSet",
                "logLevel": "info",
                "port": 2055,
                "prometheusPort": 9090
              },
              "ipfix": {
                "cacheActiveTimeout": "60s",
                "cacheMaxFlows": 100,
                "sampling": 400
              },
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.network-observability",
                "enable": false,
                "topic": "network-flows"
              },
              "loki": {
                "batchSize": 102400,
                "batchWait": "1s",
                "maxBackoff": "300s",
                "maxRetries": 10,
                "minBackoff": "1s",
                "staticLabels": {
                  "app": "netobserv-flowcollector"
                },
                "url": "http://loki:3100/"
              },
              "namespace": "network-observability",
              "ovnKubernetes": {
                "containerName": "ovnkube-node",
                "daemonSetName": "ovnkube-node",
                "namespace": "ovn-kubernetes"
              }
            }
          }
        ]
      capabilities: Basic Install
      categories: Monitoring
      console.openshift.io/plugins: '["network-observability-plugin"]'
      containerImage: quay.io/netobserv/network-observability-operator:0.1.3
      createdAt: "2022-06-29T07:07:05Z"
      description: Network flows collector and monitoring solution
      operators.operatorframework.io/builder: operator-sdk-v1.16.0+git
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      repository: https://github.com/netobserv/network-observability-operator
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: FlowCollector is the Schema for the flowcollectors API, which
          pilots and configures netflow collection.
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1alpha1
    description: |-
      NetObserv Operator is an OpenShift / Kubernetes operator for network observability. It deploys a monitoring pipeline to collect and enrich network flows. These flows can be produced by a provided eBPF agent, or by any device or CNI able to export flows in IPFIX format, such as OVN-Kubernetes.

      The operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When used in OpenShift, new dashboards are available in the Console.

      This is an early release, we would be grateful if you could inform us of any issues.

      ## Dependencies

      - [Loki](https://grafana.com/oss/loki/) is required, it is used as a store for all collected flows.
      For a scalable deployment, please refer to [our distributed Loki guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md) or [Grafana's official documentation](https://grafana.com/docs/loki/latest/).
      For a quick install that is not suitable for production (it deploys a single pod, configures a 1GB storage PVC, with 24 hours of retention), run the following commands:

      ```
      kubectl create namespace network-observability
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/be14cbdca9af223f5472fffef05257089bc73c8a/examples/zero-click-loki/1-storage.yaml) -n network-observability
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/be14cbdca9af223f5472fffef05257089bc73c8a/examples/zero-click-loki/2-loki.yaml) -n network-observability
      ```

      - [Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.

      ## Configuration

      The `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/0.1.3/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/0.1.3/config/samples/flows_v1alpha1_flowcollector.yaml).

      As it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.

      A couple of settings deserve special attention:

      - Agent (`spec.agent`) can be `ipfix` or `ebpf`. The IPFIX option is fully functional when using [OVN-Kubernetes](https://github.com/ovn-org/ovn-kubernetes/) CNI. Other CNIs are not supported, but you may still be able to configure them manually if they allow IPFIX exports, whereas eBPF is expected to work regardless of the running CNI.

      - Sampling (`spec.ipfix.sampling` and `spec.ebpf.sampling`): 24/7 unsampled flow collection may consume a non-negligible amount of resources. While we are doing our best to make it a viable option in production, it is still often necessary to mitigate by setting a sampling ratio. A value of `100` means: one flow every 100 is sampled. `1` means no sampling. The lower it is, the more accurate are flows and derived metrics. By default, sampling is set to 400 for IPFIX, and is disabled for eBPF.

      - Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you may have to configure differently if you used another installation method.

      - Kafka (`spec.kafka`): _experimental_ - when enabled, integrate the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Assumes Kafka is already deployed and a topic is created.

      ## Overview

      ### OpenShift Console

      _Pre-requisite: OpenShift 4.10 or above_

      If the OpenShift Console is detected in the cluster, a console plugin is deployed when `FlowCollector` is installed. It adds new pages and tabs to the console:

      - A flow table, with powerful filtering and display options

      - A network topology, with the same filtering options and several levels of aggregations (nodes, namespaces, owner controllers, pods). A side panel provides contextual insight and metrics.

      These components are accessible directly from the main menu, and also as contextual tabs for any Pod, Deployment, Service (etc.) in their details page.

      ### Grafana

      Grafana can be used to retrieve and show the collected flows from Loki. In Grafana, add a new Loki data source that matches your setup. If you used the quick install commands provided above to install Loki, its access URL is `http://loki:3100`.

      To get dashboards, import [this file](https://github.com/netobserv/network-observability-operator/blob/0.1.3/config/samples/dashboards/Network%20Observability.json) into Grafana. It includes a table of the flows and some graphs showing the volumetry per source or destination namespaces or workload:

      See more info and screenshots on [GitHub's readme](https://github.com/netobserv/network-observability-operator/blob/0.1.3/README.md)

      ## F.A.Q / Troubleshooting

      See [the F.A.Q on GitHub](https://github.com/netobserv/network-observability-operator#faq--troubleshooting)
    displayName: NetObserv Operator
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - network observability
    - ebpf
    - ipfix
    - flow tracing
    - flows
    - topology
    - network
    - observability
    links:
    - name: Project page
      url: https://github.com/netobserv/network-observability-operator
    - name: Issue tracker
      url: https://github.com/netobserv/network-observability-operator/issues
    - name: Discussion board
      url: https://github.com/netobserv/network-observability-operator/discussions
    maintainers:
    - email: jtakvori@redhat.com
      name: Joel Takvorian
    - email: jpinsonn@redhat.com
      name: Julien Pinsonneau
    - email: mmaciasl@redhat.com
      name: Mario Macias
    - email: ocazade@redhat.com
      name: Olivier Cazade
    maturity: alpha
    provider:
      name: Red Hat
      url: https://www.redhat.com
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: quay.io/netobserv/network-observability-operator:0.1.3
  name: ""
- image: quay.io/openshift-community-operators/netobserv-operator@sha256:844447ba37406e4a4a3cdd206b2ef17555a29d690dba3c033b42fcdd1f67770f
  name: ""
schema: olm.bundle
---
image: quay.io/openshift-community-operators/netobserv-operator@sha256:555f28350d2f20cfe57de4ed6613afa2e537100cdb706738eccf18e48bf43994
name: netobserv-operator.v0.1.4
package: netobserv-operator
properties:
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1alpha1
- type: olm.package
  value:
    packageName: netobserv-operator
    version: 0.1.4
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": "ipfix",
              "clusterNetworkOperator": {
                "namespace": "openshift-network-operator"
              },
              "consolePlugin": {
                "image": "quay.io/netobserv/network-observability-console-plugin:v0.1.4",
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "port": 9001,
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "register": true
              },
              "ebpf": {
                "cacheActiveTimeout": "5s",
                "cacheMaxFlows": 1000,
                "excludeInterfaces": [
                  "lo"
                ],
                "image": "quay.io/netobserv/netobserv-ebpf-agent:v0.1.2",
                "imagePullPolicy": "IfNotPresent",
                "interfaces": [],
                "logLevel": "info",
                "privileged": false,
                "sampling": 0
              },
              "flowlogsPipeline": {
                "dropUnusedFields": true,
                "enableKubeProbes": true,
                "healthPort": 8080,
                "ignoreMetrics": [],
                "image": "quay.io/netobserv/flowlogs-pipeline:v0.1.3",
                "imagePullPolicy": "IfNotPresent",
                "kind": "DaemonSet",
                "logLevel": "info",
                "port": 2055,
                "prometheusPort": 9102
              },
              "ipfix": {
                "cacheActiveTimeout": "20s",
                "cacheMaxFlows": 400,
                "sampling": 400
              },
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.network-observability",
                "enable": false,
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "batchSize": 102400,
                "batchWait": "1s",
                "maxBackoff": "300s",
                "maxRetries": 10,
                "minBackoff": "1s",
                "staticLabels": {
                  "app": "netobserv-flowcollector"
                },
                "tls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki",
                    "type": "configmap"
                  },
                  "enable": false
                },
                "url": "http://loki.network-observability.svc:3100/"
              },
              "namespace": "network-observability",
              "ovnKubernetes": {
                "containerName": "ovnkube-node",
                "daemonSetName": "ovnkube-node",
                "namespace": "ovn-kubernetes"
              }
            }
          }
        ]
      capabilities: Basic Install
      categories: Monitoring
      console.openshift.io/plugins: '["network-observability-plugin"]'
      containerImage: quay.io/netobserv/network-observability-operator:0.1.4
      createdAt: "2022-08-08T16:02:25Z"
      description: Network flows collector and monitoring solution
      operators.operatorframework.io/builder: operator-sdk-v1.16.0+git
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      repository: https://github.com/netobserv/network-observability-operator
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: FlowCollector is the Schema for the flowcollectors API, which
          pilots and configures netflow collection.
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1alpha1
    description: |-
      NetObserv Operator is an OpenShift / Kubernetes operator for network observability. It deploys a monitoring pipeline to collect and enrich network flows. These flows can be produced by the NetObserv eBPF agent, or by any device or CNI able to export flows in IPFIX format, such as OVN-Kubernetes.

      The operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When used in OpenShift, new dashboards are available in the Console.

      This is an early release, we would be grateful if you could inform us of any issues.

      ## Dependencies

      - [Loki](https://grafana.com/oss/loki/) is required, it is used as a store for all collected flows.
      For a scalable deployment, please refer to [our distributed Loki guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md) or [Grafana's official documentation](https://grafana.com/docs/loki/latest/).
      For a quick install that is not suitable for production (it deploys a single pod, configures a 1GB storage PVC, with 24 hours of retention), run the following commands:

      ```
      kubectl create namespace network-observability
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/be14cbdca9af223f5472fffef05257089bc73c8a/examples/zero-click-loki/1-storage.yaml) -n network-observability
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/be14cbdca9af223f5472fffef05257089bc73c8a/examples/zero-click-loki/2-loki.yaml) -n network-observability
      ```

      - [Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.

      ## Configuration

      The `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/0.1.4/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/0.1.4/config/samples/flows_v1alpha1_flowcollector.yaml).

      As it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.

      A couple of settings deserve special attention:

      - Agent (`spec.agent`) can be `ipfix` or `ebpf`. The IPFIX option is fully functional when using [OVN-Kubernetes](https://github.com/ovn-org/ovn-kubernetes/) CNI. Other CNIs are not supported, but you may still be able to configure them manually if they allow IPFIX exports, whereas eBPF is expected to work regardless of the running CNI.

      - Sampling (`spec.ipfix.sampling` and `spec.ebpf.sampling`): 24/7 unsampled flow collection may consume a non-negligible amount of resources. While we are doing our best to make it a viable option in production, it is still often necessary to mitigate by setting a sampling ratio. A value of `100` means: one flow every 100 is sampled. `1` means no sampling. The lower it is, the more accurate are flows and derived metrics. By default, sampling is set to 400 for IPFIX, and is disabled for eBPF.

      - Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you may have to configure differently if you used another installation method.

      - Kafka (`spec.kafka`): _experimental_ - when enabled, integrate the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Assumes Kafka is already deployed and a topic is created.

      ## Overview

      ### OpenShift Console

      _Pre-requisite: OpenShift 4.10 or above_

      If the OpenShift Console is detected in the cluster, a console plugin is deployed when `FlowCollector` is installed. It adds new pages and tabs to the console:

      - A flow table, with powerful filtering and display options

      - A network topology, with the same filtering options and several levels of aggregations (nodes, namespaces, owner controllers, pods). A side panel provides contextual insight and metrics.

      These components are accessible directly from the main menu, and also as contextual tabs for any Pod, Deployment, Service (etc.) in their details page.

      ### Grafana

      Grafana can be used to retrieve and show the collected flows from Loki. In Grafana, add a new Loki data source that matches your setup. If you used the quick install commands provided above to install Loki, its access URL is `http://loki:3100`.

      To get dashboards, import [this file](https://github.com/netobserv/network-observability-operator/blob/0.1.4/config/samples/dashboards/Network%20Observability.json) into Grafana. It includes a table of the flows and some graphs showing the volumetry per source or destination namespaces or workload:

      See more info and screenshots on [GitHub's readme](https://github.com/netobserv/network-observability-operator/blob/0.1.4/README.md)

      ## F.A.Q / Troubleshooting

      See [the F.A.Q on GitHub](https://github.com/netobserv/network-observability-operator#faq--troubleshooting)
    displayName: NetObserv Operator
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - network observability
    - ebpf
    - ipfix
    - flow tracing
    - flows
    - topology
    - network
    - observability
    links:
    - name: Project page
      url: https://github.com/netobserv/network-observability-operator
    - name: Issue tracker
      url: https://github.com/netobserv/network-observability-operator/issues
    - name: Discussion board
      url: https://github.com/netobserv/network-observability-operator/discussions
    maintainers:
    - email: jtakvori@redhat.com
      name: Joel Takvorian
    - email: jpinsonn@redhat.com
      name: Julien Pinsonneau
    - email: mmaciasl@redhat.com
      name: Mario Macias
    - email: ocazade@redhat.com
      name: Olivier Cazade
    maturity: alpha
    provider:
      name: Red Hat
      url: https://www.redhat.com
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: quay.io/netobserv/network-observability-operator:0.1.4
  name: ""
- image: quay.io/openshift-community-operators/netobserv-operator@sha256:555f28350d2f20cfe57de4ed6613afa2e537100cdb706738eccf18e48bf43994
  name: ""
schema: olm.bundle
---
image: quay.io/openshift-community-operators/netobserv-operator@sha256:f5c5f93cfacfb0637a4ed20a9887491dd8bd5aa0ab487f1d5d2ddc263ff9dfe4
name: netobserv-operator.v0.2.0
package: netobserv-operator
properties:
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1alpha1
- type: olm.package
  value:
    packageName: netobserv-operator
    version: 0.2.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "image": "quay.io/netobserv/netobserv-ebpf-agent:v0.2.1",
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 10485760,
                  "logLevel": "info",
                  "privileged": false,
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "ipfix": {
                  "cacheActiveTimeout": "20s",
                  "cacheMaxFlows": 400,
                  "clusterNetworkOperator": {
                    "namespace": "openshift-network-operator"
                  },
                  "ovnKubernetes": {
                    "containerName": "ovnkube-node",
                    "daemonSetName": "ovnkube-node",
                    "namespace": "ovn-kubernetes"
                  },
                  "sampling": 400
                },
                "type": "EBPF"
              },
              "consolePlugin": {
                "autoscaler": null,
                "image": "quay.io/netobserv/network-observability-console-plugin:v0.1.5",
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "port": 9001,
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "register": true
              },
              "deploymentModel": "DIRECT",
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "batchSize": 10485760,
                "batchWait": "1s",
                "maxBackoff": "5s",
                "maxRetries": 2,
                "minBackoff": "1s",
                "staticLabels": {
                  "app": "netobserv-flowcollector"
                },
                "tls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki",
                    "type": "configmap"
                  },
                  "enable": false
                },
                "url": "http://loki.netobserv.svc:3100/"
              },
              "namespace": "netobserv",
              "processor": {
                "dropUnusedFields": true,
                "enableKubeProbes": true,
                "healthPort": 8080,
                "image": "quay.io/netobserv/flowlogs-pipeline:v0.1.4",
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "metrics": {
                  "ignoreTags": [
                    "egress",
                    "packets"
                  ],
                  "server": {
                    "port": 9102
                  }
                },
                "port": 2055,
                "profilePort": 6060,
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              }
            }
          }
        ]
      capabilities: Basic Install
      categories: Monitoring
      console.openshift.io/plugins: '["netobserv-plugin"]'
      containerImage: quay.io/netobserv/network-observability-operator:0.2.0
      createdAt: "2022-10-25T09:40:09Z"
      description: Network flows collector and monitoring solution
      operators.operatorframework.io/builder: operator-sdk-v1.22.2
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      repository: https://github.com/netobserv/network-observability-operator
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: FlowCollector is the Schema for the flowcollectors API, which
          pilots and configures netflow collection.
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1alpha1
    description: "NetObserv Operator is an OpenShift / Kubernetes operator for network
      observability. It deploys a monitoring pipeline to collect and enrich network
      flows. These flows can be produced by the NetObserv eBPF agent, or by any device
      or CNI able to export flows in IPFIX format, such as OVN-Kubernetes.\n\nThe
      operator provides dashboards, metrics, and keeps flows accessible in a queryable
      log store, Grafana Loki. When used in OpenShift, new dashboards are available
      in the Console.\n\n**Note**: This version 0.2.0 cannot be upgraded automatically
      from 0.1.x. To upgrade, you need to manually uninstall the `FlowCollector` resource
      and the NetObserv operator first. \n\n## Dependencies\n\n- [Loki](https://grafana.com/oss/loki/)
      is required, it is used as a store for all collected flows.\nFor a scalable
      deployment, please refer to [our distributed Loki guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md)
      or [Grafana's official documentation](https://grafana.com/docs/loki/latest/).\nFor
      a quick install that is not suitable for production (it deploys a single pod,
      configures a 1GB storage PVC, with 24 hours of retention), run the following
      commands:\n\n```\nkubectl create namespace netobserv\nkubectl apply -f <(curl
      -L https://raw.githubusercontent.com/netobserv/documents/f0a1816aa15ea27185cae1cd597f982a5c72935d/examples/zero-click-loki/1-storage.yaml)
      -n netobserv\nkubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/f0a1816aa15ea27185cae1cd597f982a5c72935d/examples/zero-click-loki/2-loki.yaml)
      -n netobserv\n```\n\n- [Grafana](https://grafana.com/oss/grafana/) can optionally
      be installed for custom dashboards and query capabilities.\n\n## Configuration\n\nThe
      `FlowCollector` resource is used to configure the operator and its managed components.
      A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/0.1.4/docs/FlowCollector.md),
      and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/0.1.4/config/samples/flows_v1alpha1_flowcollector.yaml).\n\nAs
      it operates cluster-wide, only a single `FlowCollector` is allowed, and it has
      to be named `cluster`.\n\nA couple of settings deserve special attention:\n\n-
      Agent (`spec.agent.type`) can be `EBPF` or `IPFIX`. eBPF is recommended, as
      it should work in more situations and offers better performances. If you can't,
      or don't want to use eBPF, note that the IPFIX option is fully functional only
      when using [OVN-Kubernetes](https://github.com/ovn-org/ovn-kubernetes/) CNI.
      Other CNIs are not officially supported, but you may still be able to configure
      them manually if they allow IPFIX exports.\n\n- Sampling (`spec.agent.ebpf.sampling`
      and `spec.agent.ipfix.sampling`): 24/7, 1:1 sampled flow collection may consume
      a non-negligible amount of resources. While we are doing our best to make it
      a viable option in production, it is still sometimes necessary to mitigate by
      setting a sampling ratio. A value of `100` means: one flow every 100 is sampled.
      `1` means all flows are sampled. The lower it is, the more flows you get, and
      the more accurate are derived metrics. By default, sampling is set to 50 (ie.
      1:50) for eBPF and 400 (1:400) for IPFIX. Note that more sampled flows also
      means more storage needed. We recommend to start with default values and refine
      empirically, to figure out which setting your cluster can manage.\n\n- Loki
      (`spec.loki`): configure here how to reach Loki. The default values match the
      Loki quick install paths mentioned above, but you may have to configure differently
      if you used another installation method.\n\n- Kafka (`spec.kafka`): when enabled,
      integrate the flow collection pipeline with Kafka, by splitting ingestion from
      transformation (kube enrichment, derived metrics, ...). Kafka can provide better
      scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)).
      Assumes Kafka is already deployed and a topic is created.\n\n## Overview\n\n###
      OpenShift Console\n\n_Pre-requisite: OpenShift 4.10 or above_\n\nIf the OpenShift
      Console is detected in the cluster, a console plugin is deployed when `FlowCollector`
      is installed. It adds new pages and tabs to the console:\n\n- A flow table,
      with powerful filtering and display options\n\n- A network topology, with the
      same filtering options and several levels of aggregations (nodes, namespaces,
      owner controllers, pods). A side panel provides contextual insight and metrics.\n\nThese
      components are accessible directly from the main menu, and also as contextual
      tabs for any Pod, Deployment, Service (etc.) in their details page.\n\n### Grafana\n\nGrafana
      can be used to retrieve and show the collected flows from Loki. In Grafana,
      add a new Loki data source that matches your setup. If you used the quick install
      commands provided above to install Loki, its access URL is `http://loki:3100`.\n\nTo
      get dashboards, import [this file](https://github.com/netobserv/network-observability-operator/blob/0.1.4/config/samples/dashboards/Network%20Observability.json)
      into Grafana. It includes a table of the flows and some graphs showing the volumetry
      per source or destination namespaces or workload:\n\nSee more info and screenshots
      on [GitHub's readme](https://github.com/netobserv/network-observability-operator/blob/0.1.4/README.md)\n\n##
      F.A.Q / Troubleshooting\n\nSee [the F.A.Q on GitHub](https://github.com/netobserv/network-observability-operator#faq--troubleshooting)"
    displayName: NetObserv Operator
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - network observability
    - ebpf
    - ipfix
    - flow tracing
    - flows
    - topology
    - network
    - observability
    links:
    - name: Project page
      url: https://github.com/netobserv/network-observability-operator
    - name: Issue tracker
      url: https://github.com/netobserv/network-observability-operator/issues
    - name: Discussion board
      url: https://github.com/netobserv/network-observability-operator/discussions
    maintainers:
    - email: jtakvori@redhat.com
      name: Joel Takvorian
    - email: jpinsonn@redhat.com
      name: Julien Pinsonneau
    - email: mmaciasl@redhat.com
      name: Mario Macias
    - email: ocazade@redhat.com
      name: Olivier Cazade
    maturity: alpha
    provider:
      name: Red Hat
      url: https://www.redhat.com
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: quay.io/netobserv/network-observability-operator:0.2.0
  name: ""
- image: quay.io/openshift-community-operators/netobserv-operator@sha256:f5c5f93cfacfb0637a4ed20a9887491dd8bd5aa0ab487f1d5d2ddc263ff9dfe4
  name: ""
schema: olm.bundle
---
image: quay.io/openshift-community-operators/netobserv-operator@sha256:6bc3675bcccd3276a7b1f6627e4409bf61bac2b4a43771431c9b5a0232cbf5ce
name: netobserv-operator.v0.2.1
package: netobserv-operator
properties:
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1alpha1
- type: olm.package
  value:
    packageName: netobserv-operator
    version: 0.2.1
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 10485760,
                  "logLevel": "info",
                  "privileged": false,
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "ipfix": {
                  "cacheActiveTimeout": "20s",
                  "cacheMaxFlows": 400,
                  "clusterNetworkOperator": {
                    "namespace": "openshift-network-operator"
                  },
                  "ovnKubernetes": {
                    "containerName": "ovnkube-node",
                    "daemonSetName": "ovnkube-node",
                    "namespace": "ovn-kubernetes"
                  },
                  "sampling": 400
                },
                "type": "EBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "DISABLED"
                },
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "port": 9001,
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "dst_namespace!": "openshift-,netobserv",
                      "src_namespace!": "openshift-,netobserv"
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "dst_namespace": "openshift-,netobserv",
                      "src_namespace": "openshift-,netobserv"
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "Pod",
                      "src_kind": "Pod"
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "Service"
                    },
                    "name": "Services network"
                  }
                ],
                "register": true
              },
              "deploymentModel": "DIRECT",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "batchSize": 10485760,
                "batchWait": "1s",
                "maxBackoff": "5s",
                "maxRetries": 2,
                "minBackoff": "1s",
                "staticLabels": {
                  "app": "netobserv-flowcollector"
                },
                "tls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false
                },
                "url": "http://loki.netobserv.svc:3100/"
              },
              "namespace": "netobserv",
              "processor": {
                "dropUnusedFields": true,
                "enableKubeProbes": true,
                "healthPort": 8080,
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "metrics": {
                  "ignoreTags": [
                    "egress",
                    "packets"
                  ],
                  "server": {
                    "port": 9102
                  }
                },
                "port": 2055,
                "profilePort": 6060,
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              }
            }
          }
        ]
      capabilities: Basic Install
      categories: Monitoring
      console.openshift.io/plugins: '["netobserv-plugin"]'
      containerImage: quay.io/netobserv/network-observability-operator:0.2.1
      createdAt: "2022-12-07T09:00:48Z"
      description: Network flows collector and monitoring solution
      operators.operatorframework.io/builder: operator-sdk-v1.25.2
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      repository: https://github.com/netobserv/network-observability-operator
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: FlowCollector is the Schema for the flowcollectors API, which
          pilots and configures netflow collection.
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1alpha1
    description: |-
      NetObserv Operator is an OpenShift / Kubernetes operator for network observability. It deploys a monitoring pipeline to collect and enrich network flows. These flows can be produced by the NetObserv eBPF agent, or by any device or CNI able to export flows in IPFIX format, such as OVN-Kubernetes.

      The operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When used in OpenShift, new views are available in the Console.

      ## Dependencies

      ### Loki

      [Loki](https://grafana.com/oss/loki/), from GrafanaLabs, is the backend that is used to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.

      For a normal usage, we recommend two options:

      - Installing the [Loki Operator](https://loki-operator.dev/docs/prologue/quickstart.md/). We have written [a guide](https://github.com/netobserv/documents/blob/main/loki_operator.md) to help you through those steps. Please note that it requires configuring an object storage. Note also that the Loki Operator can also be used for [OpenShift cluster logging](https://docs.openshift.com/container-platform/4.11/logging/cluster-logging.html). If you do so, you should not share the same `LokiStack` for Logging and NetObserv.

      - Installing using [Grafana's official documentation](https://grafana.com/docs/loki/latest/). Here also we wrote a ["distributed Loki" step by step guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md).

      For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 1GB storage PVC, with 24 hours of retention), you can simply run the following commands:

      ```
      kubectl create namespace netobserv
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/1-storage.yaml) -n netobserv
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/2-loki.yaml) -n netobserv
      ```

      ### Kafka

      [Apache Kafka](https://kafka.apache.org/) can optionnaly be used for a more resilient and scalable architecture. You can use for instance [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.

      ### Grafana

      [Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.

      ## Configuration

      The `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/0.2.1/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/0.2.1/config/samples/flows_v1alpha1_flowcollector.yaml).

      To edit configuration in cluster, run:

      ```bash
      kubectl edit flowcollector cluster
      ```

      As it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.

      A couple of settings deserve special attention:

      - Agent (`spec.agent.type`) can be `EBPF` (default) or `IPFIX`. eBPF is recommended, as it should work in more situations and offers better performances. If you can't, or don't want to use eBPF, note that the IPFIX option is fully functional only when using [OVN-Kubernetes](https://github.com/ovn-org/ovn-kubernetes/) CNI. Other CNIs are not officially supported, but you may still be able to configure them manually if they allow IPFIX exports.

      - Sampling (`spec.agent.ebpf.sampling` and `spec.agent.ipfix.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50) for eBPF and 400 (1:400) for IPFIX. Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.

      - Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you may have to configure differently if you used another installation method.

      - Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/0.2.1/docs/QuickFilters.md).

      - Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.

      - Exporters (`spec.exporters`, _experimental_) an optional list of exporters to which to send enriched flows. Currently only KAFKA is supported. This allows you to define any custom storage or processing that can read from Kafka. This feature is flagged as _experimental_ as it has not been thoroughly or stress tested yet, so use at your own risk.

      ## Further reading

      Please refer to the documentation on GitHub more more information.

      This documentation includes:

      - An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots
      - A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning
      - A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section
      - A [F.A.Q](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section
    displayName: NetObserv Operator
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - network observability
    - ebpf
    - ipfix
    - flow tracing
    - flows
    - topology
    - network
    - observability
    links:
    - name: Project page
      url: https://github.com/netobserv/network-observability-operator
    - name: Issue tracker
      url: https://github.com/netobserv/network-observability-operator/issues
    - name: Discussion board
      url: https://github.com/netobserv/network-observability-operator/discussions
    maintainers:
    - email: jtakvori@redhat.com
      name: Joel Takvorian
    - email: jpinsonn@redhat.com
      name: Julien Pinsonneau
    - email: mmaciasl@redhat.com
      name: Mario Macias
    - email: ocazade@redhat.com
      name: Olivier Cazade
    maturity: alpha
    provider:
      name: Red Hat
      url: https://www.redhat.com
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  name: ""
- image: quay.io/netobserv/flowlogs-pipeline:v0.1.5
  name: flowlogs-pipeline
- image: quay.io/netobserv/netobserv-ebpf-agent:v0.2.2
  name: ebpf-agent
- image: quay.io/netobserv/network-observability-console-plugin:v0.1.6
  name: console-plugin
- image: quay.io/netobserv/network-observability-operator:0.2.1
  name: ""
- image: quay.io/openshift-community-operators/netobserv-operator@sha256:6bc3675bcccd3276a7b1f6627e4409bf61bac2b4a43771431c9b5a0232cbf5ce
  name: ""
schema: olm.bundle
---
image: quay.io/community-operator-pipeline-prod/netobserv-operator@sha256:a69c5f04189393170b8cc897be955d6f9e4b2709066dc0de1f140cec1c712a47
name: netobserv-operator.v1.5.0-community
package: netobserv-operator
properties:
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1alpha1
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1beta1
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1beta2
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowMetric
    version: v1alpha1
- type: olm.package
  value:
    packageName: netobserv-operator
    version: 1.5.0-community
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "deploymentModel": "DIRECT"
            }
          },
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowMetric",
            "metadata": {
              "labels": {
                "app.kubernetes.io/created-by": "netobserv-operator",
                "app.kubernetes.io/instance": "flowmetric-sample",
                "app.kubernetes.io/managed-by": "kustomize",
                "app.kubernetes.io/name": "flowmetric",
                "app.kubernetes.io/part-of": "netobserv-operator"
              },
              "name": "flowmetric-sample"
            },
            "spec": {
              "filters": [
                {
                  "field": "DstPort",
                  "matchType": "Regex",
                  "value": "^\\d\\d?\\d?\\d?$"
                },
                {
                  "field": "Duplicate",
                  "value": "false"
                },
                {
                  "field": "FlowDirection",
                  "matchType": "Regex",
                  "value": "1|2"
                }
              ],
              "labels": [
                "DstPort"
              ],
              "metricName": "service_ports_total",
              "type": "Counter"
            }
          },
          {
            "apiVersion": "flows.netobserv.io/v1beta1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 1048576,
                  "logLevel": "info",
                  "privileged": false,
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "type": "EBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "DISABLED"
                },
                "enable": true,
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "port": 9001,
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "flow_layer": "app"
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "flow_layer": "infra"
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "Pod",
                      "src_kind": "Pod"
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "Service"
                    },
                    "name": "Services network"
                  }
                ],
                "register": true
              },
              "deploymentModel": "DIRECT",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "batchSize": 10485760,
                "batchWait": "1s",
                "enable": true,
                "maxBackoff": "5s",
                "maxRetries": 2,
                "minBackoff": "1s",
                "statusTls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false,
                  "userCert": {
                    "certFile": "tls.crt",
                    "certKey": "tls.key",
                    "name": "loki-query-frontend-http",
                    "type": "secret"
                  }
                },
                "tls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-gateway-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false
                },
                "url": "http://loki.netobserv.svc:3100/"
              },
              "namespace": "netobserv",
              "processor": {
                "conversationEndTimeout": "10s",
                "conversationHeartbeatInterval": "30s",
                "conversationTerminatingTimeout": "5s",
                "dropUnusedFields": true,
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "logTypes": "FLOWS",
                "metrics": {
                  "disableAlerts": [],
                  "includeList": [
                    "node_ingress_bytes_total",
                    "workload_ingress_bytes_total",
                    "namespace_flows_total"
                  ],
                  "server": {
                    "port": 9102
                  }
                },
                "port": 2055,
                "profilePort": 6060,
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              }
            }
          },
          {
            "apiVersion": "flows.netobserv.io/v1beta2",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 1048576,
                  "logLevel": "info",
                  "privileged": false,
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "type": "eBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "Disabled"
                },
                "enable": true,
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "flow_layer": "app"
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "flow_layer": "infra"
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "Pod",
                      "src_kind": "Pod"
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "Service"
                    },
                    "name": "Services network"
                  }
                ],
                "replicas": 1,
                "resources": {
                  "limits": {
                    "memory": "100Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "50Mi"
                  }
                }
              },
              "deploymentModel": "Direct",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "enable": true,
                "lokiStack": {
                  "name": "loki"
                },
                "mode": "Monolithic",
                "monolithic": {
                  "tenantID": "netobserv",
                  "tls": {
                    "caCert": {
                      "certFile": "service-ca.crt",
                      "name": "loki-gateway-ca-bundle",
                      "type": "configmap"
                    },
                    "enable": false
                  },
                  "url": "http://loki.netobserv.svc:3100/"
                },
                "readTimeout": "30s",
                "writeBatchSize": 10485760,
                "writeBatchWait": "1s",
                "writeTimeout": "10s"
              },
              "namespace": "netobserv",
              "processor": {
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "logTypes": "Flows",
                "metrics": {
                  "disableAlerts": [],
                  "server": {
                    "port": 9102
                  }
                },
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              }
            }
          }
        ]
      capabilities: Seamless Upgrades
      categories: Monitoring, Networking
      console.openshift.io/plugins: '["netobserv-plugin"]'
      containerImage: quay.io/netobserv/network-observability-operator:1.0.5
      createdAt: "2024-02-19T10:21:38Z"
      description: Network flows collector and monitoring solution
      operatorframework.io/initialization-resource: '{"apiVersion":"flows.netobserv.io/v1beta2",
        "kind":"FlowCollector","metadata":{"name":"cluster"},"spec": {}}'
      operatorframework.io/suggested-namespace: openshift-netobserv-operator
      operators.operatorframework.io/builder: operator-sdk-v1.25.3
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      repository: https://github.com/netobserv/network-observability-operator
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: FlowCollector is the Schema for the flowcollectors API, which
          pilots and configures netflow collection.
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1alpha1
      - description: '`FlowCollector` is the schema for the network flows collection
          API, which pilots and configures the underlying deployments.'
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1beta1
      - description: '`FlowCollector` is the schema for the network flows collection
          API, which pilots and configures the underlying deployments.'
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        specDescriptors:
        - description: defines the desired type of deployment for flow processing.
          displayName: Deployment model
          path: deploymentModel
        - description: for flows extraction.
          displayName: Agent configuration
          path: agent
        - path: agent.type
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - path: agent.ipfix
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: Settings related to the eBPF-based flow reporter.
          displayName: eBPF Agent configuration
          path: agent.ebpf
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:agent.type:eBPF
        - displayName: Privileged mode
          path: agent.ebpf.privileged
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Cache active timeout
          path: agent.ebpf.cacheActiveTimeout
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Cache max flows
          path: agent.ebpf.cacheMaxFlows
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka batch size
          path: agent.ebpf.kafkaBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Log level
          path: agent.ebpf.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: agent.ebpf.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: agent.ebpf.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
        - path: agent.ebpf.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: to use Kafka as a broker as part of the flow collection pipeline.
          displayName: Kafka configuration
          path: kafka
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
        - displayName: TLS configuration
          path: kafka.tls
        - path: kafka.tls.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Insecure
          path: kafka.tls.insecureSkipVerify
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - displayName: User certificate when using mTLS
          path: kafka.tls.userCert
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - displayName: CA certificate
          path: kafka.tls.caCert
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - path: kafka.sasl
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: of the component that receives the flows from the agent, enriches
            them, generates metrics, and forwards them to the Loki persistence layer
            and/or any available exporter.
          displayName: Processor configuration
          path: processor
        - displayName: Multi-cluster deployment
          path: processor.multiClusterDeployment
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Cluster name
          path: processor.clusterName
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.multiClusterDeployment:true
        - displayName: Availability zones
          path: processor.addZone
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - path: processor.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - displayName: Metrics configuration
          path: processor.metrics
        - displayName: Server configuration
          path: processor.metrics.server
        - displayName: TLS configuration
          path: processor.metrics.server.tls
        - displayName: Insecure
          path: processor.metrics.server.tls.insecureSkipVerify
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: Cert
          path: processor.metrics.server.tls.provided
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: CA
          path: processor.metrics.server.tls.providedCaFile
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: Kafka consumer replicas
          path: processor.kafkaConsumerReplicas
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: kafka consumer autoscaler
          path: processor.kafkaConsumerAutoscaler
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka consumer queue capacity
          path: processor.kafkaConsumerQueueCapacity
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka consumer batch size
          path: processor.kafkaConsumerBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Log level
          path: processor.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: processor.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: processor.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
        - description: for the flow store.
          displayName: Loki client settings
          path: loki
        - displayName: Enable
          path: loki.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Mode
          path: loki.mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
        - displayName: Loki stack
          path: loki.lokiStack
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:LokiStack
        - displayName: Monolithic
          path: loki.monolithic
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Monolithic
        - displayName: Microservices
          path: loki.microservices
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Microservices
        - displayName: Manual
          path: loki.manual
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Manual
        - displayName: Write batch wait
          path: loki.writeBatchWait
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Write batch size
          path: loki.writeBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Write timeout
          path: loki.writeTimeout
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - path: loki.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: related to the OpenShift Console integration.
          displayName: Console plugin configuration
          path: consolePlugin
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
        - displayName: Enable
          path: consolePlugin.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Port naming
          path: consolePlugin.portNaming
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - displayName: Quick filters
          path: consolePlugin.quickFilters
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - displayName: Replicas
          path: consolePlugin.replicas
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Horizontal pod autoscaler
          path: consolePlugin.autoscaler
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Log level
          path: consolePlugin.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: consolePlugin.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: consolePlugin.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - path: consolePlugin.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: additional optional exporters for custom consumption or storage.
          displayName: Exporters
          path: exporters
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Type
          path: exporters[0].type
        - displayName: IPFIX configuration
          path: exporters[0].ipfix
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:IPFIX
        - displayName: Kafka configuration
          path: exporters[0].kafka
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:Kafka
        - displayName: Exclude interfaces
          path: agent.ebpf.excludeInterfaces
        - displayName: Features
          path: agent.ebpf.features
        - displayName: Interfaces
          path: agent.ebpf.interfaces
        - displayName: Sampling
          path: agent.ebpf.sampling
        - displayName: Enable
          path: consolePlugin.portNaming.enable
        - displayName: Port names
          path: consolePlugin.portNaming.portNames
        - displayName: Address
          path: kafka.address
        - displayName: Topic
          path: kafka.topic
        - displayName: Name
          path: loki.lokiStack.name
        - displayName: Namespace
          path: loki.lokiStack.namespace
        - displayName: Auth token
          path: loki.manual.authToken
        - displayName: Ingester url
          path: loki.manual.ingesterUrl
        - displayName: Querier url
          path: loki.manual.querierUrl
        - displayName: Status url
          path: loki.manual.statusUrl
        - displayName: TenantID
          path: loki.manual.tenantID
        - displayName: Ingester url
          path: loki.microservices.ingesterUrl
        - displayName: Querier url
          path: loki.microservices.querierUrl
        - displayName: TenantID
          path: loki.microservices.tenantID
        - displayName: TenantID
          path: loki.monolithic.tenantID
        - displayName: Url
          path: loki.monolithic.url
        - displayName: Read timeout
          path: loki.readTimeout
        - displayName: Namespace
          path: namespace
        - displayName: Log types
          path: processor.logTypes
        - displayName: Disable alerts
          path: processor.metrics.disableAlerts
        - displayName: Include list
          path: processor.metrics.includeList
        - displayName: Port
          path: processor.metrics.server.port
        statusDescriptors:
        - description: Namespace where console plugin and flowlogs-pipeline have been
            deployed.
          displayName: Namespace
          path: namespace
          x-descriptors:
          - urn:alm:descriptor:text
        - description: Conditions of the FlowCollector instance health.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta2
      - description: '`FlowMetric` is the schema for the custom metrics API, which
          allows to generate more metrics out of flow logs. It is at an early stage
          of development (dev preview) and thus is currently not supported. Creating
          metrics with high labels cardinality might impact the cluster stability.'
        displayName: Flow Metric
        kind: FlowMetric
        name: flowmetrics.flows.netobserv.io
        version: v1alpha1
    description: |-
      NetObserv Operator is an OpenShift / Kubernetes operator for network observability. It deploys a monitoring pipeline to collect and enrich network flows. These flows can be produced by the NetObserv eBPF agent, or by any device or CNI able to export flows in IPFIX format, such as OVN-Kubernetes.

      The operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When used in OpenShift, new views are available in the Console.

      ## Dependencies

      ### Loki

      [Loki](https://grafana.com/oss/loki/), from GrafanaLabs, is the backend that is used to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.

      For normal usage, we recommend two options:

      - Installing the [Loki Operator](https://loki-operator.dev/docs/prologue/quickstart.md/). We have written [a guide](https://github.com/netobserv/documents/blob/main/loki_operator.md) to help you through those steps. Please note that it requires configuring an object storage. Note also that the Loki Operator can also be used for [OpenShift cluster logging](https://docs.openshift.com/container-platform/4.11/logging/cluster-logging.html). If you do so, you should not share the same `LokiStack` for Logging and NetObserv.

      - Installing using [Grafana's official documentation](https://grafana.com/docs/loki/latest/). Here also we wrote a ["distributed Loki" step by step guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md).

      For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 10GB storage PVC, with 24 hours of retention), you can simply run the following commands:

      ```
      kubectl create namespace netobserv
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/1-storage.yaml) -n netobserv
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/2-loki.yaml) -n netobserv
      ```

      ### Kafka

      [Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for example [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.

      ### Grafana

      [Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.

      ## Configuration

      The `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.0.5/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.0.5/config/samples/flows_v1beta1_flowcollector.yaml).

      To edit configuration in cluster, run:

      ```bash
      kubectl edit flowcollector cluster
      ```

      As it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.

      A couple of settings deserve special attention:

      - Agent (`spec.agent.type`) can be `EBPF` (default) or `IPFIX`. eBPF is recommended, as it should work in more situations and offers better performances. If you can't, or don't want to use eBPF, note that the IPFIX option is fully functional only when using [OVN-Kubernetes](https://github.com/ovn-org/ovn-kubernetes/) CNI. Other CNIs are not officially supported, but you might still be able to configure them manually if they allow IPFIX exports.

      - Sampling (`spec.agent.ebpf.sampling` and `spec.agent.ipfix.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50) for eBPF and 400 (1:400) for IPFIX. Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.

      - Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you might have to configure differently if you used another installation method.

      - Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.0.5/docs/QuickFilters.md).

      - Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.

      - Exporters (`spec.exporters`) an optional list of exporters to which to send enriched flows. KAFKA and IPFIX exporters are supported. This allows you to define any custom storage or processing that can read from Kafka or use the IPFIX standard.

      ## Further reading

      Please refer to the documentation on GitHub for more information.

      This documentation includes:

      - An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots
      - A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning
      - A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section
      - An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section
    displayName: NetObserv Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - network observability
    - ebpf
    - ipfix
    - flow tracing
    - flows
    - topology
    - network
    - observability
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
      operatorframework.io/os.linux: supported
    links:
    - name: Project page
      url: https://github.com/netobserv/network-observability-operator
    - name: Issue tracker
      url: https://github.com/netobserv/network-observability-operator/issues
    - name: Discussion board
      url: https://github.com/netobserv/network-observability-operator/discussions
    maintainers:
    - email: jpinsonn@redhat.com
      name: Julien Pinsonneau
    - email: jtakvori@redhat.com
      name: Joel Takvorian
    - email: kmeth@redhat.com
      name: Kalman Meth
    - email: mmahmoud@redhat.com
      name: Mohamed S. Mahmoud
    - email: ocazade@redhat.com
      name: Olivier Cazade
    - email: rschaffe@redhat.com
      name: Ronen Schaffer
    - email: stlee@redhat.com
      name: Steven Lee
    maturity: alpha
    minKubeVersion: 1.23.0
    provider:
      name: Red Hat
      url: https://www.redhat.com
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.15.0
  name: ""
- image: quay.io/community-operator-pipeline-prod/netobserv-operator@sha256:a69c5f04189393170b8cc897be955d6f9e4b2709066dc0de1f140cec1c712a47
  name: ""
- image: quay.io/netobserv/flowlogs-pipeline:v0.1.11
  name: flowlogs-pipeline
- image: quay.io/netobserv/netobserv-ebpf-agent:v0.3.3
  name: ebpf-agent
- image: quay.io/netobserv/network-observability-console-plugin:v0.1.12
  name: console-plugin
- image: quay.io/netobserv/network-observability-operator:1.0.5
  name: ""
schema: olm.bundle
---
image: quay.io/community-operator-pipeline-prod/netobserv-operator@sha256:3688fdb0bfdb3ea13a50090fcdb628809b2cd1ce2ef36ef1626bf7b518b145e9
name: netobserv-operator.v1.6.0-community
package: netobserv-operator
properties:
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1beta1
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1beta2
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowMetric
    version: v1alpha1
- type: olm.package
  value:
    packageName: netobserv-operator
    version: 1.6.0-community
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowMetric",
            "metadata": {
              "labels": {
                "app.kubernetes.io/created-by": "netobserv-operator",
                "app.kubernetes.io/instance": "flowmetric-sample",
                "app.kubernetes.io/managed-by": "kustomize",
                "app.kubernetes.io/name": "flowmetric",
                "app.kubernetes.io/part-of": "netobserv-operator"
              },
              "name": "flowmetric-sample"
            },
            "spec": {
              "charts": [
                {
                  "dashboardName": "Main",
                  "queries": [
                    {
                      "legend": "",
                      "promQL": "sum(rate($METRIC[2m]))"
                    }
                  ],
                  "title": "External ingress traffic",
                  "type": "SingleStat",
                  "unit": "Bps"
                },
                {
                  "dashboardName": "Main",
                  "queries": [
                    {
                      "legend": "{{DstK8S_Namespace}} / {{DstK8S_OwnerName}}",
                      "promQL": "sum(rate($METRIC{DstK8S_Namespace!=\"\"}[2m])) by (DstK8S_Namespace, DstK8S_OwnerName)"
                    }
                  ],
                  "sectionName": "External",
                  "title": "Top external ingress traffic per workload",
                  "type": "StackArea",
                  "unit": "Bps"
                }
              ],
              "direction": "Ingress",
              "filters": [
                {
                  "field": "SrcSubnetLabel",
                  "matchType": "Absence"
                }
              ],
              "labels": [
                "DstK8S_HostName",
                "DstK8S_Namespace",
                "DstK8S_OwnerName",
                "DstK8S_OwnerType"
              ],
              "metricName": "cluster_external_ingress_bytes_total",
              "type": "Counter",
              "valueField": "Bytes"
            }
          },
          {
            "apiVersion": "flows.netobserv.io/v1beta1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 1048576,
                  "logLevel": "info",
                  "privileged": false,
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "type": "EBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "DISABLED"
                },
                "enable": true,
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "port": 9001,
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "flow_layer": "app"
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "flow_layer": "infra"
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "Pod",
                      "src_kind": "Pod"
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "Service"
                    },
                    "name": "Services network"
                  }
                ],
                "register": true
              },
              "deploymentModel": "DIRECT",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "batchSize": 10485760,
                "batchWait": "1s",
                "enable": true,
                "maxBackoff": "5s",
                "maxRetries": 2,
                "minBackoff": "1s",
                "statusTls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false,
                  "userCert": {
                    "certFile": "tls.crt",
                    "certKey": "tls.key",
                    "name": "loki-query-frontend-http",
                    "type": "secret"
                  }
                },
                "tls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-gateway-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false
                },
                "url": "http://loki.netobserv.svc:3100/"
              },
              "namespace": "netobserv",
              "processor": {
                "conversationEndTimeout": "10s",
                "conversationHeartbeatInterval": "30s",
                "conversationTerminatingTimeout": "5s",
                "dropUnusedFields": true,
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "logTypes": "FLOWS",
                "metrics": {
                  "disableAlerts": [],
                  "includeList": [
                    "node_ingress_bytes_total",
                    "workload_ingress_bytes_total",
                    "namespace_flows_total"
                  ],
                  "server": {
                    "port": 9102
                  }
                },
                "port": 2055,
                "profilePort": 6060,
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              }
            }
          },
          {
            "apiVersion": "flows.netobserv.io/v1beta2",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 1048576,
                  "logLevel": "info",
                  "metrics": {
                    "server": {
                      "port": 9400
                    }
                  },
                  "privileged": false,
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "type": "eBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "Disabled"
                },
                "enable": true,
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "flow_layer": "\"app\""
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "flow_layer": "\"infra\""
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "\"Pod\"",
                      "src_kind": "\"Pod\""
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "\"Service\""
                    },
                    "name": "Services network"
                  }
                ],
                "replicas": 1,
                "resources": {
                  "limits": {
                    "memory": "100Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "50Mi"
                  }
                }
              },
              "deploymentModel": "Direct",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "enable": true,
                "lokiStack": {
                  "name": "loki"
                },
                "mode": "Monolithic",
                "monolithic": {
                  "tenantID": "netobserv",
                  "tls": {
                    "caCert": {
                      "certFile": "service-ca.crt",
                      "name": "loki-gateway-ca-bundle",
                      "type": "configmap"
                    },
                    "enable": false
                  },
                  "url": "http://loki.netobserv.svc:3100/"
                },
                "readTimeout": "30s",
                "writeBatchSize": 10485760,
                "writeBatchWait": "1s",
                "writeTimeout": "10s"
              },
              "namespace": "netobserv",
              "processor": {
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "logTypes": "Flows",
                "metrics": {
                  "disableAlerts": [],
                  "server": {
                    "port": 9401
                  }
                },
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              },
              "prometheus": {
                "querier": {
                  "enable": true,
                  "mode": "Auto",
                  "timeout": "30s"
                }
              }
            }
          }
        ]
      capabilities: Seamless Upgrades
      categories: Monitoring, Networking
      console.openshift.io/plugins: '["netobserv-plugin"]'
      containerImage: quay.io/netobserv/network-observability-operator:1.6.0-community
      createdAt: "2024-05-28T11:33:28Z"
      description: Network flows collector and monitoring solution
      operatorframework.io/initialization-resource: '{"apiVersion":"flows.netobserv.io/v1beta2",
        "kind":"FlowCollector","metadata":{"name":"cluster"},"spec": {}}'
      operatorframework.io/suggested-namespace: openshift-netobserv-operator
      operators.operatorframework.io/builder: operator-sdk-v1.25.3
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      repository: https://github.com/netobserv/network-observability-operator
      support: NetObserv team
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: '`FlowCollector` is the schema for the network flows collection
          API, which pilots and configures the underlying deployments.'
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1beta1
      - description: '`FlowCollector` is the schema for the network flows collection
          API, which pilots and configures the underlying deployments.'
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        specDescriptors:
        - description: defines the desired type of deployment for flow processing.
          displayName: Deployment model
          path: deploymentModel
        - description: for flows extraction.
          displayName: Agent configuration
          path: agent
        - path: agent.type
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - path: agent.ipfix
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: Settings related to the eBPF-based flow reporter.
          displayName: eBPF Agent configuration
          path: agent.ebpf
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:agent.type:eBPF
        - displayName: Privileged mode
          path: agent.ebpf.privileged
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Cache active timeout
          path: agent.ebpf.cacheActiveTimeout
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Cache max flows
          path: agent.ebpf.cacheMaxFlows
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka batch size
          path: agent.ebpf.kafkaBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Log level
          path: agent.ebpf.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: agent.ebpf.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: agent.ebpf.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
        - path: agent.ebpf.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - path: agent.ebpf.flowFilter
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: to use Kafka as a broker as part of the flow collection pipeline.
          displayName: Kafka configuration
          path: kafka
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
        - displayName: TLS configuration
          path: kafka.tls
        - path: kafka.tls.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Insecure
          path: kafka.tls.insecureSkipVerify
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - displayName: User certificate when using mTLS
          path: kafka.tls.userCert
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - displayName: CA certificate
          path: kafka.tls.caCert
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - path: kafka.sasl
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: of the component that receives the flows from the agent, enriches
            them, generates metrics, and forwards them to the Loki persistence layer
            and/or any available exporter.
          displayName: Processor configuration
          path: processor
        - displayName: Multi-cluster deployment
          path: processor.multiClusterDeployment
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Cluster name
          path: processor.clusterName
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.multiClusterDeployment:true
        - displayName: Availability zones
          path: processor.addZone
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - path: processor.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - displayName: Metrics configuration
          path: processor.metrics
        - displayName: Server configuration
          path: processor.metrics.server
        - displayName: TLS configuration
          path: processor.metrics.server.tls
        - displayName: Insecure
          path: processor.metrics.server.tls.insecureSkipVerify
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: Cert
          path: processor.metrics.server.tls.provided
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: CA
          path: processor.metrics.server.tls.providedCaFile
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: Kafka consumer replicas
          path: processor.kafkaConsumerReplicas
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: kafka consumer autoscaler
          path: processor.kafkaConsumerAutoscaler
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka consumer queue capacity
          path: processor.kafkaConsumerQueueCapacity
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka consumer batch size
          path: processor.kafkaConsumerBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Log level
          path: processor.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: processor.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: processor.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
        - description: for the flow store.
          displayName: Loki client settings
          path: loki
        - displayName: Enable
          path: loki.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Mode
          path: loki.mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
        - displayName: Loki stack
          path: loki.lokiStack
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:LokiStack
        - displayName: Monolithic
          path: loki.monolithic
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Monolithic
        - displayName: Microservices
          path: loki.microservices
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Microservices
        - displayName: Manual
          path: loki.manual
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Manual
        - displayName: Write batch wait
          path: loki.writeBatchWait
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Write batch size
          path: loki.writeBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Write timeout
          path: loki.writeTimeout
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - path: loki.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: related to the OpenShift Console integration.
          displayName: Console plugin configuration
          path: consolePlugin
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
        - displayName: Enable
          path: consolePlugin.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Port naming
          path: consolePlugin.portNaming
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - displayName: Quick filters
          path: consolePlugin.quickFilters
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - displayName: Replicas
          path: consolePlugin.replicas
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Horizontal pod autoscaler
          path: consolePlugin.autoscaler
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Log level
          path: consolePlugin.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: consolePlugin.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: consolePlugin.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - path: consolePlugin.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: additional optional exporters for custom consumption or storage.
          displayName: Exporters
          path: exporters
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Type
          path: exporters[0].type
        - displayName: IPFIX configuration
          path: exporters[0].ipfix
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:IPFIX
        - displayName: Kafka configuration
          path: exporters[0].kafka
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:Kafka
        - displayName: Exclude interfaces
          path: agent.ebpf.excludeInterfaces
        - displayName: Features
          path: agent.ebpf.features
        - displayName: Interfaces
          path: agent.ebpf.interfaces
        - displayName: Metrics
          path: agent.ebpf.metrics
        - displayName: Disable alerts
          path: agent.ebpf.metrics.disableAlerts
        - displayName: Enable
          path: agent.ebpf.metrics.enable
        - displayName: Server
          path: agent.ebpf.metrics.server
        - displayName: Port
          path: agent.ebpf.metrics.server.port
        - displayName: Sampling
          path: agent.ebpf.sampling
        - displayName: Enable
          path: consolePlugin.portNaming.enable
        - displayName: Port names
          path: consolePlugin.portNaming.portNames
        - displayName: Address
          path: kafka.address
        - displayName: Topic
          path: kafka.topic
        - displayName: Name
          path: loki.lokiStack.name
        - displayName: Namespace
          path: loki.lokiStack.namespace
        - displayName: Auth token
          path: loki.manual.authToken
        - displayName: Ingester url
          path: loki.manual.ingesterUrl
        - displayName: Querier url
          path: loki.manual.querierUrl
        - displayName: Status url
          path: loki.manual.statusUrl
        - displayName: TenantID
          path: loki.manual.tenantID
        - displayName: Ingester url
          path: loki.microservices.ingesterUrl
        - displayName: Querier url
          path: loki.microservices.querierUrl
        - displayName: TenantID
          path: loki.microservices.tenantID
        - displayName: TenantID
          path: loki.monolithic.tenantID
        - displayName: Url
          path: loki.monolithic.url
        - displayName: Read timeout
          path: loki.readTimeout
        - displayName: Namespace
          path: namespace
        - displayName: Log types
          path: processor.logTypes
        - displayName: Disable alerts
          path: processor.metrics.disableAlerts
        - displayName: Include list
          path: processor.metrics.includeList
        - displayName: Port
          path: processor.metrics.server.port
        - displayName: Subnet labels
          path: processor.subnetLabels
        - displayName: Custom labels
          path: processor.subnetLabels.customLabels
        - displayName: Open shift auto detect
          path: processor.subnetLabels.openShiftAutoDetect
        - displayName: Prometheus
          path: prometheus
        - displayName: Querier
          path: prometheus.querier
        - displayName: Enable
          path: prometheus.querier.enable
        - displayName: Manual
          path: prometheus.querier.manual
        - displayName: Forward user token
          path: prometheus.querier.manual.forwardUserToken
        - displayName: Url
          path: prometheus.querier.manual.url
        - displayName: Mode
          path: prometheus.querier.mode
        - displayName: Timeout
          path: prometheus.querier.timeout
        statusDescriptors:
        - description: Namespace where console plugin and flowlogs-pipeline have been
            deployed.
          displayName: Namespace
          path: namespace
          x-descriptors:
          - urn:alm:descriptor:text
        - description: Conditions of the FlowCollector instance health.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta2
      - description: '`FlowMetric` is the schema for the custom metrics API, which
          allows to generate more metrics out of flow logs. It is at an early stage
          of development (dev preview) and thus is currently not supported. Creating
          metrics with high labels cardinality might impact the cluster stability.'
        displayName: Flow Metric
        kind: FlowMetric
        name: flowmetrics.flows.netobserv.io
        version: v1alpha1
    description: |-
      NetObserv Operator is an OpenShift / Kubernetes operator for network observability. It deploys a monitoring pipeline that consists in:
      - an eBPF agent, that generates network flows from captured packets
      - flowlogs-pipeline, a component that collects, enriches and exports these flows
      - when used in OpenShift, a Console plugin for flows visualization with powerful filtering options, a topology representation and more

      Flow data is then available in multiple ways, each optional:

      - As Prometheus metrics
      - As raw flow logs stored in Grafana Loki
      - As raw flow logs exported to a collector

      ## Dependencies

      ### Loki

      [Loki](https://grafana.com/oss/loki/), from GrafanaLabs, can optionally be used as the backend to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.

      For normal usage, we recommend two options:

      - Installing the [Loki Operator](https://loki-operator.dev/docs/prologue/quickstart.md/). We have written [a guide](https://github.com/netobserv/documents/blob/main/loki_operator.md) to help you through those steps. Please note that it requires configuring an object storage. Note also that the Loki Operator can also be used for [OpenShift cluster logging](https://docs.openshift.com/container-platform/latest/logging/cluster-logging.html). If you do so, you should not share the same `LokiStack` for Logging and NetObserv.

      - Installing using [Grafana's official documentation](https://grafana.com/docs/loki/latest/). Here also we wrote a ["distributed Loki" step by step guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md).

      For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 10GB storage PVC, with 24 hours of retention), you can simply run the following commands:

      ```
      kubectl create namespace netobserv
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/1-storage.yaml) -n netobserv
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/2-loki.yaml) -n netobserv
      ```

      If you prefer to not use Loki, you must set `spec.loki.enable` to `false` in `FlowCollector`.
      In that case, you can still get the Prometheus metrics or export raw flows to a custom collector. But be aware that some of the Console plugin features will be disabled. For instance, you will not be able to view raw flows there, and the metrics / topology will have a more limited level of details, missing information such as pods or IPs.

      ### Kafka

      [Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for example [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.

      ### Grafana

      [Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.

      ## Configuration

      The `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.6.0-community/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.6.0-community/config/samples/flows_v1beta2_flowcollector.yaml).

      To edit configuration in cluster, run:

      ```bash
      kubectl edit flowcollector cluster
      ```

      As it operates cluster-wide on every node, only a single `FlowCollector` is allowed, and it has to be named `cluster`.

      A couple of settings deserve special attention:

      - Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.

      - Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you might have to configure differently if you used another installation method. Make sure to disable it (`spec.loki.enable`) if you don't want to use Loki.

      - Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.6.0-community/docs/QuickFilters.md).

      - Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.

      - Exporters (`spec.exporters`) an optional list of exporters to which to send enriched flows. KAFKA and IPFIX exporters are supported. This allows you to define any custom storage or processing that can read from Kafka or use the IPFIX standard.

      - To enable availability zones awareness, set `spec.processor.addZone` to `true`.

      ## Further reading

      Please refer to the documentation on GitHub for more information.

      This documentation includes:

      - An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots
      - More information on [configuring metrics](https://github.com/netobserv/network-observability-operator/blob/1.6.0-community/docs/Metrics.md).
      - A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning
      - A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section
      - An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section
    displayName: NetObserv Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - network observability
    - ebpf
    - ipfix
    - flow tracing
    - flows
    - topology
    - network
    - observability
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
      operatorframework.io/os.linux: supported
    links:
    - name: Project page
      url: https://github.com/netobserv/network-observability-operator
    - name: Issue tracker
      url: https://github.com/netobserv/network-observability-operator/issues
    - name: Discussion board
      url: https://github.com/netobserv/network-observability-operator/discussions
    maintainers:
    - email: jpinsonn@redhat.com
      name: Julien Pinsonneau
    - email: jtakvori@redhat.com
      name: Joel Takvorian
    - email: kmeth@redhat.com
      name: Kalman Meth
    - email: mmahmoud@redhat.com
      name: Mohamed S. Mahmoud
    - email: ocazade@redhat.com
      name: Olivier Cazade
    - email: rschaffe@redhat.com
      name: Ronen Schaffer
    - email: stlee@redhat.com
      name: Steven Lee
    maturity: alpha
    minKubeVersion: 1.23.0
    provider:
      name: Red Hat
      url: https://www.redhat.com
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.15.0
  name: ""
- image: quay.io/community-operator-pipeline-prod/netobserv-operator@sha256:3688fdb0bfdb3ea13a50090fcdb628809b2cd1ce2ef36ef1626bf7b518b145e9
  name: ""
- image: quay.io/netobserv/flowlogs-pipeline:v1.6.0-community
  name: flowlogs-pipeline
- image: quay.io/netobserv/netobserv-ebpf-agent:v1.6.0-community
  name: ebpf-agent
- image: quay.io/netobserv/network-observability-console-plugin:v1.6.0-community
  name: console-plugin
- image: quay.io/netobserv/network-observability-operator:1.6.0-community
  name: ""
schema: olm.bundle
---
image: quay.io/community-operator-pipeline-prod/netobserv-operator@sha256:df4502eec5c7a6146e2139f2cf496c7f7ed1f9b8db5d94170fe625ef12c7d844
name: netobserv-operator.v1.6.1-community
package: netobserv-operator
properties:
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1beta1
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1beta2
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowMetric
    version: v1alpha1
- type: olm.package
  value:
    packageName: netobserv-operator
    version: 1.6.1-community
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowMetric",
            "metadata": {
              "labels": {
                "app.kubernetes.io/created-by": "netobserv-operator",
                "app.kubernetes.io/instance": "flowmetric-sample",
                "app.kubernetes.io/managed-by": "kustomize",
                "app.kubernetes.io/name": "flowmetric",
                "app.kubernetes.io/part-of": "netobserv-operator"
              },
              "name": "flowmetric-sample"
            },
            "spec": {
              "charts": [
                {
                  "dashboardName": "Main",
                  "queries": [
                    {
                      "legend": "",
                      "promQL": "sum(rate($METRIC[2m]))"
                    }
                  ],
                  "title": "External ingress traffic",
                  "type": "SingleStat",
                  "unit": "Bps"
                },
                {
                  "dashboardName": "Main",
                  "queries": [
                    {
                      "legend": "{{DstK8S_Namespace}} / {{DstK8S_OwnerName}}",
                      "promQL": "sum(rate($METRIC{DstK8S_Namespace!=\"\"}[2m])) by (DstK8S_Namespace, DstK8S_OwnerName)"
                    }
                  ],
                  "sectionName": "External",
                  "title": "Top external ingress traffic per workload",
                  "type": "StackArea",
                  "unit": "Bps"
                }
              ],
              "direction": "Ingress",
              "filters": [
                {
                  "field": "SrcSubnetLabel",
                  "matchType": "Absence"
                }
              ],
              "labels": [
                "DstK8S_HostName",
                "DstK8S_Namespace",
                "DstK8S_OwnerName",
                "DstK8S_OwnerType"
              ],
              "metricName": "cluster_external_ingress_bytes_total",
              "type": "Counter",
              "valueField": "Bytes"
            }
          },
          {
            "apiVersion": "flows.netobserv.io/v1beta1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 1048576,
                  "logLevel": "info",
                  "privileged": false,
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "type": "EBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "DISABLED"
                },
                "enable": true,
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "port": 9001,
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "flow_layer": "app"
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "flow_layer": "infra"
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "Pod",
                      "src_kind": "Pod"
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "Service"
                    },
                    "name": "Services network"
                  }
                ],
                "register": true
              },
              "deploymentModel": "DIRECT",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "batchSize": 10485760,
                "batchWait": "1s",
                "enable": true,
                "maxBackoff": "5s",
                "maxRetries": 2,
                "minBackoff": "1s",
                "statusTls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false,
                  "userCert": {
                    "certFile": "tls.crt",
                    "certKey": "tls.key",
                    "name": "loki-query-frontend-http",
                    "type": "secret"
                  }
                },
                "tls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-gateway-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false
                },
                "url": "http://loki.netobserv.svc:3100/"
              },
              "namespace": "netobserv",
              "processor": {
                "conversationEndTimeout": "10s",
                "conversationHeartbeatInterval": "30s",
                "conversationTerminatingTimeout": "5s",
                "dropUnusedFields": true,
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "logTypes": "FLOWS",
                "metrics": {
                  "disableAlerts": [],
                  "includeList": [
                    "node_ingress_bytes_total",
                    "workload_ingress_bytes_total",
                    "namespace_flows_total"
                  ],
                  "server": {
                    "port": 9102
                  }
                },
                "port": 2055,
                "profilePort": 6060,
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              }
            }
          },
          {
            "apiVersion": "flows.netobserv.io/v1beta2",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 1048576,
                  "logLevel": "info",
                  "metrics": {
                    "server": {
                      "port": 9400
                    }
                  },
                  "privileged": false,
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "type": "eBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "Disabled"
                },
                "enable": true,
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "flow_layer": "\"app\""
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "flow_layer": "\"infra\""
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "\"Pod\"",
                      "src_kind": "\"Pod\""
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "\"Service\""
                    },
                    "name": "Services network"
                  }
                ],
                "replicas": 1,
                "resources": {
                  "limits": {
                    "memory": "100Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "50Mi"
                  }
                }
              },
              "deploymentModel": "Direct",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "enable": true,
                "lokiStack": {
                  "name": "loki"
                },
                "mode": "Monolithic",
                "monolithic": {
                  "tenantID": "netobserv",
                  "tls": {
                    "caCert": {
                      "certFile": "service-ca.crt",
                      "name": "loki-gateway-ca-bundle",
                      "type": "configmap"
                    },
                    "enable": false
                  },
                  "url": "http://loki.netobserv.svc:3100/"
                },
                "readTimeout": "30s",
                "writeBatchSize": 10485760,
                "writeBatchWait": "1s",
                "writeTimeout": "10s"
              },
              "namespace": "netobserv",
              "processor": {
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "logTypes": "Flows",
                "metrics": {
                  "disableAlerts": [],
                  "server": {
                    "port": 9401
                  }
                },
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              },
              "prometheus": {
                "querier": {
                  "enable": true,
                  "mode": "Auto",
                  "timeout": "30s"
                }
              }
            }
          }
        ]
      capabilities: Seamless Upgrades
      categories: Monitoring, Networking
      console.openshift.io/plugins: '["netobserv-plugin"]'
      containerImage: quay.io/netobserv/network-observability-operator:1.6.1-community
      createdAt: "2024-07-04T08:59:27Z"
      description: Network flows collector and monitoring solution
      operatorframework.io/initialization-resource: '{"apiVersion":"flows.netobserv.io/v1beta2",
        "kind":"FlowCollector","metadata":{"name":"cluster"},"spec": {}}'
      operatorframework.io/suggested-namespace: openshift-netobserv-operator
      operators.operatorframework.io/builder: operator-sdk-v1.25.3
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      repository: https://github.com/netobserv/network-observability-operator
      support: NetObserv team
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: '`FlowCollector` is the schema for the network flows collection
          API, which pilots and configures the underlying deployments.'
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1beta1
      - description: '`FlowCollector` is the schema for the network flows collection
          API, which pilots and configures the underlying deployments.'
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        specDescriptors:
        - description: defines the desired type of deployment for flow processing.
          displayName: Deployment model
          path: deploymentModel
        - description: for flows extraction.
          displayName: Agent configuration
          path: agent
        - path: agent.type
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - path: agent.ipfix
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: Settings related to the eBPF-based flow reporter.
          displayName: eBPF Agent configuration
          path: agent.ebpf
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:agent.type:eBPF
        - displayName: Privileged mode
          path: agent.ebpf.privileged
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Cache active timeout
          path: agent.ebpf.cacheActiveTimeout
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Cache max flows
          path: agent.ebpf.cacheMaxFlows
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka batch size
          path: agent.ebpf.kafkaBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Log level
          path: agent.ebpf.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: agent.ebpf.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: agent.ebpf.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
        - path: agent.ebpf.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - path: agent.ebpf.flowFilter
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - path: agent.ebpf.metrics.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: to use Kafka as a broker as part of the flow collection pipeline.
          displayName: Kafka configuration
          path: kafka
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
        - displayName: TLS configuration
          path: kafka.tls
        - path: kafka.tls.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Insecure
          path: kafka.tls.insecureSkipVerify
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - displayName: User certificate when using mTLS
          path: kafka.tls.userCert
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - displayName: CA certificate
          path: kafka.tls.caCert
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - path: kafka.sasl
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: of the component that receives the flows from the agent, enriches
            them, generates metrics, and forwards them to the Loki persistence layer
            and/or any available exporter.
          displayName: Processor configuration
          path: processor
        - displayName: Multi-cluster deployment
          path: processor.multiClusterDeployment
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Cluster name
          path: processor.clusterName
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.multiClusterDeployment:true
        - displayName: Availability zones
          path: processor.addZone
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - path: processor.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - displayName: Metrics configuration
          path: processor.metrics
        - displayName: Server configuration
          path: processor.metrics.server
        - displayName: TLS configuration
          path: processor.metrics.server.tls
        - displayName: Insecure
          path: processor.metrics.server.tls.insecureSkipVerify
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: Cert
          path: processor.metrics.server.tls.provided
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: CA
          path: processor.metrics.server.tls.providedCaFile
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: Kafka consumer replicas
          path: processor.kafkaConsumerReplicas
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: kafka consumer autoscaler
          path: processor.kafkaConsumerAutoscaler
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka consumer queue capacity
          path: processor.kafkaConsumerQueueCapacity
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka consumer batch size
          path: processor.kafkaConsumerBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - path: processor.subnetLabels.openShiftAutoDetect
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - displayName: Log level
          path: processor.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: processor.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: processor.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
        - description: for the flow store.
          displayName: Loki client settings
          path: loki
        - displayName: Enable
          path: loki.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Mode
          path: loki.mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
        - displayName: Loki stack
          path: loki.lokiStack
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:LokiStack
        - displayName: Monolithic
          path: loki.monolithic
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Monolithic
        - displayName: Microservices
          path: loki.microservices
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Microservices
        - displayName: Manual
          path: loki.manual
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Manual
        - displayName: Write batch wait
          path: loki.writeBatchWait
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Write batch size
          path: loki.writeBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Write timeout
          path: loki.writeTimeout
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - path: loki.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: related to the OpenShift Console integration.
          displayName: Console plugin configuration
          path: consolePlugin
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
        - displayName: Enable
          path: consolePlugin.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Port naming
          path: consolePlugin.portNaming
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - displayName: Quick filters
          path: consolePlugin.quickFilters
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - displayName: Replicas
          path: consolePlugin.replicas
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Horizontal pod autoscaler
          path: consolePlugin.autoscaler
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Log level
          path: consolePlugin.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: consolePlugin.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: consolePlugin.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - path: consolePlugin.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: additional optional exporters for custom consumption or storage.
          displayName: Exporters
          path: exporters
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Type
          path: exporters[0].type
        - displayName: IPFIX configuration
          path: exporters[0].ipfix
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:IPFIX
        - displayName: Kafka configuration
          path: exporters[0].kafka
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:Kafka
        - displayName: Exclude interfaces
          path: agent.ebpf.excludeInterfaces
        - displayName: Features
          path: agent.ebpf.features
        - displayName: Interfaces
          path: agent.ebpf.interfaces
        - displayName: Metrics
          path: agent.ebpf.metrics
        - displayName: Disable alerts
          path: agent.ebpf.metrics.disableAlerts
        - displayName: Server
          path: agent.ebpf.metrics.server
        - displayName: Port
          path: agent.ebpf.metrics.server.port
        - displayName: Sampling
          path: agent.ebpf.sampling
        - displayName: Enable
          path: consolePlugin.portNaming.enable
        - displayName: Port names
          path: consolePlugin.portNaming.portNames
        - displayName: Address
          path: kafka.address
        - displayName: Topic
          path: kafka.topic
        - displayName: Name
          path: loki.lokiStack.name
        - displayName: Namespace
          path: loki.lokiStack.namespace
        - displayName: Auth token
          path: loki.manual.authToken
        - displayName: Ingester url
          path: loki.manual.ingesterUrl
        - displayName: Querier url
          path: loki.manual.querierUrl
        - displayName: Status url
          path: loki.manual.statusUrl
        - displayName: TenantID
          path: loki.manual.tenantID
        - displayName: Ingester url
          path: loki.microservices.ingesterUrl
        - displayName: Querier url
          path: loki.microservices.querierUrl
        - displayName: TenantID
          path: loki.microservices.tenantID
        - displayName: TenantID
          path: loki.monolithic.tenantID
        - displayName: Url
          path: loki.monolithic.url
        - displayName: Read timeout
          path: loki.readTimeout
        - displayName: Namespace
          path: namespace
        - displayName: Log types
          path: processor.logTypes
        - displayName: Disable alerts
          path: processor.metrics.disableAlerts
        - displayName: Include list
          path: processor.metrics.includeList
        - displayName: Port
          path: processor.metrics.server.port
        - displayName: Subnet labels
          path: processor.subnetLabels
        - displayName: Custom labels
          path: processor.subnetLabels.customLabels
        - displayName: Prometheus
          path: prometheus
        - displayName: Querier
          path: prometheus.querier
        - displayName: Enable
          path: prometheus.querier.enable
        - displayName: Manual
          path: prometheus.querier.manual
        - displayName: Forward user token
          path: prometheus.querier.manual.forwardUserToken
        - displayName: Url
          path: prometheus.querier.manual.url
        - displayName: Mode
          path: prometheus.querier.mode
        - displayName: Timeout
          path: prometheus.querier.timeout
        statusDescriptors:
        - description: Namespace where console plugin and flowlogs-pipeline have been
            deployed.
          displayName: Namespace
          path: namespace
          x-descriptors:
          - urn:alm:descriptor:text
        - description: Conditions of the FlowCollector instance health.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta2
      - description: '`FlowMetric` is the schema for the custom metrics API, which
          allows to generate more metrics out of flow logs. You can find examples
          here: https://github.com/netobserv/network-observability-operator/tree/main/config/samples/flowmetrics'
        displayName: Flow Metric
        kind: FlowMetric
        name: flowmetrics.flows.netobserv.io
        version: v1alpha1
    description: |-
      NetObserv Operator is an OpenShift / Kubernetes operator for network observability. It deploys a monitoring pipeline that consists in:
      - an eBPF agent, that generates network flows from captured packets
      - flowlogs-pipeline, a component that collects, enriches and exports these flows
      - when used in OpenShift, a Console plugin for flows visualization with powerful filtering options, a topology representation and more

      Flow data is then available in multiple ways, each optional:

      - As Prometheus metrics
      - As raw flow logs stored in Grafana Loki
      - As raw flow logs exported to a collector

      ## Dependencies

      ### Loki

      [Loki](https://grafana.com/oss/loki/), from GrafanaLabs, can optionally be used as the backend to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.

      For normal usage, we recommend two options:

      - Installing the [Loki Operator](https://loki-operator.dev/docs/prologue/quickstart.md/). We have written [a guide](https://github.com/netobserv/documents/blob/main/loki_operator.md) to help you through those steps. Please note that it requires configuring an object storage. Note also that the Loki Operator can also be used for [OpenShift cluster logging](https://docs.openshift.com/container-platform/latest/logging/cluster-logging.html). If you do so, you should not share the same `LokiStack` for Logging and NetObserv.

      - Installing using [Grafana's official documentation](https://grafana.com/docs/loki/latest/). Here also we wrote a ["distributed Loki" step by step guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md).

      For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 10GB storage PVC, with 24 hours of retention), you can simply run the following commands:

      ```
      kubectl create namespace netobserv
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/1-storage.yaml) -n netobserv
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/2-loki.yaml) -n netobserv
      ```

      If you prefer to not use Loki, you must set `spec.loki.enable` to `false` in `FlowCollector`.
      In that case, you can still get the Prometheus metrics or export raw flows to a custom collector. But be aware that some of the Console plugin features will be disabled. For instance, you will not be able to view raw flows there, and the metrics / topology will have a more limited level of details, missing information such as pods or IPs.

      ### Kafka

      [Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for example [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.

      ### Grafana

      [Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.

      ## Configuration

      The `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.6.1-community/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.6.1-community/config/samples/flows_v1beta2_flowcollector.yaml).

      To edit configuration in cluster, run:

      ```bash
      kubectl edit flowcollector cluster
      ```

      As it operates cluster-wide on every node, only a single `FlowCollector` is allowed, and it has to be named `cluster`.

      A couple of settings deserve special attention:

      - Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.

      - Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you might have to configure differently if you used another installation method. Make sure to disable it (`spec.loki.enable`) if you don't want to use Loki.

      - Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.6.1-community/docs/QuickFilters.md).

      - Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.

      - Exporters (`spec.exporters`) an optional list of exporters to which to send enriched flows. KAFKA and IPFIX exporters are supported. This allows you to define any custom storage or processing that can read from Kafka or use the IPFIX standard.

      - To enable availability zones awareness, set `spec.processor.addZone` to `true`.

      ## Further reading

      Please refer to the documentation on GitHub for more information.

      This documentation includes:

      - An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots
      - More information on [configuring metrics](https://github.com/netobserv/network-observability-operator/blob/1.6.1-community/docs/Metrics.md).
      - A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning
      - A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section
      - An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section
    displayName: NetObserv Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - network observability
    - ebpf
    - ipfix
    - flow tracing
    - flows
    - topology
    - network
    - observability
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
      operatorframework.io/os.linux: supported
    links:
    - name: Project page
      url: https://github.com/netobserv/network-observability-operator
    - name: Issue tracker
      url: https://github.com/netobserv/network-observability-operator/issues
    - name: Discussion board
      url: https://github.com/netobserv/network-observability-operator/discussions
    maintainers:
    - email: jpinsonn@redhat.com
      name: Julien Pinsonneau
    - email: jtakvori@redhat.com
      name: Joel Takvorian
    - email: kmeth@redhat.com
      name: Kalman Meth
    - email: mmahmoud@redhat.com
      name: Mohamed S. Mahmoud
    - email: ocazade@redhat.com
      name: Olivier Cazade
    - email: rschaffe@redhat.com
      name: Ronen Schaffer
    - email: stlee@redhat.com
      name: Steven Lee
    maturity: alpha
    minKubeVersion: 1.23.0
    provider:
      name: Red Hat
      url: https://www.redhat.com
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.15.0
  name: ""
- image: quay.io/community-operator-pipeline-prod/netobserv-operator@sha256:df4502eec5c7a6146e2139f2cf496c7f7ed1f9b8db5d94170fe625ef12c7d844
  name: ""
- image: quay.io/netobserv/flowlogs-pipeline:v1.6.1-community
  name: flowlogs-pipeline
- image: quay.io/netobserv/netobserv-ebpf-agent:v1.6.1-community
  name: ebpf-agent
- image: quay.io/netobserv/network-observability-console-plugin:v1.6.1-community
  name: console-plugin
- image: quay.io/netobserv/network-observability-operator:1.6.1-community
  name: ""
schema: olm.bundle
---
image: quay.io/community-operator-pipeline-prod/netobserv-operator@sha256:5d159c5b9fc1ff3b9937cb64d11f1137fc0918b5cbf6ff402a705cbb4c185ec3
name: netobserv-operator.v1.6.2-community
package: netobserv-operator
properties:
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1beta1
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1beta2
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowMetric
    version: v1alpha1
- type: olm.package
  value:
    packageName: netobserv-operator
    version: 1.6.2-community
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowMetric",
            "metadata": {
              "labels": {
                "app.kubernetes.io/created-by": "netobserv-operator",
                "app.kubernetes.io/instance": "flowmetric-sample",
                "app.kubernetes.io/managed-by": "kustomize",
                "app.kubernetes.io/name": "flowmetric",
                "app.kubernetes.io/part-of": "netobserv-operator"
              },
              "name": "flowmetric-sample"
            },
            "spec": {
              "charts": [
                {
                  "dashboardName": "Main",
                  "queries": [
                    {
                      "legend": "",
                      "promQL": "sum(rate($METRIC[2m]))"
                    }
                  ],
                  "title": "External ingress traffic",
                  "type": "SingleStat",
                  "unit": "Bps"
                },
                {
                  "dashboardName": "Main",
                  "queries": [
                    {
                      "legend": "{{DstK8S_Namespace}} / {{DstK8S_OwnerName}}",
                      "promQL": "sum(rate($METRIC{DstK8S_Namespace!=\"\"}[2m])) by (DstK8S_Namespace, DstK8S_OwnerName)"
                    }
                  ],
                  "sectionName": "External",
                  "title": "Top external ingress traffic per workload",
                  "type": "StackArea",
                  "unit": "Bps"
                }
              ],
              "direction": "Ingress",
              "filters": [
                {
                  "field": "SrcSubnetLabel",
                  "matchType": "Absence"
                }
              ],
              "labels": [
                "DstK8S_HostName",
                "DstK8S_Namespace",
                "DstK8S_OwnerName",
                "DstK8S_OwnerType"
              ],
              "metricName": "cluster_external_ingress_bytes_total",
              "type": "Counter",
              "valueField": "Bytes"
            }
          },
          {
            "apiVersion": "flows.netobserv.io/v1beta1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 1048576,
                  "logLevel": "info",
                  "privileged": false,
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "type": "EBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "DISABLED"
                },
                "enable": true,
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "port": 9001,
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "flow_layer": "app"
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "flow_layer": "infra"
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "Pod",
                      "src_kind": "Pod"
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "Service"
                    },
                    "name": "Services network"
                  }
                ],
                "register": true
              },
              "deploymentModel": "DIRECT",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "batchSize": 10485760,
                "batchWait": "1s",
                "enable": true,
                "maxBackoff": "5s",
                "maxRetries": 2,
                "minBackoff": "1s",
                "statusTls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false,
                  "userCert": {
                    "certFile": "tls.crt",
                    "certKey": "tls.key",
                    "name": "loki-query-frontend-http",
                    "type": "secret"
                  }
                },
                "tls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-gateway-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false
                },
                "url": "http://loki.netobserv.svc:3100/"
              },
              "namespace": "netobserv",
              "processor": {
                "conversationEndTimeout": "10s",
                "conversationHeartbeatInterval": "30s",
                "conversationTerminatingTimeout": "5s",
                "dropUnusedFields": true,
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "logTypes": "FLOWS",
                "metrics": {
                  "disableAlerts": [],
                  "includeList": [
                    "node_ingress_bytes_total",
                    "workload_ingress_bytes_total",
                    "namespace_flows_total"
                  ],
                  "server": {
                    "port": 9102
                  }
                },
                "port": 2055,
                "profilePort": 6060,
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              }
            }
          },
          {
            "apiVersion": "flows.netobserv.io/v1beta2",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 1048576,
                  "logLevel": "info",
                  "metrics": {
                    "server": {
                      "port": 9400
                    }
                  },
                  "privileged": false,
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "type": "eBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "Disabled"
                },
                "enable": true,
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "flow_layer": "\"app\""
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "flow_layer": "\"infra\""
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "\"Pod\"",
                      "src_kind": "\"Pod\""
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "\"Service\""
                    },
                    "name": "Services network"
                  }
                ],
                "replicas": 1,
                "resources": {
                  "limits": {
                    "memory": "100Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "50Mi"
                  }
                }
              },
              "deploymentModel": "Direct",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "enable": true,
                "lokiStack": {
                  "name": "loki"
                },
                "mode": "Monolithic",
                "monolithic": {
                  "tenantID": "netobserv",
                  "tls": {
                    "caCert": {
                      "certFile": "service-ca.crt",
                      "name": "loki-gateway-ca-bundle",
                      "type": "configmap"
                    },
                    "enable": false
                  },
                  "url": "http://loki.netobserv.svc:3100/"
                },
                "readTimeout": "30s",
                "writeBatchSize": 10485760,
                "writeBatchWait": "1s",
                "writeTimeout": "10s"
              },
              "namespace": "netobserv",
              "processor": {
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "logTypes": "Flows",
                "metrics": {
                  "disableAlerts": [],
                  "server": {
                    "port": 9401
                  }
                },
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              },
              "prometheus": {
                "querier": {
                  "enable": true,
                  "mode": "Auto",
                  "timeout": "30s"
                }
              }
            }
          }
        ]
      capabilities: Seamless Upgrades
      categories: Monitoring, Networking
      console.openshift.io/plugins: '["netobserv-plugin"]'
      containerImage: quay.io/netobserv/network-observability-operator:1.6.2-community
      createdAt: "2024-08-22T18:26:56Z"
      description: Network flows collector and monitoring solution
      operatorframework.io/initialization-resource: '{"apiVersion":"flows.netobserv.io/v1beta2",
        "kind":"FlowCollector","metadata":{"name":"cluster"},"spec": {}}'
      operatorframework.io/suggested-namespace: openshift-netobserv-operator
      operators.operatorframework.io/builder: operator-sdk-v1.25.3
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      repository: https://github.com/netobserv/network-observability-operator
      support: NetObserv team
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: '`FlowCollector` is the schema for the network flows collection
          API, which pilots and configures the underlying deployments.'
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1beta1
      - description: '`FlowCollector` is the schema for the network flows collection
          API, which pilots and configures the underlying deployments.'
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        specDescriptors:
        - description: defines the desired type of deployment for flow processing.
          displayName: Deployment model
          path: deploymentModel
        - description: for flows extraction.
          displayName: Agent configuration
          path: agent
        - path: agent.type
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - path: agent.ipfix
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: Settings related to the eBPF-based flow reporter.
          displayName: eBPF Agent configuration
          path: agent.ebpf
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:agent.type:eBPF
        - displayName: Privileged mode
          path: agent.ebpf.privileged
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Cache active timeout
          path: agent.ebpf.cacheActiveTimeout
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Cache max flows
          path: agent.ebpf.cacheMaxFlows
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka batch size
          path: agent.ebpf.kafkaBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Log level
          path: agent.ebpf.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: agent.ebpf.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: agent.ebpf.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
        - path: agent.ebpf.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - path: agent.ebpf.flowFilter
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - path: agent.ebpf.metrics.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: to use Kafka as a broker as part of the flow collection pipeline.
          displayName: Kafka configuration
          path: kafka
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
        - displayName: TLS configuration
          path: kafka.tls
        - path: kafka.tls.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Insecure
          path: kafka.tls.insecureSkipVerify
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - displayName: User certificate when using mTLS
          path: kafka.tls.userCert
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - displayName: CA certificate
          path: kafka.tls.caCert
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - path: kafka.sasl
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: of the component that receives the flows from the agent, enriches
            them, generates metrics, and forwards them to the Loki persistence layer
            and/or any available exporter.
          displayName: Processor configuration
          path: processor
        - displayName: Multi-cluster deployment
          path: processor.multiClusterDeployment
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Cluster name
          path: processor.clusterName
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.multiClusterDeployment:true
        - displayName: Availability zones
          path: processor.addZone
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - path: processor.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - displayName: Metrics configuration
          path: processor.metrics
        - displayName: Server configuration
          path: processor.metrics.server
        - displayName: TLS configuration
          path: processor.metrics.server.tls
        - displayName: Insecure
          path: processor.metrics.server.tls.insecureSkipVerify
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: Cert
          path: processor.metrics.server.tls.provided
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: CA
          path: processor.metrics.server.tls.providedCaFile
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: Kafka consumer replicas
          path: processor.kafkaConsumerReplicas
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: kafka consumer autoscaler
          path: processor.kafkaConsumerAutoscaler
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka consumer queue capacity
          path: processor.kafkaConsumerQueueCapacity
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka consumer batch size
          path: processor.kafkaConsumerBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - path: processor.subnetLabels.openShiftAutoDetect
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - displayName: Log level
          path: processor.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: processor.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: processor.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
        - description: for the flow store.
          displayName: Loki client settings
          path: loki
        - displayName: Enable
          path: loki.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Mode
          path: loki.mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
        - displayName: Loki stack
          path: loki.lokiStack
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:LokiStack
        - displayName: Monolithic
          path: loki.monolithic
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Monolithic
        - displayName: Microservices
          path: loki.microservices
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Microservices
        - displayName: Manual
          path: loki.manual
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Manual
        - displayName: Write batch wait
          path: loki.writeBatchWait
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Write batch size
          path: loki.writeBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Write timeout
          path: loki.writeTimeout
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - path: loki.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: related to the OpenShift Console integration.
          displayName: Console plugin configuration
          path: consolePlugin
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
        - displayName: Enable
          path: consolePlugin.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Port naming
          path: consolePlugin.portNaming
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - displayName: Quick filters
          path: consolePlugin.quickFilters
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - displayName: Replicas
          path: consolePlugin.replicas
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Horizontal pod autoscaler
          path: consolePlugin.autoscaler
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Log level
          path: consolePlugin.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: consolePlugin.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: consolePlugin.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - path: consolePlugin.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: additional optional exporters for custom consumption or storage.
          displayName: Exporters
          path: exporters
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Type
          path: exporters[0].type
        - displayName: IPFIX configuration
          path: exporters[0].ipfix
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:IPFIX
        - displayName: Kafka configuration
          path: exporters[0].kafka
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:Kafka
        - displayName: Exclude interfaces
          path: agent.ebpf.excludeInterfaces
        - displayName: Features
          path: agent.ebpf.features
        - displayName: Interfaces
          path: agent.ebpf.interfaces
        - displayName: Metrics
          path: agent.ebpf.metrics
        - displayName: Disable alerts
          path: agent.ebpf.metrics.disableAlerts
        - displayName: Server
          path: agent.ebpf.metrics.server
        - displayName: Port
          path: agent.ebpf.metrics.server.port
        - displayName: Sampling
          path: agent.ebpf.sampling
        - displayName: Enable
          path: consolePlugin.portNaming.enable
        - displayName: Port names
          path: consolePlugin.portNaming.portNames
        - displayName: Address
          path: kafka.address
        - displayName: Topic
          path: kafka.topic
        - displayName: Name
          path: loki.lokiStack.name
        - displayName: Namespace
          path: loki.lokiStack.namespace
        - displayName: Auth token
          path: loki.manual.authToken
        - displayName: Ingester url
          path: loki.manual.ingesterUrl
        - displayName: Querier url
          path: loki.manual.querierUrl
        - displayName: Status url
          path: loki.manual.statusUrl
        - displayName: TenantID
          path: loki.manual.tenantID
        - displayName: Ingester url
          path: loki.microservices.ingesterUrl
        - displayName: Querier url
          path: loki.microservices.querierUrl
        - displayName: TenantID
          path: loki.microservices.tenantID
        - displayName: TenantID
          path: loki.monolithic.tenantID
        - displayName: Url
          path: loki.monolithic.url
        - displayName: Read timeout
          path: loki.readTimeout
        - displayName: Namespace
          path: namespace
        - displayName: Log types
          path: processor.logTypes
        - displayName: Disable alerts
          path: processor.metrics.disableAlerts
        - displayName: Include list
          path: processor.metrics.includeList
        - displayName: Port
          path: processor.metrics.server.port
        - displayName: Subnet labels
          path: processor.subnetLabels
        - displayName: Custom labels
          path: processor.subnetLabels.customLabels
        - displayName: Prometheus
          path: prometheus
        - displayName: Querier
          path: prometheus.querier
        - displayName: Enable
          path: prometheus.querier.enable
        - displayName: Manual
          path: prometheus.querier.manual
        - displayName: Forward user token
          path: prometheus.querier.manual.forwardUserToken
        - displayName: Url
          path: prometheus.querier.manual.url
        - displayName: Mode
          path: prometheus.querier.mode
        - displayName: Timeout
          path: prometheus.querier.timeout
        statusDescriptors:
        - description: Namespace where console plugin and flowlogs-pipeline have been
            deployed.
          displayName: Namespace
          path: namespace
          x-descriptors:
          - urn:alm:descriptor:text
        - description: Conditions of the FlowCollector instance health.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta2
      - description: '`FlowMetric` is the schema for the custom metrics API, which
          allows to generate more metrics out of flow logs. You can find examples
          here: https://github.com/netobserv/network-observability-operator/tree/1.6.2-community/config/samples/flowmetrics'
        displayName: Flow Metric
        kind: FlowMetric
        name: flowmetrics.flows.netobserv.io
        version: v1alpha1
    description: |-
      NetObserv Operator is an OpenShift / Kubernetes operator for network observability. It deploys a monitoring pipeline that consists in:
      - an eBPF agent, that generates network flows from captured packets
      - flowlogs-pipeline, a component that collects, enriches and exports these flows
      - when used in OpenShift, a Console plugin for flows visualization with powerful filtering options, a topology representation and more

      Flow data is then available in multiple ways, each optional:

      - As Prometheus metrics
      - As raw flow logs stored in Grafana Loki
      - As raw flow logs exported to a collector

      ## Dependencies

      ### Loki

      [Loki](https://grafana.com/oss/loki/), from GrafanaLabs, can optionally be used as the backend to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.

      For normal usage, we recommend two options:

      - Installing the [Loki Operator](https://loki-operator.dev/docs/prologue/quickstart.md/). We have written [a guide](https://github.com/netobserv/documents/blob/main/loki_operator.md) to help you through those steps. Please note that it requires configuring an object storage. Note also that the Loki Operator can also be used for [OpenShift cluster logging](https://docs.openshift.com/container-platform/latest/logging/cluster-logging.html). If you do so, you should not share the same `LokiStack` for Logging and NetObserv.

      - Installing using [Grafana's official documentation](https://grafana.com/docs/loki/latest/). Here also we wrote a ["distributed Loki" step by step guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md).

      For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 10GB storage PVC, with 24 hours of retention), you can simply run the following commands:

      ```
      kubectl create namespace netobserv
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/1-storage.yaml) -n netobserv
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/2-loki.yaml) -n netobserv
      ```

      If you prefer to not use Loki, you must set `spec.loki.enable` to `false` in `FlowCollector`.
      In that case, you can still get the Prometheus metrics or export raw flows to a custom collector. But be aware that some of the Console plugin features will be disabled. For instance, you will not be able to view raw flows there, and the metrics / topology will have a more limited level of details, missing information such as pods or IPs.

      ### Kafka

      [Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for example [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.

      ### Grafana

      [Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.

      ## Configuration

      The `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.6.2-community/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.6.2-community/config/samples/flows_v1beta2_flowcollector.yaml).

      To edit configuration in cluster, run:

      ```bash
      kubectl edit flowcollector cluster
      ```

      As it operates cluster-wide on every node, only a single `FlowCollector` is allowed, and it has to be named `cluster`.

      A couple of settings deserve special attention:

      - Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.

      - Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you might have to configure differently if you used another installation method. Make sure to disable it (`spec.loki.enable`) if you don't want to use Loki.

      - Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.6.2-community/docs/QuickFilters.md).

      - Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.

      - Exporters (`spec.exporters`) an optional list of exporters to which to send enriched flows. KAFKA and IPFIX exporters are supported. This allows you to define any custom storage or processing that can read from Kafka or use the IPFIX standard.

      - To enable availability zones awareness, set `spec.processor.addZone` to `true`.

      ## Further reading

      Please refer to the documentation on GitHub for more information.

      This documentation includes:

      - An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots
      - More information on [configuring metrics](https://github.com/netobserv/network-observability-operator/blob/1.6.2-community/docs/Metrics.md).
      - A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning
      - A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section
      - An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section
    displayName: NetObserv Operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - network observability
    - ebpf
    - ipfix
    - flow tracing
    - flows
    - topology
    - network
    - observability
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
      operatorframework.io/os.linux: supported
    links:
    - name: Project page
      url: https://github.com/netobserv/network-observability-operator
    - name: Issue tracker
      url: https://github.com/netobserv/network-observability-operator/issues
    - name: Discussion board
      url: https://github.com/netobserv/network-observability-operator/discussions
    maintainers:
    - email: jpinsonn@redhat.com
      name: Julien Pinsonneau
    - email: jtakvori@redhat.com
      name: Joel Takvorian
    - email: kmeth@redhat.com
      name: Kalman Meth
    - email: mmahmoud@redhat.com
      name: Mohamed S. Mahmoud
    - email: ocazade@redhat.com
      name: Olivier Cazade
    - email: rschaffe@redhat.com
      name: Ronen Schaffer
    - email: stlee@redhat.com
      name: Steven Lee
    maturity: alpha
    minKubeVersion: 1.23.0
    provider:
      name: Red Hat
      url: https://www.redhat.com
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.15.0
  name: ""
- image: quay.io/community-operator-pipeline-prod/netobserv-operator@sha256:5d159c5b9fc1ff3b9937cb64d11f1137fc0918b5cbf6ff402a705cbb4c185ec3
  name: ""
- image: quay.io/netobserv/flowlogs-pipeline:v1.6.2-community
  name: flowlogs-pipeline
- image: quay.io/netobserv/netobserv-ebpf-agent:v1.6.2-community
  name: ebpf-agent
- image: quay.io/netobserv/network-observability-console-plugin:v1.6.2-community
  name: console-plugin
- image: quay.io/netobserv/network-observability-operator:1.6.2-community
  name: ""
schema: olm.bundle
---
image: quay.io/community-operator-pipeline-prod/netobserv-operator@sha256:73af4040707ce79baa3115deed1e9148436b248ef3570f1175a6d31fdf9596c4
name: netobserv-operator.v1.6.3-community
package: netobserv-operator
properties:
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1beta1
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1beta2
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowMetric
    version: v1alpha1
- type: olm.package
  value:
    packageName: netobserv-operator
    version: 1.6.3-community
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowMetric",
            "metadata": {
              "labels": {
                "app.kubernetes.io/created-by": "netobserv-operator",
                "app.kubernetes.io/instance": "flowmetric-sample",
                "app.kubernetes.io/managed-by": "kustomize",
                "app.kubernetes.io/name": "flowmetric",
                "app.kubernetes.io/part-of": "netobserv-operator"
              },
              "name": "flowmetric-sample"
            },
            "spec": {
              "charts": [
                {
                  "dashboardName": "Main",
                  "queries": [
                    {
                      "legend": "",
                      "promQL": "sum(rate($METRIC[2m]))"
                    }
                  ],
                  "title": "External ingress traffic",
                  "type": "SingleStat",
                  "unit": "Bps"
                },
                {
                  "dashboardName": "Main",
                  "queries": [
                    {
                      "legend": "{{DstK8S_Namespace}} / {{DstK8S_OwnerName}}",
                      "promQL": "sum(rate($METRIC{DstK8S_Namespace!=\"\"}[2m])) by (DstK8S_Namespace, DstK8S_OwnerName)"
                    }
                  ],
                  "sectionName": "External",
                  "title": "Top external ingress traffic per workload",
                  "type": "StackArea",
                  "unit": "Bps"
                }
              ],
              "direction": "Ingress",
              "filters": [
                {
                  "field": "SrcSubnetLabel",
                  "matchType": "Absence"
                }
              ],
              "labels": [
                "DstK8S_HostName",
                "DstK8S_Namespace",
                "DstK8S_OwnerName",
                "DstK8S_OwnerType"
              ],
              "metricName": "cluster_external_ingress_bytes_total",
              "type": "Counter",
              "valueField": "Bytes"
            }
          },
          {
            "apiVersion": "flows.netobserv.io/v1beta1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 1048576,
                  "logLevel": "info",
                  "privileged": false,
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "type": "EBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "DISABLED"
                },
                "enable": true,
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "port": 9001,
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "flow_layer": "app"
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "flow_layer": "infra"
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "Pod",
                      "src_kind": "Pod"
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "Service"
                    },
                    "name": "Services network"
                  }
                ],
                "register": true
              },
              "deploymentModel": "DIRECT",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "batchSize": 10485760,
                "batchWait": "1s",
                "enable": true,
                "maxBackoff": "5s",
                "maxRetries": 2,
                "minBackoff": "1s",
                "statusTls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false,
                  "userCert": {
                    "certFile": "tls.crt",
                    "certKey": "tls.key",
                    "name": "loki-query-frontend-http",
                    "type": "secret"
                  }
                },
                "tls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-gateway-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false
                },
                "url": "http://loki.netobserv.svc:3100/"
              },
              "namespace": "netobserv",
              "processor": {
                "conversationEndTimeout": "10s",
                "conversationHeartbeatInterval": "30s",
                "conversationTerminatingTimeout": "5s",
                "dropUnusedFields": true,
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "logTypes": "FLOWS",
                "metrics": {
                  "disableAlerts": [],
                  "includeList": [
                    "node_ingress_bytes_total",
                    "workload_ingress_bytes_total",
                    "namespace_flows_total"
                  ],
                  "server": {
                    "port": 9102
                  }
                },
                "port": 2055,
                "profilePort": 6060,
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              }
            }
          },
          {
            "apiVersion": "flows.netobserv.io/v1beta2",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 1048576,
                  "logLevel": "info",
                  "metrics": {
                    "server": {
                      "port": 9400
                    }
                  },
                  "privileged": false,
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "type": "eBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "Disabled"
                },
                "enable": true,
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "flow_layer": "\"app\""
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "flow_layer": "\"infra\""
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "\"Pod\"",
                      "src_kind": "\"Pod\""
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "\"Service\""
                    },
                    "name": "Services network"
                  }
                ],
                "replicas": 1,
                "resources": {
                  "limits": {
                    "memory": "100Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "50Mi"
                  }
                }
              },
              "deploymentModel": "Direct",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "enable": true,
                "lokiStack": {
                  "name": "loki"
                },
                "mode": "Monolithic",
                "monolithic": {
                  "tenantID": "netobserv",
                  "tls": {
                    "caCert": {
                      "certFile": "service-ca.crt",
                      "name": "loki-gateway-ca-bundle",
                      "type": "configmap"
                    },
                    "enable": false
                  },
                  "url": "http://loki.netobserv.svc:3100/"
                },
                "readTimeout": "30s",
                "writeBatchSize": 10485760,
                "writeBatchWait": "1s",
                "writeTimeout": "10s"
              },
              "namespace": "netobserv",
              "processor": {
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "logTypes": "Flows",
                "metrics": {
                  "disableAlerts": [],
                  "server": {
                    "port": 9401
                  }
                },
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              },
              "prometheus": {
                "querier": {
                  "enable": true,
                  "mode": "Auto",
                  "timeout": "30s"
                }
              }
            }
          }
        ]
      capabilities: Seamless Upgrades
      categories: Monitoring, Networking
      console.openshift.io/plugins: '["netobserv-plugin"]'
      containerImage: quay.io/netobserv/network-observability-operator:1.6.2-community
      createdAt: "2024-08-22T18:26:56Z"
      description: Network flows collector and monitoring solution
      operatorframework.io/initialization-resource: '{"apiVersion":"flows.netobserv.io/v1beta2",
        "kind":"FlowCollector","metadata":{"name":"cluster"},"spec": {}}'
      operatorframework.io/suggested-namespace: openshift-netobserv-operator
      operators.operatorframework.io/builder: operator-sdk-v1.25.3
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      repository: https://github.com/netobserv/network-observability-operator
      support: NetObserv team
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: '`FlowCollector` is the schema for the network flows collection
          API, which pilots and configures the underlying deployments.'
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1beta1
      - description: '`FlowCollector` is the schema for the network flows collection
          API, which pilots and configures the underlying deployments.'
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        specDescriptors:
        - description: defines the desired type of deployment for flow processing.
          displayName: Deployment model
          path: deploymentModel
        - description: for flows extraction.
          displayName: Agent configuration
          path: agent
        - path: agent.type
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - path: agent.ipfix
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: Settings related to the eBPF-based flow reporter.
          displayName: eBPF Agent configuration
          path: agent.ebpf
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:agent.type:eBPF
        - displayName: Privileged mode
          path: agent.ebpf.privileged
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Cache active timeout
          path: agent.ebpf.cacheActiveTimeout
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Cache max flows
          path: agent.ebpf.cacheMaxFlows
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka batch size
          path: agent.ebpf.kafkaBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Log level
          path: agent.ebpf.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: agent.ebpf.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: agent.ebpf.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
        - path: agent.ebpf.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - path: agent.ebpf.flowFilter
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - path: agent.ebpf.metrics.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: to use Kafka as a broker as part of the flow collection pipeline.
          displayName: Kafka configuration
          path: kafka
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
        - displayName: TLS configuration
          path: kafka.tls
        - path: kafka.tls.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Insecure
          path: kafka.tls.insecureSkipVerify
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - displayName: User certificate when using mTLS
          path: kafka.tls.userCert
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - displayName: CA certificate
          path: kafka.tls.caCert
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true
        - path: kafka.sasl
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: of the component that receives the flows from the agent, enriches
            them, generates metrics, and forwards them to the Loki persistence layer
            and/or any available exporter.
          displayName: Processor configuration
          path: processor
        - displayName: Multi-cluster deployment
          path: processor.multiClusterDeployment
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Cluster name
          path: processor.clusterName
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.multiClusterDeployment:true
        - displayName: Availability zones
          path: processor.addZone
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - path: processor.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - displayName: Metrics configuration
          path: processor.metrics
        - displayName: Server configuration
          path: processor.metrics.server
        - displayName: TLS configuration
          path: processor.metrics.server.tls
        - displayName: Insecure
          path: processor.metrics.server.tls.insecureSkipVerify
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: Cert
          path: processor.metrics.server.tls.provided
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: CA
          path: processor.metrics.server.tls.providedCaFile
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided
        - displayName: Kafka consumer replicas
          path: processor.kafkaConsumerReplicas
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: kafka consumer autoscaler
          path: processor.kafkaConsumerAutoscaler
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka consumer queue capacity
          path: processor.kafkaConsumerQueueCapacity
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Kafka consumer batch size
          path: processor.kafkaConsumerBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - path: processor.subnetLabels.openShiftAutoDetect
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - displayName: Log level
          path: processor.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: processor.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: processor.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
        - description: for the flow store.
          displayName: Loki client settings
          path: loki
        - displayName: Enable
          path: loki.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Mode
          path: loki.mode
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
        - displayName: Loki stack
          path: loki.lokiStack
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:LokiStack
        - displayName: Monolithic
          path: loki.monolithic
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Monolithic
        - displayName: Microservices
          path: loki.microservices
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Microservices
        - displayName: Manual
          path: loki.manual
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Manual
        - displayName: Write batch wait
          path: loki.writeBatchWait
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Write batch size
          path: loki.writeBatchSize
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Write timeout
          path: loki.writeTimeout
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - path: loki.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: related to the OpenShift Console integration.
          displayName: Console plugin configuration
          path: consolePlugin
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true
        - displayName: Enable
          path: consolePlugin.enable
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        - displayName: Port naming
          path: consolePlugin.portNaming
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - displayName: Quick filters
          path: consolePlugin.quickFilters
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - displayName: Replicas
          path: consolePlugin.replicas
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Horizontal pod autoscaler
          path: consolePlugin.autoscaler
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Log level
          path: consolePlugin.logLevel
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Image pull policy
          path: consolePlugin.imagePullPolicy
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy"
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Resource Requirements
          path: consolePlugin.resources
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true
        - path: consolePlugin.advanced
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:hidden
        - description: additional optional exporters for custom consumption or storage.
          displayName: Exporters
          path: exporters
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:advanced
        - displayName: Type
          path: exporters[0].type
        - displayName: IPFIX configuration
          path: exporters[0].ipfix
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:IPFIX
        - displayName: Kafka configuration
          path: exporters[0].kafka
          x-descriptors:
          - urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:Kafka
        - displayName: Exclude interfaces
          path: agent.ebpf.excludeInterfaces
        - displayName: Features
          path: agent.ebpf.features
        - displayName: Interfaces
          path: agent.ebpf.interfaces
        - displayName: Metrics
          path: agent.ebpf.metrics
        - displayName: Disable alerts
          path: agent.ebpf.metrics.disableAlerts
        - displayName: Server
          path: agent.ebpf.metrics.server
        - displayName: Port
          path: agent.ebpf.metrics.server.port
        - displayName: Sampling
          path: agent.ebpf.sampling
        - displayName: Enable
          path: consolePlugin.portNaming.enable
        - displayName: Port names
          path: consolePlugin.portNaming.portNames
        - displayName: Address
          path: kafka.address
        - displayName: Topic
          path: kafka.topic
        - displayName: Name
          path: loki.lokiStack.name
        - displayName: Namespace
          path: loki.lokiStack.namespace
        - displayName: Auth token
          path: loki.manual.authToken
        - displayName: Ingester url
          path: loki.manual.ingesterUrl
        - displayName: Querier url
          path: loki.manual.querierUrl
        - displayName: Status url
          path: loki.manual.statusUrl
        - displayName: TenantID
          path: loki.manual.tenantID
        - displayName: Ingester url
          path: loki.microservices.ingesterUrl
        - displayName: Querier url
          path: loki.microservices.querierUrl
        - displayName: TenantID
          path: loki.microservices.tenantID
        - displayName: TenantID
          path: loki.monolithic.tenantID
        - displayName: Url
          path: loki.monolithic.url
        - displayName: Read timeout
          path: loki.readTimeout
        - displayName: Namespace
          path: namespace
        - displayName: Log types
          path: processor.logTypes
        - displayName: Disable alerts
          path: processor.metrics.disableAlerts
        - displayName: Include list
          path: processor.metrics.includeList
        - displayName: Port
          path: processor.metrics.server.port
        - displayName: Subnet labels
          path: processor.subnetLabels
        - displayName: Custom labels
          path: processor.subnetLabels.customLabels
        - displayName: Prometheus
          path: prometheus
        - displayName: Querier
          path: prometheus.querier
        - displayName: Enable
          path: prometheus.querier.enable
        - displayName: Manual
          path: prometheus.querier.manual
        - displayName: Forward user token
          path: prometheus.querier.manual.forwardUserToken
        - displayName: Url
          path: prometheus.querier.manual.url
        - displayName: Mode
          path: prometheus.querier.mode
        - displayName: Timeout
          path: prometheus.querier.timeout
        statusDescriptors:
        - description: Namespace where console plugin and flowlogs-pipeline have been
            deployed.
          displayName: Namespace
          path: namespace
          x-descriptors:
          - urn:alm:descriptor:text
        - description: Conditions of the FlowCollector instance health.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta2
      - description: '`FlowMetric` is the schema for the custom metrics API, which
          allows to generate more metrics out of flow logs. You can find examples
          here: https://github.com/netobserv/network-observability-operator/tree/1.6.2-community/config/samples/flowmetrics'
        displayName: Flow Metric
        kind: FlowMetric
        name: flowmetrics.flows.netobserv.io
        version: v1alpha1
    description: |-
      DEPRECATED: this distribution channel is deprecated and doesn't receive new updates. Please read https://github.com/orgs/netobserv/discussions/996 to learn more.

      NetObserv Operator is an OpenShift / Kubernetes operator for network observability. It deploys a monitoring pipeline that consists in:
      - an eBPF agent, that generates network flows from captured packets
      - flowlogs-pipeline, a component that collects, enriches and exports these flows
      - when used in OpenShift, a Console plugin for flows visualization with powerful filtering options, a topology representation and more

      Flow data is then available in multiple ways, each optional:

      - As Prometheus metrics
      - As raw flow logs stored in Grafana Loki
      - As raw flow logs exported to a collector

      ## Dependencies

      ### Loki

      [Loki](https://grafana.com/oss/loki/), from GrafanaLabs, can optionally be used as the backend to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.

      For normal usage, we recommend two options:

      - Installing the [Loki Operator](https://loki-operator.dev/docs/prologue/quickstart.md/). We have written [a guide](https://github.com/netobserv/documents/blob/main/loki_operator.md) to help you through those steps. Please note that it requires configuring an object storage. Note also that the Loki Operator can also be used for [OpenShift cluster logging](https://docs.openshift.com/container-platform/latest/logging/cluster-logging.html). If you do so, you should not share the same `LokiStack` for Logging and NetObserv.

      - Installing using [Grafana's official documentation](https://grafana.com/docs/loki/latest/). Here also we wrote a ["distributed Loki" step by step guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md).

      For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 10GB storage PVC, with 24 hours of retention), you can simply run the following commands:

      ```
      kubectl create namespace netobserv
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/1-storage.yaml) -n netobserv
      kubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/2-loki.yaml) -n netobserv
      ```

      If you prefer to not use Loki, you must set `spec.loki.enable` to `false` in `FlowCollector`.
      In that case, you can still get the Prometheus metrics or export raw flows to a custom collector. But be aware that some of the Console plugin features will be disabled. For instance, you will not be able to view raw flows there, and the metrics / topology will have a more limited level of details, missing information such as pods or IPs.

      ### Kafka

      [Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for example [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.

      ### Grafana

      [Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.

      ## Configuration

      The `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.6.2-community/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.6.2-community/config/samples/flows_v1beta2_flowcollector.yaml).

      To edit configuration in cluster, run:

      ```bash
      kubectl edit flowcollector cluster
      ```

      As it operates cluster-wide on every node, only a single `FlowCollector` is allowed, and it has to be named `cluster`.

      A couple of settings deserve special attention:

      - Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.

      - Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you might have to configure differently if you used another installation method. Make sure to disable it (`spec.loki.enable`) if you don't want to use Loki.

      - Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.6.2-community/docs/QuickFilters.md).

      - Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.

      - Exporters (`spec.exporters`) an optional list of exporters to which to send enriched flows. KAFKA and IPFIX exporters are supported. This allows you to define any custom storage or processing that can read from Kafka or use the IPFIX standard.

      - To enable availability zones awareness, set `spec.processor.addZone` to `true`.

      ## Further reading

      Please refer to the documentation on GitHub for more information.

      This documentation includes:

      - An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots
      - More information on [configuring metrics](https://github.com/netobserv/network-observability-operator/blob/1.6.2-community/docs/Metrics.md).
      - A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning
      - A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section
      - An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section
    displayName: '[DEPRECATED] NetObserv Operator'
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - network observability
    - ebpf
    - ipfix
    - flow tracing
    - flows
    - topology
    - network
    - observability
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
      operatorframework.io/os.linux: supported
    links:
    - name: Project page
      url: https://github.com/netobserv/network-observability-operator
    - name: Issue tracker
      url: https://github.com/netobserv/network-observability-operator/issues
    - name: Discussion board
      url: https://github.com/netobserv/network-observability-operator/discussions
    maintainers:
    - email: jpinsonn@redhat.com
      name: Julien Pinsonneau
    - email: jtakvori@redhat.com
      name: Joel Takvorian
    - email: kmeth@redhat.com
      name: Kalman Meth
    - email: mmahmoud@redhat.com
      name: Mohamed S. Mahmoud
    - email: ocazade@redhat.com
      name: Olivier Cazade
    - email: rschaffe@redhat.com
      name: Ronen Schaffer
    - email: stlee@redhat.com
      name: Steven Lee
    maturity: alpha
    minKubeVersion: 1.23.0
    provider:
      name: Red Hat
      url: https://www.redhat.com
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.15.0
  name: ""
- image: quay.io/community-operator-pipeline-prod/netobserv-operator@sha256:73af4040707ce79baa3115deed1e9148436b248ef3570f1175a6d31fdf9596c4
  name: ""
- image: quay.io/netobserv/flowlogs-pipeline:v1.6.2-community
  name: flowlogs-pipeline
- image: quay.io/netobserv/netobserv-ebpf-agent:v1.6.2-community
  name: ebpf-agent
- image: quay.io/netobserv/network-observability-console-plugin:v1.6.2-community
  name: console-plugin
- image: quay.io/netobserv/network-observability-operator:1.6.2-community
  name: ""
schema: olm.bundle
