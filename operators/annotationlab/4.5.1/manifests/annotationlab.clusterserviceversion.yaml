apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "apps.johnsnowlabs.com/v1",
          "kind": "Annotationlab",
          "metadata": {
            "name": "annotationlab-sample"
          },
          "spec": {
            "activelearning": {
              "extraEnv": "",
              "extraVolumeMounts": "",
              "extraVolumes": "",
              "image": {
                "repository": "johnsnowlabs/annotationlab",
                "tag": "active-learning-4.5.1"
              },
              "lifecycleHooks": ""
            },
            "affinity": "podAntiAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    - labelSelector:\n        matchLabels:\n          {{- include \"annotationlab.selectorLabels\" . | nindent 10 }}\n        matchExpressions:\n          - key: role\n            operator: NotIn\n            values:\n              - test\n      topologyKey: kubernetes.io/hostname\n  preferredDuringSchedulingIgnoredDuringExecution:\n    - weight: 100\n      podAffinityTerm:\n        labelSelector:\n          matchLabels:\n            {{- include \"annotationlab.selectorLabels\" . | nindent 12 }}\n          matchExpressions:\n            - key: role\n              operator: NotIn\n              values:\n                - test\n        topologyKey: failure-domain.beta.kubernetes.io/zone\n",
            "airflow": {
              "affinity": {},
              "airflowHome": "/opt/airflow",
              "airflowPodAnnotations": {},
              "allowPodLaunching": true,
              "cleanup": {
                "enabled": false,
                "schedule": "*/15 * * * *"
              },
              "config": {
                "api": {
                  "auth_backend": "airflow.api.auth.backend.default"
                },
                "celery": {
                  "default_queue": "celery"
                },
                "core": {
                  "colored_console_log": "False",
                  "dags_are_paused_at_creation": "False",
                  "dags_folder": "{{ include \"airflow_dags\" . }}",
                  "executor": "{{ .Values.executor }}",
                  "load_examples": "False",
                  "remote_logging": "{{- ternary \"True\" \"False\" .Values.elasticsearch.enabled }}"
                },
                "elasticsearch": {
                  "json_format": "True",
                  "log_id_template": "{dag_id}_{task_id}_{execution_date}_{try_number}"
                },
                "elasticsearch_configs": {
                  "max_retries": 3,
                  "retry_timeout": "True",
                  "timeout": 30
                },
                "kerberos": {
                  "ccache": "{{ .Values.kerberos.ccacheMountPath }}/{{ .Values.kerberos.ccacheFileName }}",
                  "keytab": "{{ .Values.kerberos.keytabPath }}",
                  "principal": "{{ .Values.kerberos.principal }}",
                  "reinit_frequency": "{{ .Values.kerberos.reinitFrequency }}"
                },
                "kubernetes": {
                  "airflow_configmap": "{{ include \"airflow_config\" . }}",
                  "airflow_local_settings_configmap": "{{ include \"airflow_config\" . }}",
                  "delete_worker_pods": "True",
                  "multi_namespace_mode": "{{ if .Values.multiNamespaceMode }}True{{ else }}False{{ end }}",
                  "namespace": "{{ .Release.Namespace }}",
                  "pod_template_file": "{{ include \"airflow_pod_template_file\" . }}/pod_template_file.yaml",
                  "worker_container_repository": "{{ .Values.images.airflow.repository | default .Values.defaultAirflowRepository }}",
                  "worker_container_tag": "{{ .Values.images.airflow.tag | default .Values.defaultAirflowTag }}"
                },
                "logging": {
                  "logging_level": "DEBUG"
                },
                "metrics": {
                  "statsd_host": "{{ printf \"%s-statsd\" .Release.Name }}",
                  "statsd_on": "{{ ternary \"True\" \"False\" .Values.statsd.enabled }}",
                  "statsd_port": 9125,
                  "statsd_prefix": "airflow"
                },
                "scheduler": {
                  "run_duration": 41460,
                  "scheduler_heartbeat_sec": 5,
                  "statsd_host": "{{ printf \"%s-statsd\" .Release.Name }}",
                  "statsd_on": "{{ ternary \"True\" \"False\" .Values.statsd.enabled }}",
                  "statsd_port": 9125,
                  "statsd_prefix": "airflow"
                },
                "webserver": {
                  "authenticate": "False",
                  "base_url": "http://0.0.0.0:8080",
                  "enable_proxy_fix": "True",
                  "expose_config": "True",
                  "rbac": "False"
                }
              },
              "dags": {
                "gitSync": {
                  "branch": "v1-10-stable",
                  "containerName": "git-sync",
                  "depth": 1,
                  "dest": "repo",
                  "enabled": false,
                  "maxFailures": 0,
                  "repo": "https://github.com/apache/airflow.git",
                  "rev": "HEAD",
                  "root": "/git",
                  "subPath": "tests/dags",
                  "uid": 65533,
                  "wait": 60
                },
                "persistence": {
                  "accessMode": "ReadWriteMany",
                  "enabled": false,
                  "size": "1Gi",
                  "storageClassName": null
                }
              },
              "data": {
                "metadataConnection": {
                  "db": "airflow",
                  "pass": "airflow",
                  "port": 5432,
                  "sslmode": "disable",
                  "user": "airflow"
                },
                "metadataSecretName": null,
                "resultBackendConnection": {
                  "db": "airflow",
                  "pass": "airflow",
                  "port": 5432,
                  "sslmode": "disable",
                  "user": "airflow"
                },
                "resultBackendSecretName": null
              },
              "defaultAirflowRepository": "apache/airflow",
              "defaultAirflowTag": "2.2.0",
              "elasticsearch": {
                "connection": {},
                "enabled": false,
                "secretName": null
              },
              "env": [],
              "executor": "CeleryExecutor",
              "extraConfigMaps": {},
              "extraEnv": "- name: AIRFLOW__LOGGING__LOGGING_LEVEL\n  value: INFO\n- name: ANNOTATIONLAB_FULLNAME\n  value: {{ include \"annotationlab.annotationlab.fullname\" . }}\n- name: ANNOTATIONLAB_URL\n  value: http://{{ include \"annotationlab.annotationlab.fullname\" . }}:8200\n- name: AIRFLOW_NAMESPACE\n  value: {{ .Release.Namespace }}\n- name: DATABASE_CONNECTION_STRING\n  valueFrom:\n    secretKeyRef:\n      name: {{ include \"annotationlab.annotationlab.fullname\" . }}-secret\n      key: DATABASE_CONNECTION_STRING\n",
              "extraEnvFrom": null,
              "extraSecrets": {},
              "fernetKey": null,
              "fernetKeySecretName": null,
              "gid": 50000,
              "global": {},
              "images": {
                "airflow": {
                  "pullPolicy": "IfNotPresent",
                  "repository": "johnsnowlabs/annotationlab",
                  "tag": "dataflows-4.5.1"
                },
                "gitSync": {
                  "pullPolicy": "IfNotPresent",
                  "repository": "k8s.gcr.io/git-sync",
                  "tag": "v3.1.6"
                },
                "pgbouncer": {
                  "pullPolicy": "IfNotPresent",
                  "repository": "apache/airflow",
                  "tag": "airflow-pgbouncer-2020.09.05-1.14.0"
                },
                "pgbouncerExporter": {
                  "pullPolicy": "IfNotPresent",
                  "repository": "apache/airflow",
                  "tag": "airflow-pgbouncer-exporter-2020.09.25-0.5.0"
                },
                "pod_template": {
                  "pullPolicy": "IfNotPresent",
                  "repository": null,
                  "tag": null
                },
                "redis": {
                  "pullPolicy": "IfNotPresent",
                  "repository": "redis",
                  "tag": "alpine3.16"
                },
                "statsd": {
                  "pullPolicy": "IfNotPresent",
                  "repository": "apache/airflow",
                  "tag": "airflow-statsd-exporter-2020.09.05-v0.17.0"
                }
              },
              "ingress": {
                "enabled": false,
                "web": {
                  "annotations": {},
                  "host": "",
                  "path": "",
                  "precedingPaths": [],
                  "succeedingPaths": [],
                  "tls": {
                    "enabled": false,
                    "secretName": ""
                  }
                }
              },
              "kerberos": {
                "ccacheFileName": "cache",
                "ccacheMountPath": "/var/kerberos-ccache",
                "config": "# This is an example config showing how you can use templating and how \"example\" config\n# might look like. It works with the test kerberos server that we are using during integration\n# testing at Apache Airflow (see `scripts/ci/docker-compose/integration-kerberos.yml` but in\n# order to make it production-ready you must replace it with your own configuration that\n# Matches your kerberos deployment. Administrators of your Kerberos instance should\n# provide the right configuration.\n\n[logging]\ndefault = \"FILE:{{ template \"airflow_logs_no_quote\" . }}/kerberos_libs.log\"\nkdc = \"FILE:{{ template \"airflow_logs_no_quote\" . }}/kerberos_kdc.log\"\nadmin_server = \"FILE:{{ template \"airflow_logs_no_quote\" . }}/kadmind.log\"\n\n[libdefaults]\ndefault_realm = FOO.COM\nticket_lifetime = 10h\nrenew_lifetime = 7d\nforwardable = true\n\n[realms]\nFOO.COM = {\n  kdc = kdc-server.foo.com\n  admin_server = admin_server.foo.com\n}\n",
                "configPath": "/etc/krb5.conf",
                "enabled": false,
                "keytabPath": "/etc/airflow.keytab",
                "principal": "airflow@FOO.COM",
                "reinitFrequency": 3600
              },
              "labels": {},
              "limits": [],
              "model_server": {
                "count": 1
              },
              "multiNamespaceMode": false,
              "networkPolicies": {
                "enabled": false
              },
              "nodeSelector": {},
              "pgbouncer": {
                "ciphers": "normal",
                "enabled": false,
                "extraNetworkPolicies": [],
                "logConnections": 0,
                "logDisconnections": 0,
                "maxClientConn": 100,
                "metadataPoolSize": 10,
                "podDisruptionBudget": {
                  "config": {
                    "maxUnavailable": 1
                  },
                  "enabled": false
                },
                "resources": {},
                "resultBackendPoolSize": 5,
                "service": {
                  "extraAnnotations": {}
                },
                "ssl": {
                  "ca": null,
                  "cert": null,
                  "key": null
                },
                "sslmode": "prefer",
                "verbose": 0
              },
              "podTemplate": null,
              "ports": {
                "airflowUI": 8080,
                "pgbouncer": 6543,
                "pgbouncerScrape": 9127,
                "redisDB": 6379,
                "statsdIngest": 9125,
                "statsdScrape": 9102,
                "workerLogs": 8793
              },
              "postgresql": {
                "common": {
                  "exampleValue": "common-chart",
                  "global": {
                    "postgresql": {}
                  }
                },
                "commonAnnotations": {},
                "enabled": true,
                "extraEnv": [],
                "global": {
                  "postgresql": {}
                },
                "image": {
                  "debug": false,
                  "pullPolicy": "IfNotPresent",
                  "registry": "docker.io",
                  "repository": "bitnami/postgresql",
                  "tag": "11.16.0-debian-11-r4"
                },
                "ldap": {
                  "baseDN": "",
                  "bindDN": "",
                  "bind_password": null,
                  "enabled": false,
                  "port": "",
                  "prefix": "",
                  "scheme": "",
                  "search_attr": "",
                  "search_filter": "",
                  "server": "",
                  "suffix": "",
                  "tls": false,
                  "url": ""
                },
                "livenessProbe": {
                  "enabled": true,
                  "failureThreshold": 6,
                  "initialDelaySeconds": 30,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "master": {
                  "affinity": {},
                  "annotations": {},
                  "extraInitContainers": [],
                  "extraVolumeMounts": [],
                  "extraVolumes": [],
                  "labels": {},
                  "nodeSelector": {},
                  "podAnnotations": {},
                  "podLabels": {},
                  "priorityClassName": "",
                  "service": {},
                  "sidecars": [],
                  "tolerations": []
                },
                "metrics": {
                  "enabled": false,
                  "extraEnvVars": {},
                  "image": {
                    "pullPolicy": "IfNotPresent",
                    "registry": "docker.io",
                    "repository": "bitnami/postgres-exporter",
                    "tag": "0.8.0-debian-10-r166"
                  },
                  "livenessProbe": {
                    "enabled": true,
                    "failureThreshold": 6,
                    "initialDelaySeconds": 5,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "timeoutSeconds": 5
                  },
                  "prometheusRule": {
                    "additionalLabels": {},
                    "enabled": false,
                    "namespace": "",
                    "rules": []
                  },
                  "readinessProbe": {
                    "enabled": true,
                    "failureThreshold": 6,
                    "initialDelaySeconds": 5,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "timeoutSeconds": 5
                  },
                  "securityContext": {
                    "enabled": false,
                    "runAsUser": 1001
                  },
                  "service": {
                    "annotations": {
                      "prometheus.io/port": "9187",
                      "prometheus.io/scrape": "true"
                    },
                    "loadBalancerIP": null,
                    "type": "ClusterIP"
                  },
                  "serviceMonitor": {
                    "additionalLabels": {},
                    "enabled": false
                  }
                },
                "nameOverride": "airflow-postgresql",
                "networkPolicy": {
                  "allowExternal": true,
                  "enabled": false,
                  "explicitNamespacesSelector": {}
                },
                "persistence": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "annotations": {},
                  "enabled": true,
                  "mountPath": "/bitnami/postgresql",
                  "size": "8Gi",
                  "subPath": ""
                },
                "postgresqlDataDir": "/bitnami/postgresql/data",
                "postgresqlDatabase": "airflow",
                "postgresqlPassword": "airflow",
                "postgresqlUsername": "airflow",
                "psp": {
                  "create": false
                },
                "rbac": {
                  "create": false
                },
                "readinessProbe": {
                  "enabled": true,
                  "failureThreshold": 6,
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "replication": {
                  "applicationName": "my_application",
                  "enabled": false,
                  "numSynchronousReplicas": 0,
                  "password": "repl_password",
                  "slaveReplicas": 1,
                  "synchronousCommit": "off",
                  "user": "repl_user"
                },
                "resources": {
                  "requests": {
                    "cpu": "250m",
                    "memory": "256Mi"
                  }
                },
                "securityContext": {
                  "enabled": true,
                  "fsGroup": 1001,
                  "runAsUser": 1001
                },
                "service": {
                  "annotations": {},
                  "port": 5432,
                  "type": "ClusterIP"
                },
                "serviceAccount": {
                  "enabled": false
                },
                "shmVolume": {
                  "chmod": {
                    "enabled": true
                  },
                  "enabled": true
                },
                "slave": {
                  "affinity": {},
                  "annotations": {},
                  "extraInitContainers": "# - name: do-something\n#   image: busybox\n#   command: ['do', 'something']\n",
                  "extraVolumeMounts": [],
                  "extraVolumes": [],
                  "labels": {},
                  "nodeSelector": {},
                  "podAnnotations": {},
                  "podLabels": {},
                  "priorityClassName": "",
                  "service": {},
                  "sidecars": [],
                  "tolerations": []
                },
                "tls": {
                  "certCAFilename": null,
                  "certFilename": "",
                  "certKeyFilename": "",
                  "certificatesSecret": "",
                  "crlFilename": null,
                  "enabled": false,
                  "preferServerCiphers": true
                },
                "updateStrategy": {
                  "type": "RollingUpdate"
                },
                "volumePermissions": {
                  "enabled": false,
                  "image": {
                    "pullPolicy": "Always",
                    "registry": "docker.io",
                    "repository": "bitnami/minideb",
                    "tag": "buster"
                  },
                  "securityContext": {
                    "runAsUser": 0
                  }
                }
              },
              "quotas": {},
              "rbacEnabled": true,
              "redis": {
                "brokerURLSecretName": null,
                "password": "DefaulTRediS-P0ss",
                "passwordSecretName": null,
                "persistence": {
                  "enabled": true,
                  "size": "1Gi",
                  "storageClassName": null
                },
                "resources": {},
                "safeToEvict": true,
                "terminationGracePeriodSeconds": 600
              },
              "registry": {
                "connection": {},
                "secretName": "kubernetesdockerhub"
              },
              "scheduler": {
                "airflowLocalSettings": null,
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "podDisruptionBudget": {
                  "config": {
                    "maxUnavailable": 1
                  },
                  "enabled": false
                },
                "replicas": 1,
                "resources": {},
                "safeToEvict": true,
                "serviceAccountAnnotations": {}
              },
              "secret": [],
              "statsd": {
                "enabled": false,
                "extraNetworkPolicies": [],
                "resources": {},
                "service": {
                  "extraAnnotations": {}
                }
              },
              "tolerations": [],
              "uid": 50000,
              "webserver": {
                "allowPodLogReading": true,
                "defaultUser": {
                  "email": "admin@example.com",
                  "enabled": false,
                  "firstName": "admin",
                  "lastName": "user",
                  "password": "admin",
                  "role": "Admin",
                  "username": "admin"
                },
                "extraNetworkPolicies": [],
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "livenessProbe": {
                  "failureThreshold": 20,
                  "initialDelaySeconds": 15,
                  "periodSeconds": 5,
                  "timeoutSeconds": 30
                },
                "readinessProbe": {
                  "failureThreshold": 20,
                  "initialDelaySeconds": 15,
                  "periodSeconds": 5,
                  "timeoutSeconds": 30
                },
                "replicas": 1,
                "resources": {},
                "service": {
                  "annotations": {},
                  "type": "ClusterIP"
                },
                "serviceAccountAnnotations": {},
                "webserverConfig": null
              },
              "workers": {
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "keda": {
                  "cooldownPeriod": 30,
                  "enabled": false,
                  "maxReplicaCount": 10,
                  "namespaceLabels": {},
                  "pollingInterval": 5
                },
                "kerberosSidecar": {
                  "enabled": false
                },
                "persistence": {
                  "enabled": true,
                  "fixPermissions": false,
                  "size": "5Gi",
                  "storageClassName": null
                },
                "replicas": 1,
                "resources": {},
                "safeToEvict": true,
                "serviceAccountAnnotations": {},
                "terminationGracePeriodSeconds": 600
              }
            },
            "backup": {
              "enable": false,
              "files": true,
              "s3_access_key": "",
              "s3_bucket_fullpath": "",
              "s3_secret_key": ""
            },
            "configuration": {
              "FLASK_SECRET_KEY": "rpaQghA-9lmpLwB8qxW0FsW1TJyZZYuB60ppzswpTzM=",
              "KEYCLOAK_CLIENT_ID": "annotationlab",
              "KEYCLOAK_CLIENT_SECRET_KEY": "09a71c59-0351-4ce6-bc8f-8fd3feb9d2ff",
              "KEYCLOAK_REALM_NAME": "master",
              "PERSISTENT_STORAGE": "/projects"
            },
            "extraContainers": "",
            "extraEnv": "",
            "extraNetworkPolicies": "- namespaceSelector: {}\n",
            "extraVolumeMounts": "",
            "extraVolumes": "",
            "hostAliases": [],
            "image": {
              "pullPolicy": "IfNotPresent",
              "pullSecrets": [
                "kubernetesdockerhub"
              ],
              "repository": "johnsnowlabs/annotationlab",
              "tag": "4.5.1"
            },
            "ingress": {
              "annotations": {},
              "defaultBackend": false,
              "enabled": true,
              "hosts": [
                {
                  "host": "annotationlab",
                  "path": "/"
                }
              ],
              "servicePort": "http",
              "tls": [],
              "uploadLimitInMegabytes": 16
            },
            "installAirflow": true,
            "installKeycloak": true,
            "installPostgresql": true,
            "keycloak": {
              "affinity": "podAntiAffinity:\n  requiredDuringSchedulingIgnoredDuringExecution:\n    - labelSelector:\n        matchLabels:\n          {{- include \"keycloak.selectorLabels\" . | nindent 10 }}\n        matchExpressions:\n          - key: app.kubernetes.io/component\n            operator: NotIn\n            values:\n              - test\n      topologyKey: kubernetes.io/hostname\n  preferredDuringSchedulingIgnoredDuringExecution:\n    - weight: 100\n      podAffinityTerm:\n        labelSelector:\n          matchLabels:\n            {{- include \"keycloak.selectorLabels\" . | nindent 12 }}\n          matchExpressions:\n            - key: app.kubernetes.io/component\n              operator: NotIn\n              values:\n                - test\n        topologyKey: failure-domain.beta.kubernetes.io/zone\n",
              "args": [
                "-Dkeycloak.profile=preview"
              ],
              "clusterDomain": "cluster.local",
              "command": [],
              "enableServiceLinks": true,
              "extraContainers": "",
              "extraEnv": "- name: PROXY_ADDRESS_FORWARDING\n  value: \"true\"\n- name: KEYCLOAK_USER_FILE\n  value: /secrets/admincreds/user\n- name: KEYCLOAK_PASSWORD_FILE\n  value: /secrets/admincreds/password\n",
              "extraEnvFrom": "",
              "extraInitContainers": "- name: theme-provider\n  image: johnsnowlabs/annotationlab:auth-theme-4.5.1\n  imagePullPolicy: IfNotPresent\n  command:\n    - sh\n  args:\n    - -c\n    - |\n      echo \"Copying theme...\"\n      cp -R /johnsnowlabs/* /theme\n  volumeMounts:\n    - name: theme\n      mountPath: /theme\n",
              "extraPorts": [],
              "extraVolumeMounts": "- name: admincreds\n  mountPath: /secrets/admincreds\n  readOnly: true\n- name: theme\n  mountPath: /opt/jboss/keycloak/themes/johnsnowlabs\n",
              "extraVolumes": "- name: admincreds\n  secret:\n    secretName: '{{ include \"annotationlab.keycloak.fullname\" . }}-admincreds'\n- name: theme\n  emptyDir: {}\n",
              "fullnameOverride": "",
              "global": {},
              "hostAliases": [],
              "image": {
                "pullPolicy": "IfNotPresent",
                "repository": "docker.io/jboss/keycloak",
                "tag": "16.1.1"
              },
              "imagePullSecrets": [
                {
                  "name": "kubernetesdockerhub"
                }
              ],
              "ingress": {
                "annotations": {},
                "enabled": false,
                "labels": {},
                "rules": [
                  {
                    "host": "keycloak.example.com",
                    "paths": [
                      "/"
                    ]
                  }
                ],
                "servicePort": "http",
                "tls": []
              },
              "lifecycleHooks": "",
              "livenessProbe": "httpGet:\n  path: /auth/\n  port: http\ninitialDelaySeconds: 300\ntimeoutSeconds: 5\n",
              "nameOverride": "",
              "nodeSelector": {},
              "pgchecker": {
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "repository": "docker.io/busybox",
                  "tag": 1.32
                },
                "resources": {
                  "limits": {
                    "cpu": "10m",
                    "memory": "16Mi"
                  },
                  "requests": {
                    "cpu": "10m",
                    "memory": "16Mi"
                  }
                },
                "securityContext": {
                  "allowPrivilegeEscalation": false,
                  "runAsGroup": 1000,
                  "runAsNonRoot": true,
                  "runAsUser": 1000
                }
              },
              "podAnnotations": {},
              "podDisruptionBudget": {},
              "podLabels": {},
              "podManagementPolicy": "Parallel",
              "podSecurityContext": {
                "fsGroup": 1000
              },
              "postgresql": {
                "common": {
                  "exampleValue": "common-chart",
                  "global": {
                    "postgresql": {}
                  }
                },
                "commonAnnotations": {},
                "enabled": true,
                "extraEnv": [],
                "global": {
                  "postgresql": {}
                },
                "image": {
                  "debug": false,
                  "pullPolicy": "IfNotPresent",
                  "registry": "docker.io",
                  "repository": "bitnami/postgresql",
                  "tag": "11.16.0-debian-11-r4"
                },
                "ldap": {
                  "baseDN": "",
                  "bindDN": "",
                  "bind_password": null,
                  "enabled": false,
                  "port": "",
                  "prefix": "",
                  "scheme": "",
                  "search_attr": "",
                  "search_filter": "",
                  "server": "",
                  "suffix": "",
                  "tls": false,
                  "url": ""
                },
                "livenessProbe": {
                  "enabled": true,
                  "failureThreshold": 6,
                  "initialDelaySeconds": 30,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "master": {
                  "affinity": {},
                  "annotations": {},
                  "extraInitContainers": [],
                  "extraVolumeMounts": [],
                  "extraVolumes": [],
                  "labels": {},
                  "nodeSelector": {},
                  "podAnnotations": {},
                  "podLabels": {},
                  "priorityClassName": "",
                  "service": {},
                  "sidecars": [],
                  "tolerations": []
                },
                "metrics": {
                  "enabled": false,
                  "extraEnvVars": {},
                  "image": {
                    "pullPolicy": "IfNotPresent",
                    "registry": "docker.io",
                    "repository": "bitnami/postgres-exporter",
                    "tag": "0.8.0-debian-10-r166"
                  },
                  "livenessProbe": {
                    "enabled": true,
                    "failureThreshold": 6,
                    "initialDelaySeconds": 5,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "timeoutSeconds": 5
                  },
                  "prometheusRule": {
                    "additionalLabels": {},
                    "enabled": false,
                    "namespace": "",
                    "rules": []
                  },
                  "readinessProbe": {
                    "enabled": true,
                    "failureThreshold": 6,
                    "initialDelaySeconds": 5,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "timeoutSeconds": 5
                  },
                  "securityContext": {
                    "enabled": false,
                    "runAsUser": 1001
                  },
                  "service": {
                    "annotations": {
                      "prometheus.io/port": "9187",
                      "prometheus.io/scrape": "true"
                    },
                    "loadBalancerIP": null,
                    "type": "ClusterIP"
                  },
                  "serviceMonitor": {
                    "additionalLabels": {},
                    "enabled": false
                  }
                },
                "nameOverride": "keycloak-postgres",
                "networkPolicy": {
                  "allowExternal": true,
                  "enabled": false,
                  "explicitNamespacesSelector": {}
                },
                "persistence": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "annotations": {},
                  "enabled": true,
                  "mountPath": "/bitnami/postgresql",
                  "size": "8Gi",
                  "subPath": ""
                },
                "postgresqlDataDir": "/bitnami/postgresql/data",
                "postgresqlDatabase": "keycloak",
                "postgresqlPassword": "keycloak",
                "postgresqlUsername": "keycloak",
                "psp": {
                  "create": false
                },
                "rbac": {
                  "create": false
                },
                "readinessProbe": {
                  "enabled": true,
                  "failureThreshold": 6,
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "replication": {
                  "applicationName": "my_application",
                  "enabled": false,
                  "numSynchronousReplicas": 0,
                  "password": "repl_password",
                  "slaveReplicas": 1,
                  "synchronousCommit": "off",
                  "user": "repl_user"
                },
                "resources": {
                  "requests": {
                    "cpu": "250m",
                    "memory": "256Mi"
                  }
                },
                "securityContext": {
                  "enabled": true,
                  "fsGroup": 1001,
                  "runAsUser": 1001
                },
                "service": {
                  "annotations": {},
                  "port": 5432,
                  "type": "ClusterIP"
                },
                "serviceAccount": {
                  "enabled": false
                },
                "shmVolume": {
                  "chmod": {
                    "enabled": true
                  },
                  "enabled": true
                },
                "slave": {
                  "affinity": {},
                  "annotations": {},
                  "extraInitContainers": "# - name: do-something\n#   image: busybox\n#   command: ['do', 'something']\n",
                  "extraVolumeMounts": [],
                  "extraVolumes": [],
                  "labels": {},
                  "nodeSelector": {},
                  "podAnnotations": {},
                  "podLabels": {},
                  "priorityClassName": "",
                  "service": {},
                  "sidecars": [],
                  "tolerations": []
                },
                "tls": {
                  "certCAFilename": null,
                  "certFilename": "",
                  "certKeyFilename": "",
                  "certificatesSecret": "",
                  "crlFilename": null,
                  "enabled": false,
                  "preferServerCiphers": true
                },
                "updateStrategy": {
                  "type": "RollingUpdate"
                },
                "volumePermissions": {
                  "enabled": false,
                  "image": {
                    "pullPolicy": "Always",
                    "registry": "docker.io",
                    "repository": "bitnami/minideb",
                    "tag": "buster"
                  },
                  "securityContext": {
                    "runAsUser": 0
                  }
                }
              },
              "priorityClassName": "",
              "prometheusRule": {
                "annotations": {},
                "enabled": false,
                "labels": {},
                "rules": []
              },
              "rbac": {
                "create": false,
                "rules": []
              },
              "readinessProbe": "httpGet:\n  path: /auth/realms/master\n  port: http\ninitialDelaySeconds: 30\ntimeoutSeconds: 1\n",
              "replicas": 1,
              "resources": {},
              "restartPolicy": "Always",
              "route": {
                "annotations": {},
                "enabled": false,
                "host": "",
                "labels": {},
                "path": "/",
                "tls": {
                  "enabled": true,
                  "insecureEdgeTerminationPolicy": "Redirect",
                  "termination": "edge"
                }
              },
              "secrets": {
                "admincreds": {
                  "stringData": {
                    "password": "secret",
                    "user": "admin"
                  }
                }
              },
              "securityContext": {
                "runAsNonRoot": true,
                "runAsUser": 1000
              },
              "service": {
                "annotations": {},
                "extraPorts": [],
                "httpManagementNodePort": null,
                "httpManagementPort": 9990,
                "httpNodePort": null,
                "httpPort": 80,
                "httpsNodePort": null,
                "httpsPort": 8443,
                "labels": {},
                "loadBalancerIP": "",
                "type": "ClusterIP"
              },
              "serviceAccount": {
                "annotations": {},
                "create": true,
                "imagePullSecrets": [],
                "labels": {},
                "name": ""
              },
              "serviceMonitor": {
                "annotations": {},
                "enabled": false,
                "interval": "10s",
                "labels": {},
                "namespace": "",
                "path": "/metrics",
                "port": "http-management",
                "scrapeTimeout": "10s"
              },
              "startupScripts": {
                "keycloak.cli": "{{- .Files.Get \"scripts/keycloak.cli\" }}\n"
              },
              "statefulsetAnnotations": {},
              "statefulsetLabels": {},
              "terminationGracePeriodSeconds": 60,
              "test": {
                "enabled": false,
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "repository": "docker.io/unguiculus/docker-python3-phantomjs-selenium",
                  "tag": "v1"
                },
                "podSecurityContext": {
                  "fsGroup": 1000
                },
                "securityContext": {
                  "runAsNonRoot": true,
                  "runAsUser": 1000
                }
              },
              "tolerations": []
            },
            "lifecycleHooks": "# postStart:\n#   exec:\n#     command: [\"/bin/sh\", \"-c\", \"ls\"]\n",
            "model_server": {
              "count": 1,
              "service": {
                "port": 5000,
                "portName": "http",
                "type": "ClusterIP"
              }
            },
            "myjohnsnowlabs": {
              "client_id": "sI4MKSmLHOX2Pg7XhM3McJS2oyKG5PHcp0BlANEW",
              "origin": "https://my.johnsnowlabs.com"
            },
            "networkPolicy": {
              "enabled": false
            },
            "nodeSelector": {},
            "persistence": {
              "accessModes": [
                "ReadWriteOnce"
              ],
              "annotations": {},
              "enabled": true,
              "size": "8Gi"
            },
            "podAnnotations": {},
            "podLabels": {},
            "postgresql": {
              "common": {
                "exampleValue": "common-chart",
                "global": {
                  "postgresql": {}
                }
              },
              "commonAnnotations": {},
              "extraEnv": [],
              "global": {
                "postgresql": {}
              },
              "image": {
                "debug": false,
                "pullPolicy": "IfNotPresent",
                "registry": "docker.io",
                "repository": "bitnami/postgresql",
                "tag": "11.16.0-debian-11-r4"
              },
              "ldap": {
                "baseDN": "",
                "bindDN": "",
                "bind_password": null,
                "enabled": false,
                "port": "",
                "prefix": "",
                "scheme": "",
                "search_attr": "",
                "search_filter": "",
                "server": "",
                "suffix": "",
                "tls": false,
                "url": ""
              },
              "livenessProbe": {
                "enabled": true,
                "failureThreshold": 6,
                "initialDelaySeconds": 30,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5
              },
              "master": {
                "affinity": {},
                "annotations": {},
                "extraInitContainers": [],
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "labels": {},
                "nodeSelector": {},
                "podAnnotations": {},
                "podLabels": {},
                "priorityClassName": "",
                "service": {},
                "sidecars": [],
                "tolerations": []
              },
              "metrics": {
                "enabled": false,
                "extraEnvVars": {},
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "registry": "docker.io",
                  "repository": "bitnami/postgres-exporter",
                  "tag": "0.8.0-debian-10-r166"
                },
                "livenessProbe": {
                  "enabled": true,
                  "failureThreshold": 6,
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "prometheusRule": {
                  "additionalLabels": {},
                  "enabled": false,
                  "namespace": "",
                  "rules": []
                },
                "readinessProbe": {
                  "enabled": true,
                  "failureThreshold": 6,
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "securityContext": {
                  "enabled": false,
                  "runAsUser": 1001
                },
                "service": {
                  "annotations": {
                    "prometheus.io/port": "9187",
                    "prometheus.io/scrape": "true"
                  },
                  "loadBalancerIP": null,
                  "type": "ClusterIP"
                },
                "serviceMonitor": {
                  "additionalLabels": {},
                  "enabled": false
                }
              },
              "networkPolicy": {
                "allowExternal": true,
                "enabled": false,
                "explicitNamespacesSelector": {}
              },
              "persistence": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "annotations": {},
                "enabled": true,
                "mountPath": "/bitnami/postgresql",
                "size": "8Gi",
                "subPath": ""
              },
              "postgresqlDataDir": "/bitnami/postgresql/data",
              "postgresqlDatabase": "annotationlab",
              "postgresqlPassword": "annotationlab",
              "postgresqlUsername": "annotationlab",
              "psp": {
                "create": false
              },
              "rbac": {
                "create": false
              },
              "readinessProbe": {
                "enabled": true,
                "failureThreshold": 6,
                "initialDelaySeconds": 5,
                "periodSeconds": 10,
                "successThreshold": 1,
                "timeoutSeconds": 5
              },
              "replication": {
                "applicationName": "my_application",
                "enabled": false,
                "numSynchronousReplicas": 0,
                "password": "repl_password",
                "slaveReplicas": 1,
                "synchronousCommit": "off",
                "user": "repl_user"
              },
              "resources": {
                "requests": {
                  "cpu": "250m",
                  "memory": "256Mi"
                }
              },
              "securityContext": {
                "enabled": true,
                "fsGroup": 1001,
                "runAsUser": 1001
              },
              "service": {
                "annotations": {},
                "port": 5432,
                "type": "ClusterIP"
              },
              "serviceAccount": {
                "enabled": false
              },
              "shmVolume": {
                "chmod": {
                  "enabled": true
                },
                "enabled": true
              },
              "slave": {
                "affinity": {},
                "annotations": {},
                "extraInitContainers": "# - name: do-something\n#   image: busybox\n#   command: ['do', 'something']\n",
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "labels": {},
                "nodeSelector": {},
                "podAnnotations": {},
                "podLabels": {},
                "priorityClassName": "",
                "service": {},
                "sidecars": [],
                "tolerations": []
              },
              "tls": {
                "certCAFilename": null,
                "certFilename": "",
                "certKeyFilename": "",
                "certificatesSecret": "",
                "crlFilename": null,
                "enabled": false,
                "preferServerCiphers": true
              },
              "updateStrategy": {
                "type": "RollingUpdate"
              },
              "volumePermissions": {
                "enabled": false,
                "image": {
                  "pullPolicy": "Always",
                  "registry": "docker.io",
                  "repository": "bitnami/minideb",
                  "tag": "buster"
                },
                "securityContext": {
                  "runAsUser": 0
                }
              }
            },
            "priorityClassName": "",
            "readinessProbe": "httpGet:\n  path: /healthz\n  port: http\ninitialDelaySeconds: 10\ntimeoutSeconds: 1\n",
            "registryCredentials": {
              "create": false,
              "password": "XXXXX",
              "registryUrl": "docker.io",
              "secretName": "kubernetesdockerhub",
              "username": "XXXXX"
            },
            "replicas": 1,
            "resources": {},
            "restartPolicy": "Always",
            "securityContext": {
              "enabled": false,
              "fsGroup": 65534,
              "runAsUser": 65534
            },
            "service": {
              "port": 8200,
              "portName": "http",
              "type": "ClusterIP"
            },
            "serviceAccount": {
              "annotations": {},
              "create": true,
              "name": "annotationlab"
            },
            "sharedData": {
              "enabled": true,
              "images": {
                "storageSize": "5Gi"
              },
              "storageSize": "100Gi"
            },
            "terminationGracePeriodSeconds": 60,
            "tolerations": [],
            "updateStrategy": {
              "type": "Recreate"
            }
          }
        }
      ]
    capabilities: Basic Install
    operators.operatorframework.io/builder: operator-sdk-v1.25.3
    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
  name: annotationlab.v0.0.1
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - kind: Annotationlab
      name: annotationlabs.apps.johnsnowlabs.com
      version: v1
  description: NLP Lab is a data labeling and annotation tool that helps you label
    different types of data using a simple interface with a standardized output format.
    It contains enterprise features like Project Management and sharing, SSO integration,
    OpenAPI Specification 3.0 compliant API, task management, and active learning/preannotation
    using Spark NLP. Furthermore, the production deployment of the application is
    done using a helm chart. The same helm chart is also used to create an AWS AMI
    for an EC2 based single server deployment using packer.
  displayName: NLP Lab
  icon:
  - base64data: ""
    mediatype: ""
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
        - apiGroups:
          - batch
          resources:
          - jobs
          verbs:
          - '*'
        - apiGroups:
          - apps.johnsnowlabs.com
          resources:
          - annotationlabs
          - annotationlabs/status
          - annotationlabs/finalizers
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - configmaps
          - persistentvolumeclaims
          - secrets
          - serviceaccounts
          - services
          - jobs
          verbs:
          - '*'
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - rolebindings
          - roles
          verbs:
          - '*'
        - apiGroups:
          - apps
          resources:
          - deployments
          - statefulsets
          verbs:
          - '*'
        - apiGroups:
          - networking.k8s.io
          resources:
          - ingresses
          verbs:
          - '*'
        - apiGroups:
          - security.openshift.io
          resourceNames:
          - anyuid
          resources:
          - securitycontextconstraints
          verbs:
          - use
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: annotationlab-controller-manager
      deployments:
      - label:
          app.kubernetes.io/component: manager
          app.kubernetes.io/created-by: annotationlab
          app.kubernetes.io/instance: controller-manager
          app.kubernetes.io/managed-by: kustomize
          app.kubernetes.io/name: deployment
          app.kubernetes.io/part-of: annotationlab
          control-plane: controller-manager
        name: annotationlab-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              annotations:
                kubectl.kubernetes.io/default-container: manager
              labels:
                control-plane: controller-manager
            spec:
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                    - matchExpressions:
                      - key: kubernetes.io/arch
                        operator: In
                        values:
                        - amd64
                        - arm64
                        - ppc64le
                        - s390x
                      - key: kubernetes.io/os
                        operator: In
                        values:
                        - linux
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=0
                image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.0
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                  protocol: TCP
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 5m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --leader-elect
                - --leader-election-id=annotationlab
                image: registry.johnsnowlabs.com/annotationlab/nlplab-operator:v4.5.1
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 10m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              securityContext:
                runAsNonRoot: true
              serviceAccountName: annotationlab-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: annotationlab-controller-manager
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - nlplab
  links:
  - name: Annotationlab
    url: https://annotationlab.domain
  maintainers:
  - email: bhandari@johnsnowlabs.com
    name: bikash
  maturity: alpha
  provider:
    name: John Snow LABS
    url: johnsnowlabs.com
  version: 0.0.1
