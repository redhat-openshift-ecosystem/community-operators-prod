apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "charts.kubecost.com/v1alpha1",
          "kind": "CostAnalyzer",
          "metadata": {
            "name": "costanalyzer-sample"
          },
          "spec": {
            "global": {
              "prometheus": {
                "enabled": true,
                "fqdn": "http://cost-analyzer-prometheus-server.default.svc"
              },
              "grafana": {
                "enabled": false,
                "domainName": "cost-analyzer-grafana.default.svc",
                "scheme": "http",
                "proxy": false
              },
              "gcpstore": {
                "enabled": false
              },
              "gmp": {
                "enabled": false,
                "prometheusServerEndpoint": "http://localhost:8085/",
                "gmpProxy": {
                  "enabled": false,
                  "image": "gke.gcr.io/prometheus-engine/frontend:v0.4.1-gke.0",
                  "imagePullPolicy": "Always",
                  "name": "gmp-proxy",
                  "port": 8085,
                  "projectId": "YOUR_PROJECT_ID"
                }
              },
              "amp": {
                "enabled": false,
                "prometheusServerEndpoint": "http://localhost:8005/workspaces/<workspaceId>/",
                "remoteWriteService": "https://aps-workspaces.us-west-2.amazonaws.com/workspaces/<workspaceId>/api/v1/remote_write",
                "sigv4": {
                  "region": "us-west-2"
                }
              },
              "mimirProxy": {
                "enabled": false,
                "name": "mimir-proxy",
                "image": "nginxinc/nginx-unprivileged",
                "port": 8085,
                "mimirEndpoint": "$mimir_endpoint",
                "orgIdentifier": "$your_tenant_ID"
              },
              "notifications": {
                "alertmanager": {
                  "enabled": false,
                  "fqdn": "http://cost-analyzer-prometheus-server.default.svc"
                }
              },
              "savedReports": {
                "enabled": false,
                "reports": [
                  {
                    "title": "Example Saved Report 0",
                    "window": "today",
                    "aggregateBy": "namespace",
                    "chartDisplay": "category",
                    "idle": "separate",
                    "rate": "cumulative",
                    "accumulate": false,
                    "filters": [
                      {
                        "key": "cluster",
                        "operator": ":",
                        "value": "dev"
                      }
                    ]
                  },
                  {
                    "title": "Example Saved Report 1",
                    "window": "month",
                    "aggregateBy": "controllerKind",
                    "chartDisplay": "category",
                    "idle": "share",
                    "rate": "monthly",
                    "accumulate": false,
                    "filters": [
                      {
                        "key": "namespace",
                        "operator": "!:",
                        "value": "kubecost"
                      }
                    ]
                  },
                  {
                    "title": "Example Saved Report 2",
                    "window": "2020-11-11T00:00:00Z,2020-12-09T23:59:59Z",
                    "aggregateBy": "service",
                    "chartDisplay": "category",
                    "idle": "hide",
                    "rate": "daily",
                    "accumulate": true,
                    "filters": []
                  }
                ]
              },
              "assetReports": {
                "enabled": false,
                "reports": [
                  {
                    "title": "Example Asset Report 0",
                    "window": "today",
                    "aggregateBy": "type",
                    "accumulate": false,
                    "filters": [
                      {
                        "property": "cluster",
                        "value": "cluster-one"
                      }
                    ]
                  }
                ]
              },
              "advancedReports": {
                "enabled": false,
                "reports": [
                  {
                    "title": "Example Advanced Report 0",
                    "window": "7d",
                    "aggregateBy": "namespace",
                    "filters": [
                      {
                        "key": "cluster",
                        "operator": ":",
                        "value": "dev"
                      }
                    ],
                    "cloudBreakdown": "service",
                    "cloudJoin": "label:kubernetes_namespace"
                  }
                ]
              },
              "cloudCostReports": {
                "enabled": false,
                "reports": [
                  {
                    "title": "Cloud Cost Report 0",
                    "window": "today",
                    "aggregateBy": "service",
                    "accumulate": false
                  }
                ]
              },
              "podAnnotations": {},
              "additionalLabels": {},
              "securityContext": {
                "runAsNonRoot": true,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                },
                "fsGroup": 1001,
                "runAsGroup": 1001,
                "runAsUser": 1001,
                "fsGroupChangePolicy": "OnRootMismatch"
              },
              "containerSecurityContext": {
                "allowPrivilegeEscalation": false,
                "privileged": false,
                "readOnlyRootFilesystem": true,
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                }
              },
              "platforms": {
                "openshift": {
                  "enabled": true,
                  "route": {
                    "enabled": false,
                    "annotations": {}
                  },
                  "scc": {
                    "nodeExporter": false,
                    "networkCosts": false
                  },
                  "securityContext": {
                    "runAsNonRoot": true,
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  }
                },
                "cicd": {
                  "enabled": true,
                  "skipSanityChecks": true
                }
              }
            },
            "upgrade": {
              "toV2": false
            },
            "kubecostToken": null,
            "pricingCsv": {
              "enabled": false,
              "location": {
                "provider": "AWS",
                "region": "us-east-1",
                "URI": "s3://kc-csv-test/pricing_schema.csv",
                "csvAccessCredentials": "pricing-schema-access-secret"
              }
            },
            "saml": {
              "enabled": false,
              "rbac": {
                "enabled": false
              }
            },
            "oidc": {
              "enabled": false,
              "clientID": "",
              "clientSecret": "",
              "existingCustomSecret": {
                "enabled": false,
                "name": ""
              },
              "skipOnlineTokenValidation": false,
              "rbac": {
                "enabled": false
              }
            },
            "systemProxy": {
              "enabled": false,
              "httpProxyUrl": "",
              "httpsProxyUrl": "",
              "noProxy": ""
            },
            "kubecostFrontend": {
              "enabled": true,
              "deployMethod": "singlepod",
              "haReplicas": 2,
              "image": "gcr.io/kubecost1/frontend",
              "imagePullPolicy": "Always",
              "resources": {
                "requests": {
                  "cpu": "10m",
                  "memory": "55Mi"
                }
              },
              "deploymentStrategy": {},
              "readinessProbe": {
                "enabled": true,
                "initialDelaySeconds": 1,
                "periodSeconds": 5,
                "failureThreshold": 6
              },
              "livenessProbe": {
                "enabled": true,
                "initialDelaySeconds": 1,
                "periodSeconds": 5,
                "failureThreshold": 6
              },
              "ipv6": {
                "enabled": true
              },
              "useDefaultFqdn": false
            },
            "kubecostMetrics": {
              "exporter": {
                "enabled": false,
                "port": 9005,
                "prometheusScrape": true,
                "resources": {},
                "tolerations": [],
                "affinity": {},
                "service": {
                  "annotations": {}
                },
                "serviceMonitor": {
                  "enabled": false,
                  "additionalLabels": {},
                  "metricRelabelings": [],
                  "relabelings": []
                },
                "priorityClassName": "",
                "additionalLabels": {},
                "nodeSelector": {},
                "extraArgs": []
              }
            },
            "sigV4Proxy": {
              "image": "public.ecr.aws/aws-observability/aws-sigv4-proxy:latest",
              "imagePullPolicy": "Always",
              "name": "aps",
              "port": 8005,
              "region": "us-west-2",
              "host": "aps-workspaces.us-west-2.amazonaws.com",
              "extraEnv": null,
              "resources": {}
            },
            "kubecostModel": {
              "image": "gcr.io/kubecost1/cost-model",
              "imagePullPolicy": "Always",
              "outOfClusterPromMetricsEnabled": false,
              "warmCache": false,
              "etl": true,
              "etlFileStoreEnabled": true,
              "etlDailyStoreDurationDays": 91,
              "etlHourlyStoreDurationHours": 49,
              "etlWeeklyStoreDurationWeeks": 53,
              "etlReadOnlyMode": false,
              "plugins": {
                "enabled": false,
                "install": {
                  "enabled": false,
                  "fullImageName": "curlimages/curl:latest",
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    },
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "readOnlyRootFilesystem": true,
                    "runAsNonRoot": true,
                    "runAsUser": 1001
                  }
                },
                "folder": "/opt/opencost/plugin",
                "enabledPlugins": [],
                "configSecret": "kubecost-plugin-secret"
              },
              "cloudCost": {
                "labelList": {
                  "IsIncludeList": false,
                  "labels": ""
                },
                "topNItems": 1000
              },
              "allocation": null,
              "containerStatsEnabled": true,
              "maxQueryConcurrency": 5,
              "resources": {
                "requests": {
                  "cpu": "200m",
                  "memory": "55Mi"
                }
              },
              "readinessProbe": {
                "enabled": true,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "failureThreshold": 200
              },
              "livenessProbe": {
                "enabled": true,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "failureThreshold": 200
              },
              "extraArgs": [],
              "ingress": {
                "enabled": false,
                "labels": null,
                "annotations": null,
                "paths": [
                  "/"
                ],
                "pathType": "ImplementationSpecific",
                "hosts": [
                  "cost-analyzer-model.local"
                ],
                "tls": []
              },
              "utcOffset": "+00:00",
              "extraPorts": []
            },
            "etlUtils": {
              "enabled": false,
              "fullImageName": null,
              "resources": {},
              "env": {},
              "nodeSelector": {},
              "tolerations": {},
              "affinity": {}
            },
            "ingress": {
              "enabled": false,
              "labels": null,
              "annotations": null,
              "paths": [
                "/"
              ],
              "pathType": "ImplementationSpecific",
              "hosts": [
                "cost-analyzer.local"
              ],
              "tls": []
            },
            "nodeSelector": {},
            "tolerations": [],
            "affinity": {},
            "topologySpreadConstraints": [],
            "priority": {
              "enabled": false,
              "name": ""
            },
            "networkPolicy": {
              "enabled": false,
              "denyEgress": true,
              "sameNamespace": true,
              "costAnalyzer": {
                "enabled": false,
                "annotations": {},
                "additionalLabels": {}
              }
            },
            "extraVolumes": [],
            "extraVolumeMounts": [],
            "persistentVolume": {
              "size": "32Gi",
              "dbSize": "32.0Gi",
              "enabled": true,
              "labels": {},
              "annotations": {},
              "dbPVEnabled": false
            },
            "service": {
              "type": "ClusterIP",
              "port": 9090,
              "targetPort": 9090,
              "nodePort": {},
              "labels": {},
              "annotations": {},
              "sessionAffinity": {
                "enabled": false,
                "timeoutSeconds": 10800
              }
            },
            "prometheus": {
              "rbac": {
                "create": true
              },
              "serviceAccounts": {
                "alertmanager": {
                  "create": true,
                  "name": null
                },
                "nodeExporter": {
                  "create": true,
                  "name": null
                },
                "pushgateway": {
                  "create": true,
                  "name": null
                },
                "server": {
                  "create": true,
                  "name": null,
                  "annotations": {}
                }
              },
              "imagePullSecrets": null,
              "extraScrapeConfigs": "- job_name: kubecost\n  honor_labels: true\n  scrape_interval: 1m\n  scrape_timeout: 60s\n  metrics_path: /metrics\n  scheme: http\n  dns_sd_configs:\n  - names:\n    - {{ template \"cost-analyzer.serviceName\" . }}\n    type: 'A'\n    port: 9003\n- job_name: kubecost-networking\n  kubernetes_sd_configs:\n    - role: pod\n  relabel_configs:\n  # Scrape only the the targets matching the following metadata\n    - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_instance]\n      action: keep\n      regex:  kubecost\n    - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]\n      action: keep\n      regex:  network-costs\n",
              "server": {
                "enabled": true,
                "name": "server",
                "sidecarContainers": null,
                "strategy": {
                  "type": "Recreate",
                  "rollingUpdate": null
                },
                "image": {
                  "repository": "quay.io/prometheus/prometheus",
                  "tag": "v2.50.1",
                  "pullPolicy": "IfNotPresent"
                },
                "priorityClassName": "",
                "prefixURL": "",
                "baseURL": "",
                "env": [],
                "extraFlags": [
                  "web.enable-lifecycle"
                ],
                "configPath": "/etc/config/prometheus.yml",
                "global": {
                  "scrape_interval": "1m",
                  "scrape_timeout": "60s",
                  "evaluation_interval": "1m",
                  "external_labels": {
                    "cluster_id": "cluster-one"
                  }
                },
                "remoteWrite": {},
                "remoteRead": {},
                "extraArgs": {
                  "query.max-concurrency": 1,
                  "query.max-samples": 100000000
                },
                "extraInitContainers": [],
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "extraHostPathMounts": [],
                "extraConfigmapMounts": [],
                "extraSecretMounts": [],
                "configMapOverrideName": "",
                "ingress": {
                  "enabled": false,
                  "annotations": {},
                  "extraLabels": {},
                  "hosts": [],
                  "pathType": "Prefix",
                  "extraPaths": [],
                  "tls": []
                },
                "tolerations": [],
                "nodeSelector": {},
                "affinity": {},
                "podDisruptionBudget": {
                  "enabled": false,
                  "maxUnavailable": 1
                },
                "persistentVolume": {
                  "enabled": true,
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "annotations": {},
                  "existingClaim": "",
                  "mountPath": "/data",
                  "size": "32Gi",
                  "subPath": ""
                },
                "emptyDir": {
                  "sizeLimit": ""
                },
                "podAnnotations": {},
                "deploymentAnnotations": {},
                "podLabels": {},
                "alertmanagers": [],
                "replicaCount": 1,
                "statefulSet": {
                  "enabled": false,
                  "annotations": {},
                  "labels": {},
                  "podManagementPolicy": "OrderedReady",
                  "headless": {
                    "annotations": {},
                    "labels": {},
                    "servicePort": 80
                  }
                },
                "readinessProbeInitialDelay": 5,
                "readinessProbeTimeout": 3,
                "readinessProbeFailureThreshold": 3,
                "readinessProbeSuccessThreshold": 1,
                "livenessProbeInitialDelay": 5,
                "livenessProbeTimeout": 3,
                "livenessProbeFailureThreshold": 3,
                "livenessProbeSuccessThreshold": 1,
                "resources": {},
                "verticalAutoscaler": {
                  "enabled": false
                },
                "securityContext": {},
                "containerSecurityContext": {},
                "service": {
                  "annotations": {},
                  "labels": {},
                  "clusterIP": "",
                  "externalIPs": [],
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "servicePort": 80,
                  "sessionAffinity": "None",
                  "type": "ClusterIP",
                  "gRPC": {
                    "enabled": false,
                    "servicePort": 10901
                  },
                  "statefulsetReplica": {
                    "enabled": false,
                    "replica": 0
                  }
                },
                "terminationGracePeriodSeconds": 300,
                "retention": "97h"
              },
              "alertmanager": {
                "enabled": false,
                "strategy": {
                  "type": "Recreate",
                  "rollingUpdate": null
                },
                "name": "alertmanager",
                "image": {
                  "repository": "quay.io/prometheus/alertmanager",
                  "tag": "v0.27.0",
                  "pullPolicy": "IfNotPresent"
                },
                "priorityClassName": "",
                "extraArgs": {},
                "prefixURL": "",
                "baseURL": "http://localhost:9093",
                "extraEnv": {},
                "extraSecretMounts": [],
                "configMapOverrideName": "",
                "configFromSecret": "",
                "configFileName": "alertmanager.yml",
                "ingress": {
                  "enabled": false,
                  "annotations": {},
                  "extraLabels": {},
                  "hosts": [],
                  "extraPaths": [],
                  "tls": []
                },
                "tolerations": [],
                "nodeSelector": {},
                "affinity": {},
                "podDisruptionBudget": {
                  "enabled": false,
                  "maxUnavailable": 1
                },
                "persistentVolume": {
                  "enabled": true,
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "annotations": {},
                  "existingClaim": "",
                  "mountPath": "/data",
                  "size": "2Gi",
                  "subPath": ""
                },
                "podAnnotations": {},
                "podLabels": {},
                "replicaCount": 1,
                "statefulSet": {
                  "enabled": false,
                  "podManagementPolicy": "OrderedReady",
                  "headless": {
                    "annotations": {},
                    "labels": {},
                    "servicePort": 80
                  }
                },
                "resources": {},
                "securityContext": {
                  "runAsUser": 1001,
                  "runAsNonRoot": true,
                  "runAsGroup": 1001,
                  "fsGroup": 1001
                },
                "service": {
                  "annotations": {},
                  "labels": {},
                  "clusterIP": "",
                  "externalIPs": [],
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "servicePort": 80,
                  "sessionAffinity": "None",
                  "type": "ClusterIP"
                }
              },
              "alertmanagerFiles": {
                "alertmanager.yml": {
                  "global": {},
                  "receivers": [
                    {
                      "name": "default-receiver"
                    }
                  ],
                  "route": {
                    "group_wait": "10s",
                    "group_interval": "5m",
                    "receiver": "default-receiver",
                    "repeat_interval": "3h"
                  }
                }
              },
              "configmapReload": {
                "prometheus": {
                  "enabled": false,
                  "name": "configmap-reload",
                  "image": {
                    "repository": "quay.io/prometheus-operator/prometheus-config-reloader",
                    "tag": "v0.72.0",
                    "pullPolicy": "IfNotPresent"
                  },
                  "extraArgs": {},
                  "extraVolumeDirs": [],
                  "extraConfigmapMounts": [],
                  "resources": {},
                  "containerSecurityContext": {}
                },
                "alertmanager": {
                  "enabled": false,
                  "name": "configmap-reload",
                  "image": {
                    "repository": "quay.io/prometheus-operator/prometheus-config-reloader",
                    "tag": "v0.72.0",
                    "pullPolicy": "IfNotPresent"
                  },
                  "extraArgs": {},
                  "extraVolumeDirs": [],
                  "extraConfigmapMounts": [],
                  "resources": {}
                }
              },
              "nodeExporter": {
                "enabled": false,
                "hostNetwork": true,
                "hostPID": true,
                "dnsPolicy": "ClusterFirstWithHostNet",
                "name": "node-exporter",
                "image": {
                  "repository": "prom/node-exporter",
                  "tag": "v1.7.0",
                  "pullPolicy": "IfNotPresent"
                },
                "priorityClassName": "",
                "updateStrategy": {
                  "type": "RollingUpdate"
                },
                "extraArgs": {},
                "extraHostPathMounts": [],
                "extraConfigmapMounts": [],
                "tolerations": [],
                "nodeSelector": {},
                "podAnnotations": {},
                "deploymentAnnotations": {},
                "pod": {
                  "labels": {}
                },
                "podDisruptionBudget": {
                  "enabled": false,
                  "maxUnavailable": 1
                },
                "resources": {},
                "securityContext": {},
                "service": {
                  "annotations": {
                    "prometheus.io/scrape": "true"
                  },
                  "labels": {},
                  "clusterIP": "None",
                  "externalIPs": [],
                  "hostPort": 9100,
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "servicePort": 9100,
                  "type": "ClusterIP"
                }
              },
              "pushgateway": {
                "enabled": false,
                "name": "pushgateway",
                "image": {
                  "repository": "prom/pushgateway",
                  "tag": "v1.6.2",
                  "pullPolicy": "IfNotPresent"
                },
                "priorityClassName": "",
                "extraArgs": {},
                "ingress": {
                  "enabled": false,
                  "annotations": {},
                  "hosts": [],
                  "extraPaths": [],
                  "tls": []
                },
                "tolerations": [],
                "nodeSelector": {},
                "podAnnotations": {},
                "replicaCount": 1,
                "podDisruptionBudget": {
                  "enabled": false,
                  "maxUnavailable": 1
                },
                "resources": {},
                "securityContext": {
                  "runAsUser": 1001,
                  "runAsNonRoot": true
                },
                "service": {
                  "annotations": {
                    "prometheus.io/probe": "pushgateway"
                  },
                  "labels": {},
                  "clusterIP": "",
                  "externalIPs": [],
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "servicePort": 9091,
                  "type": "ClusterIP"
                },
                "strategy": {
                  "type": "Recreate",
                  "rollingUpdate": null
                },
                "persistentVolume": {
                  "enabled": true,
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "annotations": {},
                  "existingClaim": "",
                  "mountPath": "/data",
                  "size": "2Gi",
                  "subPath": ""
                }
              },
              "serverFiles": {
                "alerting_rules.yml": {},
                "alerts": {},
                "recording_rules.yml": {},
                "prometheus.yml": {
                  "rule_files": [
                    "/etc/config/recording_rules.yml",
                    "/etc/config/alerting_rules.yml",
                    "/etc/config/rules",
                    "/etc/config/alerts"
                  ],
                  "scrape_configs": [
                    {
                      "job_name": "prometheus",
                      "static_configs": [
                        {
                          "targets": [
                            "localhost:9090"
                          ]
                        }
                      ]
                    },
                    {
                      "job_name": "kubernetes-nodes-cadvisor",
                      "scheme": "https",
                      "tls_config": {
                        "ca_file": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                        "insecure_skip_verify": true
                      },
                      "bearer_token_file": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                      "kubernetes_sd_configs": [
                        {
                          "role": "node"
                        }
                      ],
                      "relabel_configs": [
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_node_label_(.+)"
                        },
                        {
                          "target_label": "__address__",
                          "replacement": "kubernetes.default.svc:443"
                        },
                        {
                          "source_labels": [
                            "__meta_kubernetes_node_name"
                          ],
                          "regex": "(.+)",
                          "target_label": "__metrics_path__",
                          "replacement": "/api/v1/nodes/$1/proxy/metrics/cadvisor"
                        }
                      ],
                      "metric_relabel_configs": [
                        {
                          "source_labels": [
                            "__name__"
                          ],
                          "regex": "(container_cpu_usage_seconds_total|container_memory_working_set_bytes|container_network_receive_errors_total|container_network_transmit_errors_total|container_network_receive_packets_dropped_total|container_network_transmit_packets_dropped_total|container_memory_usage_bytes|container_cpu_cfs_throttled_periods_total|container_cpu_cfs_periods_total|container_fs_usage_bytes|container_fs_limit_bytes|container_cpu_cfs_periods_total|container_fs_inodes_free|container_fs_inodes_total|container_fs_usage_bytes|container_fs_limit_bytes|container_cpu_cfs_throttled_periods_total|container_cpu_cfs_periods_total|container_network_receive_bytes_total|container_network_transmit_bytes_total|container_fs_inodes_free|container_fs_inodes_total|container_fs_usage_bytes|container_fs_limit_bytes|container_spec_cpu_shares|container_spec_memory_limit_bytes|container_network_receive_bytes_total|container_network_transmit_bytes_total|container_fs_reads_bytes_total|container_network_receive_bytes_total|container_fs_writes_bytes_total|container_fs_reads_bytes_total|cadvisor_version_info|kubecost_pv_info)",
                          "action": "keep"
                        },
                        {
                          "source_labels": [
                            "container"
                          ],
                          "target_label": "container_name",
                          "regex": "(.+)",
                          "action": "replace"
                        },
                        {
                          "source_labels": [
                            "pod"
                          ],
                          "target_label": "pod_name",
                          "regex": "(.+)",
                          "action": "replace"
                        }
                      ]
                    },
                    {
                      "job_name": "kubernetes-nodes",
                      "scheme": "https",
                      "tls_config": {
                        "ca_file": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                        "insecure_skip_verify": true
                      },
                      "bearer_token_file": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                      "kubernetes_sd_configs": [
                        {
                          "role": "node"
                        }
                      ],
                      "relabel_configs": [
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_node_label_(.+)"
                        },
                        {
                          "target_label": "__address__",
                          "replacement": "kubernetes.default.svc:443"
                        },
                        {
                          "source_labels": [
                            "__meta_kubernetes_node_name"
                          ],
                          "regex": "(.+)",
                          "target_label": "__metrics_path__",
                          "replacement": "/api/v1/nodes/$1/proxy/metrics"
                        }
                      ],
                      "metric_relabel_configs": [
                        {
                          "source_labels": [
                            "__name__"
                          ],
                          "regex": "(kubelet_volume_stats_used_bytes)",
                          "action": "keep"
                        }
                      ]
                    },
                    {
                      "job_name": "kubernetes-service-endpoints",
                      "kubernetes_sd_configs": [
                        {
                          "role": "endpoints"
                        }
                      ],
                      "relabel_configs": [
                        {
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_prometheus_io_scrape"
                          ],
                          "action": "keep",
                          "regex": true
                        },
                        {
                          "source_labels": [
                            "__meta_kubernetes_endpoints_name"
                          ],
                          "action": "keep",
                          "regex": "(.*node-exporter|kubecost-network-costs)"
                        },
                        {
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_prometheus_io_scheme"
                          ],
                          "action": "replace",
                          "target_label": "__scheme__",
                          "regex": "(https?)"
                        },
                        {
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_prometheus_io_path"
                          ],
                          "action": "replace",
                          "target_label": "__metrics_path__",
                          "regex": "(.+)"
                        },
                        {
                          "source_labels": [
                            "__address__",
                            "__meta_kubernetes_service_annotation_prometheus_io_port"
                          ],
                          "action": "replace",
                          "target_label": "__address__",
                          "regex": "([^:]+)(?::\\d+)?;(\\d+)",
                          "replacement": "$1:$2"
                        },
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_service_label_(.+)"
                        },
                        {
                          "source_labels": [
                            "__meta_kubernetes_namespace"
                          ],
                          "action": "replace",
                          "target_label": "kubernetes_namespace"
                        },
                        {
                          "source_labels": [
                            "__meta_kubernetes_service_name"
                          ],
                          "action": "replace",
                          "target_label": "kubernetes_name"
                        },
                        {
                          "source_labels": [
                            "__meta_kubernetes_pod_node_name"
                          ],
                          "action": "replace",
                          "target_label": "kubernetes_node"
                        }
                      ],
                      "metric_relabel_configs": [
                        {
                          "source_labels": [
                            "__name__"
                          ],
                          "regex": "(container_cpu_allocation|container_cpu_usage_seconds_total|container_fs_limit_bytes|container_fs_writes_bytes_total|container_gpu_allocation|container_memory_allocation_bytes|container_memory_usage_bytes|container_memory_working_set_bytes|container_network_receive_bytes_total|container_network_transmit_bytes_total|DCGM_FI_DEV_GPU_UTIL|deployment_match_labels|kube_daemonset_status_desired_number_scheduled|kube_daemonset_status_number_ready|kube_deployment_spec_replicas|kube_deployment_status_replicas|kube_deployment_status_replicas_available|kube_job_status_failed|kube_namespace_annotations|kube_namespace_labels|kube_node_info|kube_node_labels|kube_node_status_allocatable|kube_node_status_allocatable_cpu_cores|kube_node_status_allocatable_memory_bytes|kube_node_status_capacity|kube_node_status_capacity_cpu_cores|kube_node_status_capacity_memory_bytes|kube_node_status_condition|kube_persistentvolume_capacity_bytes|kube_persistentvolume_status_phase|kube_persistentvolumeclaim_info|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_pod_container_info|kube_pod_container_resource_limits|kube_pod_container_resource_limits_cpu_cores|kube_pod_container_resource_limits_memory_bytes|kube_pod_container_resource_requests|kube_pod_container_resource_requests_cpu_cores|kube_pod_container_resource_requests_memory_bytes|kube_pod_container_status_restarts_total|kube_pod_container_status_running|kube_pod_container_status_terminated_reason|kube_pod_labels|kube_pod_owner|kube_pod_status_phase|kube_replicaset_owner|kube_statefulset_replicas|kube_statefulset_status_replicas|kubecost_cluster_info|kubecost_cluster_management_cost|kubecost_cluster_memory_working_set_bytes|kubecost_load_balancer_cost|kubecost_network_internet_egress_cost|kubecost_network_region_egress_cost|kubecost_network_zone_egress_cost|kubecost_node_is_spot|kubecost_pod_network_egress_bytes_total|node_cpu_hourly_cost|node_cpu_seconds_total|node_disk_reads_completed|node_disk_reads_completed_total|node_disk_writes_completed|node_disk_writes_completed_total|node_filesystem_device_error|node_gpu_count|node_gpu_hourly_cost|node_memory_Buffers_bytes|node_memory_Cached_bytes|node_memory_MemAvailable_bytes|node_memory_MemFree_bytes|node_memory_MemTotal_bytes|node_network_transmit_bytes_total|node_ram_hourly_cost|node_total_hourly_cost|pod_pvc_allocation|pv_hourly_cost|service_selector_labels|statefulSet_match_labels|kubecost_pv_info|up)",
                          "action": "keep"
                        }
                      ]
                    }
                  ]
                },
                "rules": {
                  "groups": [
                    {
                      "name": "CPU",
                      "rules": [
                        {
                          "expr": "sum(rate(container_cpu_usage_seconds_total{container!=\"\"}[5m]))",
                          "record": "cluster:cpu_usage:rate5m"
                        },
                        {
                          "expr": "rate(container_cpu_usage_seconds_total{container!=\"\"}[5m])",
                          "record": "cluster:cpu_usage_nosum:rate5m"
                        },
                        {
                          "expr": "avg(irate(container_cpu_usage_seconds_total{container!=\"POD\", container!=\"\"}[5m])) by (container,pod,namespace)",
                          "record": "kubecost_container_cpu_usage_irate"
                        },
                        {
                          "expr": "sum(container_memory_working_set_bytes{container!=\"POD\",container!=\"\"}) by (container,pod,namespace)",
                          "record": "kubecost_container_memory_working_set_bytes"
                        },
                        {
                          "expr": "sum(container_memory_working_set_bytes{container!=\"POD\",container!=\"\"})",
                          "record": "kubecost_cluster_memory_working_set_bytes"
                        }
                      ]
                    },
                    {
                      "name": "Savings",
                      "rules": [
                        {
                          "expr": "sum(avg(kube_pod_owner{owner_kind!=\"DaemonSet\"}) by (pod) * sum(container_cpu_allocation) by (pod))",
                          "record": "kubecost_savings_cpu_allocation",
                          "labels": {
                            "daemonset": "false"
                          }
                        },
                        {
                          "expr": "sum(avg(kube_pod_owner{owner_kind=\"DaemonSet\"}) by (pod) * sum(container_cpu_allocation) by (pod)) / sum(kube_node_info)",
                          "record": "kubecost_savings_cpu_allocation",
                          "labels": {
                            "daemonset": "true"
                          }
                        },
                        {
                          "expr": "sum(avg(kube_pod_owner{owner_kind!=\"DaemonSet\"}) by (pod) * sum(container_memory_allocation_bytes) by (pod))",
                          "record": "kubecost_savings_memory_allocation_bytes",
                          "labels": {
                            "daemonset": "false"
                          }
                        },
                        {
                          "expr": "sum(avg(kube_pod_owner{owner_kind=\"DaemonSet\"}) by (pod) * sum(container_memory_allocation_bytes) by (pod)) / sum(kube_node_info)",
                          "record": "kubecost_savings_memory_allocation_bytes",
                          "labels": {
                            "daemonset": "true"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              "alertRelabelConfigs": null,
              "networkPolicy": {
                "enabled": false
              }
            },
            "networkCosts": {
              "enabled": false,
              "image": {
                "repository": "gcr.io/kubecost1/kubecost-network-costs",
                "tag": "v0.17.3"
              },
              "imagePullPolicy": "Always",
              "updateStrategy": {
                "type": "RollingUpdate"
              },
              "prometheusScrape": false,
              "trafficLogging": true,
              "logLevel": "info",
              "port": 3001,
              "resources": {
                "limits": {
                  "cpu": "500m"
                },
                "requests": {
                  "cpu": "50m",
                  "memory": "20Mi"
                }
              },
              "extraArgs": [],
              "config": {
                "destinations": {
                  "in-zone": [
                    "127.0.0.0/8",
                    "169.254.0.0/16",
                    "10.0.0.0/8",
                    "172.16.0.0/12",
                    "192.168.0.0/16"
                  ],
                  "in-region": [],
                  "cross-region": [],
                  "internet": [],
                  "direct-classification": []
                },
                "services": {
                  "google-cloud-services": false,
                  "amazon-web-services": false,
                  "azure-cloud-services": false
                }
              },
              "tolerations": [],
              "affinity": {},
              "service": {
                "annotations": {},
                "labels": {}
              },
              "priorityClassName": "",
              "podMonitor": {
                "enabled": false,
                "additionalLabels": {}
              },
              "additionalLabels": {},
              "nodeSelector": {},
              "annotations": {},
              "healthCheckProbes": {},
              "additionalSecurityContext": {}
            },
            "kubecostDeployment": {
              "replicas": 1,
              "labels": {},
              "annotations": {}
            },
            "forecasting": {
              "enabled": true,
              "fullImageName": "gcr.io/kubecost1/kubecost-modeling:v0.1.6",
              "resources": {
                "requests": {
                  "cpu": "200m",
                  "memory": "300Mi"
                },
                "limits": {
                  "cpu": "1500m",
                  "memory": "1Gi"
                }
              },
              "env": {
                "GUNICORN_CMD_ARGS": "--log-level info -t 1200"
              },
              "priority": {
                "enabled": false,
                "name": ""
              },
              "nodeSelector": {},
              "tolerations": {},
              "affinity": {},
              "readinessProbe": {
                "enabled": true,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "failureThreshold": 200
              },
              "livenessProbe": {
                "enabled": true,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "failureThreshold": 200
              }
            },
            "kubecostAggregator": {
              "deployMethod": "singlepod",
              "enabled": false,
              "replicas": 1,
              "stagingEmptyDirSizeLimit": "2Gi",
              "numDBCopyPartitions": 25,
              "env": {
                "LOG_LEVEL": "info",
                "DB_READ_THREADS": "1",
                "DB_WRITE_THREADS": "1",
                "DB_CONCURRENT_INGESTION_COUNT": "3"
              },
              "persistentConfigsStorage": {
                "storageClass": "",
                "storageRequest": "1Gi"
              },
              "aggregatorDbStorage": {
                "storageClass": "",
                "storageRequest": "128Gi"
              },
              "resources": {},
              "readinessProbe": {
                "enabled": true,
                "initialDelaySeconds": 10,
                "periodSeconds": 10,
                "failureThreshold": 200
              },
              "cloudCost": {
                "enabled": false,
                "resources": {},
                "readinessProbe": {
                  "enabled": true,
                  "initialDelaySeconds": 10,
                  "periodSeconds": 10,
                  "failureThreshold": 200
                }
              },
              "jaeger": {
                "enabled": false,
                "image": "jaegertracing/all-in-one",
                "imageVersion": "latest"
              }
            },
            "diagnostics": {
              "enabled": true,
              "primary": {
                "enabled": false,
                "retention": "7d",
                "readonly": false
              },
              "pollingInterval": "300s",
              "keepDiagnosticHistory": false,
              "collectHelmValues": false,
              "deployment": {
                "enabled": false,
                "resources": {
                  "requests": {
                    "cpu": "10m",
                    "memory": "20Mi"
                  }
                },
                "env": {},
                "labels": {},
                "securityContext": {},
                "containerSecurityContext": {},
                "nodeSelector": {},
                "tolerations": {},
                "affinity": {}
              }
            },
            "clusterController": {
              "enabled": false,
              "image": {
                "repository": "gcr.io/kubecost1/cluster-controller",
                "tag": "v0.16.0"
              },
              "imagePullPolicy": "Always",
              "priorityClassName": "",
              "tolerations": [],
              "actionConfigs": {
                "clusterTurndown": [],
                "namespaceTurndown": null,
                "clusterRightsize": null,
                "containerRightsize": null
              },
              "kubescaler": {
                "defaultResizeAll": false
              },
              "namespaceTurndown": {
                "rbac": {
                  "enabled": true
                }
              }
            },
            "reporting": {
              "logCollection": true,
              "productAnalytics": true,
              "errorReporting": true,
              "valuesReporting": true
            },
            "serviceMonitor": {
              "enabled": false,
              "additionalLabels": {},
              "metricRelabelings": [],
              "relabelings": [],
              "networkCosts": {
                "enabled": false,
                "scrapeTimeout": "10s",
                "additionalLabels": {},
                "metricRelabelings": [],
                "relabelings": []
              }
            },
            "prometheusRule": {
              "enabled": false,
              "additionalLabels": {}
            },
            "supportNFS": false,
            "initChownDataImage": "busybox",
            "initChownData": {
              "resources": {}
            },
            "grafana": {
              "rbac": {
                "create": true
              },
              "serviceAccount": {
                "create": true,
                "name": ""
              },
              "replicas": 1,
              "deploymentStrategy": "RollingUpdate",
              "readinessProbe": {
                "httpGet": {
                  "path": "/api/health",
                  "port": 3000
                }
              },
              "livenessProbe": {
                "httpGet": {
                  "path": "/api/health",
                  "port": 3000
                },
                "initialDelaySeconds": 60,
                "timeoutSeconds": 30,
                "failureThreshold": 10
              },
              "image": {
                "repository": "grafana/grafana",
                "tag": "10.3.4",
                "pullPolicy": "IfNotPresent"
              },
              "securityContext": {},
              "priorityClassName": "",
              "downloadDashboardsImage": {
                "repository": "curlimages/curl",
                "tag": "latest",
                "pullPolicy": "IfNotPresent"
              },
              "podAnnotations": {},
              "annotations": {},
              "service": {
                "type": "ClusterIP",
                "port": 80,
                "annotations": {},
                "labels": {}
              },
              "ingress": {
                "enabled": false,
                "annotations": {},
                "labels": {},
                "path": "/",
                "pathType": "Prefix",
                "hosts": [
                  "chart-example.local"
                ],
                "tls": []
              },
              "resources": {},
              "nodeSelector": {},
              "tolerations": [],
              "affinity": {},
              "persistence": {
                "enabled": false
              },
              "adminUser": "admin",
              "adminPassword": "strongpassword",
              "env": {},
              "envFromSecret": "",
              "extraSecretMounts": [],
              "plugins": [],
              "dashboardProviders": {},
              "dashboards": {},
              "dashboardsConfigMaps": {},
              "ldap": {
                "existingSecret": "",
                "config": ""
              },
              "smtp": {
                "existingSecret": ""
              },
              "sidecar": {
                "image": {
                  "repository": "kiwigrid/k8s-sidecar",
                  "tag": "1.26.0",
                  "pullPolicy": "IfNotPresent"
                },
                "resources": {},
                "dashboards": {
                  "enabled": true,
                  "label": "grafana_dashboard",
                  "labelValue": "1",
                  "annotations": {},
                  "error_throttle_sleep": 0,
                  "folder": "/tmp/dashboards"
                },
                "datasources": {
                  "enabled": false,
                  "error_throttle_sleep": 0,
                  "label": "grafana_datasource"
                }
              },
              "grafana.ini": {
                "server": {
                  "serve_from_sub_path": false,
                  "root_url": "%(protocol)s://%(domain)s:%(http_port)s/grafana"
                },
                "paths": {
                  "data": "/var/lib/grafana/data",
                  "logs": "/var/log/grafana",
                  "plugins": "/var/lib/grafana/plugins",
                  "provisioning": "/etc/grafana/provisioning"
                },
                "analytics": {
                  "check_for_updates": true
                },
                "log": {
                  "mode": "console"
                },
                "grafana_net": {
                  "url": "https://grafana.net"
                },
                "auth.anonymous": {
                  "enabled": true,
                  "org_role": "Editor",
                  "org_name": "Main Org."
                }
              }
            },
            "serviceAccount": {
              "create": true,
              "annotations": {}
            },
            "awsstore": {
              "useAwsStore": false,
              "imageNameAndVersion": "gcr.io/kubecost1/awsstore:latest",
              "createServiceAccount": false,
              "priorityClassName": "",
              "nodeSelector": {},
              "annotations": {}
            },
            "federatedETL": {
              "agentOnly": false,
              "federatedCluster": false,
              "redirectS3Backup": false,
              "useMultiClusterDB": false
            },
            "kubecostAdmissionController": {
              "enabled": false,
              "secretName": "webhook-server-tls",
              "caBundle": "${CA_BUNDLE}"
            },
            "costEventsAudit": {
              "enabled": false
            },
            "extraObjects": []
          }
        }
      ]
    capabilities: Basic Install
    categories: Monitoring
    containerImage: gcr.io/kubecost1/operator/kubecost-operator-controller:v2.2.4
    support: Stackwatch
    createdAt: "2024-05-19T20:46:35Z"
    operators.operatorframework.io/builder: operator-sdk-v1.32.0
    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
    description: |-
      An operator that deploys Kubecost 2.2.4 via the Helm chart.
  name: kubecost.v2.2.4
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - kind: CostAnalyzer
      name: costanalyzers.charts.kubecost.com
      version: v1alpha1
      displayName: CostAnalyzer
      description: The CostAnalyzer API describes a deployment of Kubecost and its dependencies.
  description: |-
    Kubecost provides real-time cost visibility and insights for teams using Kubernetes, helping you continuously reduce your cloud costs.

    This OpenShift operator deploys Kubecost from the official Helm chart.

    Kubecost allows you to:

    * See allocated spend across all native Kubernetes concepts, so you can provide your teams with transparent, accurate cost data reconciled with your actual cloud bill.
    * Join in-cluster costs like CPU and memory with out-of-cluster spend from cloud infrastructure services for complete cost visibility—all services from AWS, GCP, and Microsoft Azure are supported.
    * Gain insights you can use to save 30-50% or more on your infrastructure spend, without exposing your private information—your data never gets shared externally, even with us.
    * Have real-time alerts and recurring reports, empowering teams to take control of their Kubernetes-enabled infrastructure, stay within budgeted limits, and address monitoring interruptions immediately.

    Visit the Kubecost website for more details including features, pricing, documentation, and more at www.kubecost.com.
  displayName: Kubecost
  icon:
  - base64data: 
    mediatype: image/png
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - security.openshift.io
          resources:
          - securitycontextconstraints
          verbs:
          - "*"
        - apiGroups:
          - route.openshift.io
          resources:
          - routes
          verbs:
          - "*"
        - apiGroups:
          - apiextensions.k8s.io
          resources:
          - customresourcedefinitions
          verbs:
          - create
          - get
          - list
        - apiGroups:
          - ""
          resources:
          - namespaces
          - nodes
          - persistentvolumes
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
        - apiGroups:
          - charts.kubecost.com
          resources:
          - costanalyzers
          - costanalyzers/status
          - costanalyzers/finalizers
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - clusterrolebindings
          - clusterroles
          verbs:
          - '*'
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - rolebindings
          - roles
          verbs:
          - '*'
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - statefulsets
          verbs:
          - '*'
        - apiGroups:
          - networking.k8s.io
          resources:
          - ingresses
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - configmaps
          - persistentvolumeclaims
          - secrets
          - serviceaccounts
          - services
          verbs:
          - '*'
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: kubecost-operator-controller-manager
      deployments:
      - label:
          app.kubernetes.io/component: manager
          app.kubernetes.io/created-by: kubecost-operator
          app.kubernetes.io/instance: controller-manager
          app.kubernetes.io/managed-by: kustomize
          app.kubernetes.io/name: deployment
          app.kubernetes.io/part-of: kubecost-operator
          control-plane: controller-manager
        name: kubecost-operator-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              annotations:
                kubectl.kubernetes.io/default-container: manager
              labels:
                control-plane: controller-manager
            spec:
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                    - matchExpressions:
                      - key: kubernetes.io/arch
                        operator: In
                        values:
                        - amd64
                        - arm64
                        - ppc64le
                        - s390x
                      - key: kubernetes.io/os
                        operator: In
                        values:
                        - linux
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=0
                image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                  protocol: TCP
                resources:
                  limits:
                    cpu: 500m
                    memory: 1Gi
                  requests:
                    cpu: 5m
                    memory: 512Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --leader-elect
                - --leader-election-id=kubecost-operator
                image: gcr.io/kubecost1/operator/kubecost-operator-controller:v2.2.4
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 500m
                    memory: 512Mi
                  requests:
                    cpu: 10m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              securityContext:
                runAsNonRoot: true
              serviceAccountName: kubecost-operator-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: kubecost-operator-controller-manager
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - kubecost
  - cost
  - kubernetes
  links:
  - name: Kubecost
    url: https://www.kubecost.com
  maintainers:
  - email: czoller@kubecost.com
    name: Chip Zoller
  maturity: alpha
  provider:
    name: Stackwatch
    url: www.kubecost.com
  version: 2.2.4
